<!DOCTYPE HTML>
<html>
<head>
<title>Neubelegung von Tasten</title>
<meta name="description" content="Freier Tastatur-Remapper, der auch Maus- und Joystick-Tasten neubelegen kann. Zudem kann er wiederholende Aufgaben durch Senden von Tastatureingaben &amp; Mausklicks automatisieren.">
<meta name="keywords" content="tastatur,remapper,neubelegen,neubelegung,taste,tastatureingaben,klicks,maus,tasten,joystick,hotkeys,hotkey">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Neubelegung von Tasten</h1>

<h2>Einführung</h2>
<p><strong>Einschränkung</strong>: Das unten beschriebene Neubelegungs-Feature von AutoHotkey ist in der Regel nicht so eindeutig und effektiv wie das direkte Neubelegen mit der Windows-Registry. Die Vor- und Nachteile der einzelnen Methoden findest du unter <a href="#registry">Neubelegung mit der Registry</a>.</p>
<h2 id="Remap">Neubelegung von Tastatur und Maus</h2>
<p>Die Syntax zum Neubelegen einer Taste ist <code>Originaltaste::Zieltaste</code>. Enthält ein <a href="../Scripts.htm">Skript</a> beispielsweise nur die folgende Zeile, würde sie die A-Taste dazu bringen, sich wie die B-Taste zu verhalten:</p>
<pre>a::b</pre>
<p>Im oberen Beispiel wird die B-Taste selbst nicht geändert. Die B-Taste würde weiterhin ein "b" senden, sofern du sie auch nicht neubelegst, wie z. B.:</p>
<pre>a::b
b::a</pre>
<p>Es reicht vollkommen aus, bei den meisten Neubelegungen Kleinbuchstaben zu verwenden, weil deren Großbuchstaben auch mit neubelegt werden (das heißt: Drückt man die neubelegte Taste bei aktivierter FESTSTELL-Taste oder beim Drücken der UMSCHALT-Taste, würde automatisch ein Großbuchstabe gesendet werden). Ein Großbuchstabe als Zieltaste würde hingegen die Großschreibung erzwingen. Das folgende Beispiel würde ein großgeschriebenes B erzeugen, wenn du entweder "a" oder "A" eingibst (sofern die FESTSTELL-Taste deaktiviert ist):</p>
<pre>a::B</pre>
<p>&nbsp;</p>
<p id="RemapMouse"><strong>Neubelegung der Maus</strong>: Mit der gleichen Methode kann auch die Maus neubelegt werden. Zum Beispiel:</p>
<table class="info">
  <tr>
    <td>MButton::Shift</td>
    <td>Bringt die mittlere Maustaste dazu, sich wie die UMSCHALT-Taste zu verhalten.</td>
  </tr>
  <tr>
    <td>XButton1::LButton</td>
    <td>Bringt die vierte Maustaste dazu, sich wie die linke Maustaste zu verhalten.</td>
  </tr>
  <tr>
    <td>RAlt::RButton</td>
    <td>Bringt die rechte ALT-Taste dazu, sich wie die rechte Maustaste zu verhalten.</td>
  </tr>
</table>
<p>&nbsp;</p>
<p><strong>Weitere nützliche Neubelegungen:</strong></p>
<table class="info">
  <tr>
    <td>Capslock::Ctrl</td>
    <td>Bringt die FESTSTELL-Taste dazu, sich wie die STRG-Taste zu verhalten. Um die FESTSTELL-Taste weiterhin an- oder ausschalten zu können, musst du <code>+Capslock::Capslock</code> davor setzen. Diese Neubelegung würde die FESTSTELL-Taste an- oder ausschalten, wenn du die UMSCHALT-Taste gedrückt hältttst und die FESTSTELL-Taste drückst. Da bei beiden Neubelegungen zusätzliche Modifikatortasten gedrückt gehalten werden können, muss die spezifischere Neubelegung <code>+Capslock::Capslock</code> an erster Stelle gesetzt werden, bevor es funktionieren kann.</td>
  </tr>
  <tr>
    <td>XButton2::^LButton</td>
    <td>Bringt die fünfte Maustaste (XButton2) dazu, STRG+MAUSTASTE-LINKS zu erzeugen.</td>
  </tr>
  <tr>
    <td>RAlt::AppsKey</td>
    <td>Bringt die rechte ALT-Taste dazu, sich wie die MENÜ-Taste zu verhalten (das ist die Taste zum Öffnen des Kontextmenüs).</td>
  </tr>
  <tr>
    <td>RCtrl::RWin</td>
    <td>Bringt die rechte STRG-Taste dazu, sich wie die rechte WIN-Taste zu verhalten.</td>
  </tr>
  <tr>
    <td>Ctrl::Alt</td>
    <td>Bringt die STRG-Taste dazu, sich wie die ALT-Taste zu verhalten. Siehe jedoch <a href="#AltTab">Alt-Tab-Probleme</a>.</td>
  </tr>
  <tr>
    <td>^x::^c</td>
    <td>Bringt STRG+X dazu, STRG+C zu erzeugen. Sie würde auch STRG+ALT+X dazu bringen, STRG+ALT+C zu erzeugen, usw.</td>
  </tr>
  <tr>
    <td>RWin::Return</td>
    <td>Bringt die rechte WIN-Taste dazu, nichts zu tun (siehe <a href="../commands/Return.htm">Return</a>).</td>
  </tr>
</table>
<p>Du kannst die hier genannten Beispiele ausprobieren, indem du sie in eine neue Textdatei (z. B. "Remap.ahk") kopierst und anschließend startest.</p>
<p>In der <a href="../KeyList.htm">Tastenliste</a> findest du alle möglichen Namen der Tastatur- und Maustasten.</p>
<h2>Bemerkungen</h2>
<p>Mit den Direktiven <a href="../commands/_IfWinActive.htm">#IfWinActive/Exist</a> können Neubelegungen bestimmt werden, die nur für das angegebene Fenster gültig sein sollen. Zum Beispiel:</p>
<pre>#IfWinActive ahk_class Notepad
a::b  <em>; Bringt 'a' dazu, sich im Texteditor wie 'b' zu verhalten.</em>
#IfWinActive  <em>; Macht nachfolgende Neubelegungen und Hotkeys für alle Fenster geltend.</em></pre>
<p>Das Neubelegen einer Taste wird bei folgenden Punkten als "vollständig" angesehen:</p>
<ul>
  <li>Hält man eine Modifikatortaste wie STRG oder UMSCHALT gedrückt, während man die Originaltaste eingibt, wird diese Modifikatortaste auch für die Zieltaste wirksam. <code>b::a</code> würde beispielsweise STRG+A erzeugen, wenn du STRG+B drückst.</li>
  <li>Die FESTSTELL-Taste beeinflusst neubelegte Tasten auf die gleiche Weise wie normale Tasten.</li>
  <li>Beim Gedrückthalten der Zieltaste wird solange die Originaltaste gesendet, bis du die Zieltaste wieder loslässt. Es ist möglich, dass einige Spiele Neubelegungen dieser Art nicht unterstützen; in solchen Fällen verhalten sich die Tastatur und Maus so, als wären sie noch unbelegt.</li>
  <li>Neubelegte Tasten werden automatisch wiederholt, während sie gedrückt gehalten werden (außer Tasten, die zu Maustasten gemacht worden sind).</li>
</ul>
<p id="HookHotkeys">Eine neubelegte Taste kann normale Hotkeys auslösen, aber standardmäßig keine Maus- oder <a href="../commands/_UseHook.htm">Hook-Hotkeys</a> (mit <a href="../commands/ListHotkeys.htm">ListHotkeys</a> kannst du rausfinden, welche Hotkeys das Hook-Feature haben). Bei dem Beispiel <code>a::b</code> würde durch Drücken von STRG+ALT+A der Hotkey <code>^!b</code> ausgelöst werden, sofern <code>^!b</code> kein Hook-Hotkey ist. Wenn <code>^!b</code> ein Hook-Hotkey ist, kannst du <code>^!a</code> als Hotkey definieren, wenn STRG+ALT+A die gleiche Aktion ausführen soll wie STRG+ALT+B. Zum Beispiel:</p>
<pre>a::b
^!a::
^!b::
ToolTip Du hast %A_ThisHotkey% gedrückt.
return</pre>
<p>Alternativ kann man <a href="../commands/_InputLevel.htm">#InputLevel</a> verwenden, um das Standardverhalten zu überschreiben. Zum Beispiel:</p>
<pre>#InputLevel 1
a::b

#InputLevel 0
^!b::
ToolTip Du hast %A_ThisHotkey% gedrückt.
return</pre>
<p id="SendPlay">Ein <a href="../commands/SendMode.htm">SendMode</a> im automatischen Ausführungsbereich (oberster Bereich des Skripts) beeinflusst alle Neubelegungen. Da beim Neubelegen <a href="../commands/Send.htm#blind">Send {Blind}</a> gilt und der <a href="../commands/SendMode.htm">SendPlay-Modus</a> {Blind} nicht richtig unterstützt, kann es passieren, dass einige Neubelegungen nicht korrekt im SendPlay-Modus laufen (besonders STRG, UMSCHALT, ALT und WIN). Um dies zu umgehen, solltest du im automatischen Ausführungsbereich auf SendPlay verzichten, wenn Neubelegungen vorhanden sind; verwende stattdessen im ganzen Skript den Befehl <a href="../commands/Send.htm#SendPlay">SendPlay</a> anstelle von Send. Alternativ könntest du die Neubelegungen in Hotkeys umwandeln (wie unten beschrieben), der explizit SendEvent anstelle von Send aufruft.</p>
<p id="actually">Beim Starten eines Skripts wird jede Neubelegung in ein <a href="../Hotkeys.htm">Hotkey</a>-Paar umgewandelt. Zum Beispiel würde ein Skript, das <code>a::b</code> enthält, eigentlich folgende zwei Hotkeys enthalten:</p>
<pre>*<strong>a</strong>::
SetKeyDelay -1   <em>; Ist die Zieltaste eine Maustaste, dann stattdessen SetMouseDelay.</em>
Send <a href="../commands/Send.htm#blind">{Blind}</a>{<strong>b</strong> DownTemp}  <em>; DownTemp ist wie Down, außer dass andere Send-Befehle im Skript nicht davon ausgehen, dass "b" beim Senden unten bleiben soll.</em>
return

*<strong>a up</strong>::
SetKeyDelay -1  <em>; Siehe den Hinweis unten, warum die Druckdauer bei beiden SetKeyDelays fehlt.</em>
Send {Blind}{<strong>b</strong> Up}
return</pre>
<p>Allerdings unterscheiden sich die obigen Hotkeys unter folgenden Umständen:</p>
<ol>
  <li>Wenn die Originaltaste LCtrl und die Zieltaste eine ALT-Taste ist, wird die Zeile <code>Send {Blind}{LAlt DownTemp}</code> durch <code>Send {Blind}<strong>{LCtrl Up}</strong>{LAlt DownTemp}</code> ersetzt. Das Gleiche gilt, wenn die Originaltaste RCtrl ist, aber dann stattdessen <code>{RCtrl up}</code>.</li>
  <li>Wenn eine Tastatur-Taste dazu gebracht wird, eine Maustaste zu sein (z. B. <code>RCtrl::RButton</code>), verwenden die obigen Hotkeys SetMouseDelay statt SetKeyDelay. Darüber hinaus wird der erste Hotkey oben mit dem folgenden Hotkey ersetzt, um das Auto-Wiederholungs-Feature der Tastatur daran zu hindern, wiederholende Mausklicks zu generieren:
    <pre>*RCtrl::
SetMouseDelay -1
if not GetKeyState("RButton")  <em>; wenn die rechte Maustaste noch nicht unten ist ...</em>
    Send {Blind}{RButton DownTemp}
return</pre>
  </li>
</ol>
<p>Beachte, dass SetKeyDelay's zweiter Parameter (<a href="../commands/SetKeyDelay.htm#dur">Druckdauer</a>) bei den Hotkeys oben fehlt. Das liegt daran, dass die Druckdauer nicht auf Nur-Unten- oder Nur-Oben-Ereignisse angewendet wird, wie z. B. <code>{b down}</code> und <code>{b up}</code>. Allerdings wird sie auf Änderungen in Bezug auf den Zustand der Tasten UMSCHALT, STRG, ALT und WIN angewendet, das Neubelegungen wie <code>a::B</code> oder <code>a::^b</code> beeinflusst. Folglich würde jede Druckdauer, die im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> in Kraft gesetzt wird, für alle Neubelegungen gelten.</p>
<p>Ein Tastenpaar kann nicht direkt zu einer einzigen Taste neubelegt werden (z. B. ist <code>a &amp; c::b</code> keine gültige Schreibweise). Allerdings ist es möglich, diesen Effekt nachzuahmen, indem man die Up- und Down-Hotkeys von ganz oben stattdessen verwendet: ersetze <code>*a::</code> mit <code>a &amp; c::</code>, und <code>*a up::</code> mit <code>a &amp; c up::</code>.</p>
<p>Da Neubelegungen in Hotkeys umgewandelt werden, wie oben beschrieben, können sie vom <a href="../commands/Suspend.htm">Suspend</a>-Befehl beeinflusst werden. Ebenso könnte der <a href="../commands/Hotkey.htm">Hotkey</a>-Befehl eine Neubelegung deaktivieren oder ändern. Zum Beispiel würden die zwei folgenden Befehle die Neubelegung <code>a::b</code> deaktivieren.</p>
<pre>Hotkey, *a, off
Hotkey, *a up, off</pre>
<p id="AltTab">Alt-Tab-Probleme: Wenn du eine Taste oder Maustaste zu einer ALT-Taste neubelegt hast, wird diese Taste wahrscheinlich nicht in der Lage sein, ein Alt-Tab richtig durchzuführen. Eine mögliche Übergangslösung ist es, den Hotkey <code>*Tab::Send {Blind}{Tab}</code> einzufügen. Aber beachte, dass dieser Hotkey Probleme verursachen kann, wenn die echte ALT-Taste zum Alt-Tabbing verwendet wird. Er sollte daher nur verwendet werden, wenn du ausschließlich mit neubelegten Tasten und/oder <a href="../Hotkeys.htm#alttab">Alt-Tab-Hotkeys</a> Alt-Tabbing durchführst.</p>
<p>Zusätzlich zu den Tasten und Maustasten in der <a href="../KeyList.htm">Tastenliste</a> kann die Originaltaste auch eine virtuelle Taste (VKnn) oder ein Scancode (SCnnn) sein (siehe <a href="../KeyList.htm#SpecialKeys">Sondertasten</a>). Das gleiche gilt für die Zieltaste, außer dass nach der virtuellen Taste optional auch ein Scancode angegeben werden kann. Bei den meisten Tastaturbelegungen wäre beispielsweise <code>sc01e::vk42sc030</code> das gleiche wie <code>a::b</code>.</p>
<p>Wenn eine Taste deaktiviert statt neubelegt werden soll, muss sie zu einem Hotkey gemacht werden, das einfach nur ein <a href="../commands/Return.htm">Return</a> hat. Zum Beispiel würde <code>F1::Return</code> die F1-Taste deaktivieren.</p>
<p>Folgende Tasten werden nicht von der Built-in-Neubelegungsmethode unterstützt:</p>
<ul>
  <li>Das Mausrad (WheelUp/Down/Left/Right).</li>
  <li>PAUSE- und BREAK-Taste als Zieltasten (da sie mit den Befehlsnamen übereinstimmen).</li>
  <li>Geschweifte Klammern {} als Zieltasten. Verwende stattdessen die <a href="../commands/Send.htm#vk">VK/SC-Methode</a>; z. B. <code>x::+sc01A</code> und <code>y::+sc01B</code>.</li>
  <li>Ein Prozentzeichen (%) als Zieltaste. Verwende stattdessen die <a href="../commands/Send.htm#vk">VK/SC-Methode</a>.</li>
  <li>"Return" als Zieltaste. Verwende stattdessen "Enter".</li>
</ul>
<h2>Bewegung des Mauszeigers per Tastatur</h2>
<p>Im vollausgestatteten <a href="../scripts/NumpadMouse.htm">Tastatur-zu-Maus-Skript</a> wird gezeigt, wie der Mauszeiger mit der Tastatur bewegt werden kann. Da dieses Skript eine reibungslose Mausbewegung, -beschleunigung und andere Features bietet, solltest du es verwenden, wenn du vorhast, die Mausaktivitäten häufig mit der Tastatur durchzuführen. Das folgende Beispiel ist eine vereinfachte Version davon:</p>
<pre>*#up::MouseMove, 0, -10, 0, R  <em>; WIN + NACH-OBEN =&gt; Zeiger nach oben bewegen</em>
*#Down::MouseMove, 0, 10, 0, R  <em>; WIN + NACH-UNTEN =&gt; Zeiger nach unten bewegen</em>
*#Left::MouseMove, -10, 0, 0, R  <em>; WIN + NACH-LINKS =&gt; Zeiger nach links bewegen</em>
*#Right::MouseMove, 10, 0, 0, R  <em>; WIN + NACH-RECHTS =&gt; Zeiger nach rechts bewegen</em>

*&lt;#RCtrl::  <em>; WIN-LINKS + STRG-RECHTS =&gt; Linker Mausklick (halte STRG/UMSCHALT gedrückt, um ein STRG+Klick oder UMSCHALT+Klick zu machen).</em>
SendEvent {Blind}{LButton down}
KeyWait RCtrl  <em>; Hindert die Tastatur-Auto-Wiederholung daran, den Mausklick zu wiederholen.</em>
SendEvent {Blind}{LButton up}
return

*&lt;#AppsKey::  <em>; WIN-LINKS + MENU =&gt; Rechter Mausklick</em>
SendEvent {Blind}{RButton down}
KeyWait AppsKey  <em>; Hindert die Tastatur-Auto-Wiederholung daran, den Mausklick zu wiederholen.</em>
SendEvent {Blind}{RButton up}
return</pre>
<h2 id="registry">Neubelegung via Registry's "Scancode Map"</h2>
<p><strong>Vorteile:</strong></p>
<ul>
  <li>Die Registry-Neubelegung ist in der Regel eindeutiger und effektiver als die <a href="#Remap">Neubelegung von AutoHotkey</a>. Zum Beispiel unterstützt sie eine breitere Auswahl an Spielen, sie hat keine bekannten <a href="#AltTab">Alt-Tab-Probleme</a>, und kann Hook-Hotkeys von AutoHotkey auslösen (während die Neubelegung von AutoHotkey eine <a href="#HookHotkeys">Übergangslösung</a> benötigt).</li>
  <li>Entscheidest du dich, die Registry-Einträge manuell vorzunehmen (wie unten beschrieben), ist absolut keine externe Software notwendig, um deine Tastatur neubelegen zu können. Und selbst wenn du <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> verwendest, das die Registry-Einträge für dich vornehmen kann, muss es nicht die ganze Zeit laufen (wie im Gegensatz zu AutoHotkey).</li>
</ul>
<p><strong>Nachteile:</strong></p>
<ul>
  <li>Die Neubelegung per Registry ist unflexibel: es wird ein Neustart benötigt, um Änderungen rückgängig zu machen oder um neue Änderungen in Kraft zu setzen.</li>
  <li>Die Auswirkung ist global: Erstellte Neubelegungen gelten für alle Benutzer, Anwendungen oder Gebietsschemen.</li>
  <li>Es ist nicht möglich, Tastatureingaben in Verbindung mit UMSCHALT, STRG, ALT oder ALTGR zu senden. Zum Beispiel kann ein Kleinbuchstabe nicht zu einem Großbuchstaben neubelegt werden.</li>
  <li>Es wird nur die Tastatur unterstützt (dagegen hat AutoHotkey zusätzlich <a href="#RemapMouse">Maus-Neubelegung</a> und <a href="RemapJoystick.htm">limitierte Joystick-Neubelegung</a>).</li>
</ul>
<p><strong>Wie Änderungen an der Registry vorgenommen werden können</strong>: Es gibt mindestens zwei Methoden zum Neubelegen von Tasten per Registry:</p>
<ol>
  <li>Mit einem Programm wie <a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a> (Freeware) kannst du visuell Tasten neubelegen. Dieses Programm ändert automatisch die Registry für dich.</li>
  <li>Du kannst Tasten manuell neubelegen, indem du eine .reg-Datei (Klartext) erstellst und sie in die Registry lädst. Siehe dazu <a href="http://www.autohotkey.com/forum/post-56216.html#56216">www.autohotkey.com/forum/post-56216.html#56216</a>.</li>
</ol>
<h2>Siehe auch</h2>
<p><a href="../KeyList.htm#Joystick">Liste mit Tasten</a><br>
<a href="../commands/GetKeyState.htm">GetKeyState</a><br>
<a href="RemapJoystick.htm">Neubelegung eines Joysticks</a></p>
</body>
</html>
