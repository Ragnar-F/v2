<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Gui-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das Gui-Objekt stellt eine Schnittstelle für ein GUI-Fenster zur Verfügung, um Aktionen wie das Hinzufügen neuer Steuerelemente durchzuführen oder um Werte wie Farben abzurufen oder zu setzen." />
<meta name="ahk:equiv-v1" content="commands/Gui.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GUI-Objekt</h1>
<p>Ermöglicht eine Schnittstelle zum Erstellen und Verwalten von Fenstern, und Erstellen von Steuerelementen. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden. <a href="../commands/GuiCreate.htm">GuiCreate</a> und <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a> geben ein Objekt dieses Typs zurück.</p>

<p><strong>Eigenschaften:</strong></p>
<ul>
  <li><a href="#BackColor">BackColor</a>: Ermittelt oder setzt die Hintergrundfarbe des Fensters.</li>
  <li><a href="#ClientPos">ClientPos</a>: Ermittelt die Position und Größe des Clientbereichs eines GUI-Fensters.</li>
  <li><a href="#__Item">__Item</a>: Ermittelt ein <a href="GuiControl.htm">GuiControl-Objekt</a>, das zu einem Namen, einem Text, einer ClassNN-Bezeichnung oder einer HWND-Nummer (eindeutigen ID) gehört.</li>
  <li><a href="#FocusedCtrl">FocusedCtrl</a>: Ermittelt das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten Steuerelements in der GUI.</li>
  <li><a href="#Hwnd">Hwnd</a>: Ermittelt die HWND-Nummer (eindeutige ID) des GUI-Fensters.</li>
  <li><a href="#MarginX">MarginX</a>: Ermittelt oder setzt die Größe von horizontalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</li>
  <li><a href="#MarginY">MarginY</a>: Ermittelt oder setzt die Größe von vertikalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</li>
  <li><a href="#MenuBar">MenuBar</a>: Ermittelt oder setzt die Menüleiste des Fensters.</li>
  <li><a href="#Name">Name</a>: Ermittelt oder setzt einen benutzerdefinierten Namen für das GUI-Fenster.</li>
  <li><a href="#Pos">Pos</a>: Ermittelt die Position und Größe des GUI-Fensters.</li>
  <li><a href="#Title">Title</a>: Ermittelt oder setzt den Titel des GUI-Fensters.</li>
</ul>
<p><strong>Methoden:</strong></p>
<ul>
  <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
  <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
  <li><a href="#Flash">Flash</a>: Lässt das Fenster und seine Taskleistenschaltfläche einmal aufblinken.</li>
  <li><a href="#Hide">Hide</a>: Versteckt das Fenster.</li>
  <li><a href="#Maximize">Maximize</a>: Macht das Fenster wieder sichtbar und maximiert es.</li>
  <li><a href="#Minimize">Minimize</a>: Macht das Fenster wieder sichtbar und minimiert es.</li>
  <li><a href="#__Enum">__Enum</a>: Ermöglicht es, Steuerelemente des GUI-Fensters schrittweise durchzugehen.</li>
  <li><a href="GuiOnEvent.htm">OnEvent</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn das entsprechende Ereignis ausgelöst wird.</li>
  <li><a href="#Opt">Opt</a>: Setzt verschiedene Optionen und Styles, die das Aussehen und Verhalten des GUI-Fensters beeinflussen.</li>
  <li><a href="#Restore">Restore</a>: Macht das Fenster wieder sichtbar und stellt dessen ursprünglichen Zustand wieder her, falls es zuvor minimiert oder maximiert war.</li>
  <li><a href="#SetFont">SetFont</a>: Bestimmt Schriftart, Schriftgröße, Schriftstil und Schriftfarbe für danach erstellte Steuerelemente.</li>
  <li><a href="#Show">Show</a>: Macht das Fenster sichtbar. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
  <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
</ul>
<p><strong>Allgemeines:</strong></p>
<ul>
  <li><a href="#Navigate">Navigation mit der Tastatur</a></li>
  <li><a href="#Appear">Fensterdarstellung</a></li>
  <li><a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
  <li><a href="#Related">Siehe auch</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>Fügt ein Steuerelement in das GUI-Fenster ein, und gibt ein  <a href="GuiControl.htm">GuiControl-Objekt</a> zurück.</p>
<pre class="Syntax">Gui.<span class="func">Add</span>(Steuerelement <span class="optional">, Optionen, Text</span>)
Gui.<span class="func">Add</span>Steuerelement(<span class="optional">Optionen, Text</span>)</pre>
<dl>
  <dt>Steuerelement</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Dies kann folgendes sein: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Edit">Edit</a>, <a href="../commands/GuiControls.htm#UpDown">UpDown</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Checkbox">Checkbox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#Hotkey">Hotkey</a>, <a href="../commands/GuiControls.htm#DateTime">DateTime</a>, <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a></p>
  <p>Zum Beispiel:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Text",, "Bitte tragen Sie Ihren Namen ein:")
Gui.AddEdit("vName")
Gui.Show</pre></dd>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p id="PosSize"><strong>Position und Größe von Steuerelementen ändern</strong></p>
  <p>Wenn Dimensionen und/oder Koordinaten in <em>Optionen</em> weggelassen werden, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder je nach Inhalt und Typ automatisch dimensioniert.</p>
  <p>Folgende Optionen werden unterstützt:</p>
  <p id="R"><strong>R</strong>: Textzeilen (kann eine Floating-Point-Zahl enthalten, z. B. R2.5). <strong>R</strong> ist oft besser als <strong>H</strong> (Höhe). Wenn <strong>R</strong> und <strong>H</strong> gleichzeitig vorhanden sind, wird <strong>R</strong> bevorzugt. Bei einer GroupBox ist das die Anzahl der Steuerelemente, für die Platz in der Box reserviert werden soll. Bei einer <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a> oder <a href="../commands/GuiControls.htm#ListBox">ListBox</a> ist das die Anzahl der Listeneinträge, die der Listenbereich des Steuerelements maximal anzeigen soll (in Windows XP oder höher ist ratsam, eine DropDownList oder ComboBox ohne <strong>R</strong> und <strong>H</strong> zu erstellen, damit die aufklappbare Liste von der verfügbaren Höhe des Desktops profitieren kann). Bei allen anderen Steuerelementen ist <strong>R</strong> die Anzahl der Textzeilen, die maximal angezeigt werden sollen.</p>
  <p><strong>W</strong>: Breite in Pixel. Lässt man diese Option weg, wird die Breite von einigen Steuerelementen automatisch anhand ihres Inhalts berechnet. Alle anderen Steuerelemente haben standardmäßig folgende Breiten:<br>
      Tab-Steuerelement: Das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#MarginX">horizontalen Abstands</a>.<br>
      Vertikale ProgressBar: Das 2-fache der aktuellen Schriftgröße.<br>
      Horizontale ProgressBar, horizontaler Slider, DropDownList, ComboBox, ListBox, GroupBox, Edit, Hotkey: Das 15-fache der aktuellen Schriftgröße (außer GroupBox, wo das 18-fache gilt, um Platz für Abstände zu schaffen).</p>
  <p><strong>H</strong>: Höhe in Pixel. Wenn man sowohl <strong>H</strong> als auch <strong>R</strong> weglässt, ist DropDownList, ComboBox, ListBox und ein leeres mehrzeiliges Edit-Steuerelement standardmäßig 3 Zeilen hoch; GroupBox standardmäßig 2 Zeilen hoch; vertikaler Slider und vertikale ProgressBar standardmäßig 5 Zeilen hoch; horizontaler Slider standardmäßig 30 Pixel hoch (außer wenn eine Dicke angegeben wurde); horizontale ProgressBar standardmäßig das 2-fache der aktuellen Schriftgröße hoch; Hotkey standardmäßig 1 Zeile hoch; und Tab standardmäßig 10 Zeilen hoch. Alle anderen Steuerelemente bekommen automatisch eine Höhe zugewiesen, die auf ihren Inhalt basiert. Beachten Sie bei einer DropDownList und ComboBox, dass sich <strong>H</strong> auf eine Höhe bezieht, die sich zusammensetzt aus der Höhe des sichtbaren Bereichs und der Höhe des Listenbereichs (bei einem zu niedrigen Wert wird immer mindestens ein Listeneintrag angezeigt). Außerdem ist es ratsam, die gewünschte Höhe via <strong>R</strong> statt <strong>H</strong> zu definieren, um die vollständige Sichtbarkeit der Textzeilen zu gewährleisten.</p>
  <p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> können genutzt werden, um die Breite und/oder Höhe eines Steuerelements auf genau die Breite oder Höhe des zuvor hinzugefügten Steuerelements zu setzen, die optional um eine beliebige Zahl (in diesem Fall <strong>n</strong>) erhöht oder verringert werden kann. <code>wp</code> beispielsweise würde die Breite eines Steuerelements auf die des vorherigen Steuerelements setzen, und <code>wp-50</code> auf die Breite des vorherigen Steuerelements, aber um 50 verringert.</p>
  <p id="XY"><strong>X</strong>: X-Position. <code>x0 y0</code> beispielsweise positioniert das Steuerelement in die obere linke Ecke des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste). Wenn man <strong>Y</strong> ohne <strong>X</strong> angibt, wird das Steuerelement auf die rechte Seite aller zuvor hinzugefügten Steuerelementen positioniert, was als Beginn einer neuen "Spalte" gesehen werden kann.</p>
  <p><strong>Y</strong>: Y-Position. Wenn man <strong>X</strong> ohne <strong>Y</strong> angibt, wird das Steuerelement unterhalb aller zuvor hinzugefügten Steuerelementen positioniert, was als Beginn einer neuen "Reihe" gesehen werden kann.</p>
  <p><strong>X</strong> und/oder <strong>Y</strong> wegzulassen hat den Vorteil, dass sich ein GUI-Layout automatisch an zukünftigen Änderungen bzgl. der Größe von Steuerelementen oder der Schrift anpassen kann. Wenn man stattdessen jedes Steuerelement absolut positioniert, müssen alle Steuerelemente unterhalb und/oder auf der rechten Seite des Steuerelements, dessen Größe geändert wurde, eventuell manuell verschoben werden.</p>
  <p>Lässt man sowohl <strong>X</strong> als auch <strong>Y</strong> weg, wird das Steuerelement mit einem bestimmten Abstand unterhalb des zuvor hinzugefügten Steuerelements positioniert.</p>
  <p id="PosPlus"><strong>X</strong> und <strong>Y</strong> kann optional ein Pluszeichen enthalten, um ein Steuerelement relativ zum rechten bzw. unteren Rand des zuvor hinzugefügten Steuerelements zu positionieren. <code>Y+10</code> beispielsweise positioniert das Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, die genau 10 Pixel voneinander entfernt sind. <code>X+10</code> hingegen positioniert das Steuerelement 10 Pixel entfernt auf die rechte Seite des zuvor hinzugefügten Steuerelements. Da negative Zahlen wie <code>X-10</code> für die absolute Positionierung reserviert sind, müssen negative Offsets mit einem Pluszeichen beginnen. Zum Beispiel: <code>X+-10</code>.</p>
  <p id="PosPlusMargin"><strong>X+</strong> und <strong>Y+</strong> können den Buchstaben <strong>M</strong> als Ersatz für den aktuellen <a href="#MarginX">Abstand (Margin)</a> des Fensters nutzen. <strong>x+m</strong> beispielsweise verwendet den rechten Rand des zuvor hinzugefügten Steuerelements und fügt den aktuellen Standardabstand hinzu. <strong>xp y+m</strong> positioniert ein Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, während eine X-Koordinate allein standardmäßig <strong>yp</strong> impliziert.</p>
  <p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (hierbei ist <strong>n</strong> eine beliebige Zahl) können genutzt werden, um Steuerelemente relativ zur linken oberen Ecke des zuvor hinzugefügten Steuerelements zu positionieren. Dies ist zum Beispiel nützlich, um Steuerelemente mit einer <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a> zu umschließen.</p>
  <p id="xm"><strong>xm</strong> und <strong>ym</strong> können genutzt werden, um ein Steuerelement an den ganz linken bzw. obersten <a href="#MarginX">Abstand (Margin)</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl erfolgen). Wenn man <strong>ym</strong> ohne X-Position angibt, wird das Steuerelement an den obersten Abstand, aber auf die rechte Seite aller zuvor hinzugefügten Steuerelementen positioniert, was als Beginn einer neuen "Spalte" gesehen werden kann. Umgekehrt gilt das gleiche (xm ohne Y-Position).</p>
  <p id="xs"><strong>xs</strong> und <strong>ys</strong>: Diese haben einen ähnlichen Effekt wie <strong>xm</strong> und <strong>ym</strong>, allerdings beziehen sie sich auf Koordinaten, die von einem zuvor hinzugefügten Steuerelement stammen, dessen Optionen das Wort <a href="#Section">Section</a> enthält (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, egal ob dessen Optionen dieses Wort enthält). Wenn man <strong>ys</strong> ohne X-Position angibt, wird das Steuerelement auf die zuvor gespeicherte Y-Position, aber auf die rechte Seite aller nach dem Gebrauch des Wortes <a href="#Section">Section</a> hinzugefügten Steuerelementen positioniert, was als Beginn einer neuen "Spalte" gesehen werden kann. Zum Beispiel:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Edit", "w600")  <em>; Fügt ein ziemlich breites Eingabefeld in den obersten Bereich des Fensters ein.</em>
Gui.Add("Text", "<strong>section</strong>", "Vorname:")  <em>; Speichert die Position dieses Steuerelements und beginnt eine neue Sektion.</em>
Gui.Add("Text",, "Nachname:")
Gui.Add("Edit", "<strong>ys</strong>")  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui.Add("Edit")
Gui.Show</pre>
  <p>Umgekehrt gilt das gleiche (<strong>xs</strong> ohne Y-Position).</p>
  <p>Nach <strong>xs</strong> und <strong>ys</strong> kann optional ein Plus-/Minuszeichen und eine Zahl erfolgen. Außerdem ist es möglich, das Wort <a href="#Section">Section</a> und xs/ys in den Optionen eines Steuerelements anzugeben, damit das Steuerelement gleichzeitig auf die alte Sektion zugreifen kann und eine neue Sektion für nachfolgende Steuerelemente etabliert.</p>
  
  <p id="Events"><strong>Benutzereingaben speichern und verarbeiten</strong></p>
  <p id="var"><strong>V</strong>: Setzt den <a href="GuiControl.htm#Name">Namen</a> des Steuerelements. Geben Sie direkt nach dem Buchstaben V den Namen  an; das V selbst ist nicht im Namen enthalten. <code><strong>v</strong>MeinEdit</code> beispielsweise gibt dem Steuerelement den Namen "MeinEdit".</p>
  <p id="label"><strong>Ereignisse</strong>: Ereignis-Handler (z. B. eine Funktion, die automatisch aufgerufen wird, wenn der Benutzer ein Steuerelement anklickt oder ändert) können nicht in den <em>Optionen</em>-Parameter des Steuerelements angegeben werden. Stattdessen kann <a href="GuiOnEvent.htm">OnEvent</a> genutzt werden, um für jedes Ereignis eine Callback-Funktion oder -Methode zu registrieren.</p>
  
  <p id="OtherOptions"><strong>Steuerelemente: Häufig verwendete Styles und Optionen</strong></p>
  <p>Hinweis: Vorzeichenlose Optionen werden standardmäßig hinzugefügt; zum Beispiel bewirkt sowohl <code>Wrap</code> als auch <code>+Wrap</code>, dass der automatische Zeilenumbruch im Text des Steuerelements aktiviert wird. Um diese Eigenschaft hingegen wieder zu entfernen, gibt man <code>-Wrap</code> an.</p>
  <p id="AltSubmit"><strong>AltSubmit</strong>: Verwendet eine alternative Submit-Methode. Bei einer DropDownList, ComboBox oder ListBox bewirkt diese Option, dass <a href="#Submit">Gui.Submit</a> nicht den Text, sondern die Position des ausgewählten Listeneintrags speichert. Wenn kein Listeneintrag ausgewählt ist, wird bei einer ComboBox weiterhin der Text des Eingabefeldes gespeichert.</p>
  <p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="../commands/GuiControls.htm#Button">Button</a>-Steuerelementen). Geben Sie nach dem Buchstaben C den Namen einer Farbe (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder einen RGB-Wert an (mit oder ohne 0x-Präfix). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled</strong>: Stellt das Steuerelement in einem deaktivierten Zustand dar und bewirkt, dass es weder fokussiert noch geändert werden kann. Um später die Interaktion mit diesem Steuerelement wieder zu aktivieren, nutzt man <a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a>. Hinweis: Um ein Edit-Steuerelement stattdessen in den schreibgeschützten Zustand zu versetzen, gibt man <code>ReadOnly</code> in den Optionen an. Direkt nach dem Wort Disabled kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für aktiviert, 1 für deaktiviert). In diesem Fall ist <code>Disabled</code> das gleiche wie <code>"Disabled" VarMitEins</code>.</p>
  <p><strong>Hidden</strong>: Versteckt zunächst das Steuerelement. Mit <a href="GuiControl.htm#Visible">GuiCtrl.<span style="color: #4280ca;">Visible</span></a> kann es später wieder sichtbar gemacht werden. Direkt nach dem Wort Hidden kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für sichtbar, 1 für versteckt). In diesem Fall ist <code>Hidden</code> das gleiche wie <code>"Hidden" VarMitEins</code>.</p>
  <p><strong>Left</strong>: Macht den Text innerhalb der verfügbaren Breite des Steuerelements linksbündig. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right</strong>: Macht den Text innerhalb der verfügbaren Breite des Steuerelements rechtsbündig. Bei einer CheckBox und einem Radio-Button bewirkt diese Option zudem, dass das Auswahlfeld selbst auf die rechte Seite des Steuerelements gesetzt wird. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center</strong>: Zentriert den Text des Steuerelements auf horizontaler Ebene. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section</strong>: Beginnt eine neue Sektion und speichert die Positionsdaten des Steuerelements, um sie später mit den <a href="#xs">oben</a> beschriebenen Positionierungsoptionen <em>xs</em> und <em>ys</em> zu verwenden.</p>
  <p id="Tabstop"><strong>Tabstop</strong>: Geben Sie <code>-Tabstop</code> an, um ein eingabefähiges Steuerelement überspringen zu lassen, wenn der Benutzer die <kbd>Tab</kbd>-Taste zum Navigieren drückt.</p>
  <p id="Wrap"><strong>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Text des Steuerelements. Da bei nahezu allen Steuerelementen standardmäßig der automatische Zeilenumbruch aktiv ist, nutzt man in der Regel <code>-Wrap</code>, um diese Option zu deaktivieren.</p>
  <p><strong>VScroll</strong>: Stattet das Steuerelement mit einer vertikalen Scrollleiste aus, sofern möglich.</p>
  <p><strong>HScroll</strong>: Stattet das Steuerelement mit einer horizontalen Scrollleiste aus, sofern möglich. Der Rest dieses Absatzes gilt nur für die <a href="../commands/GuiControls.htm#ListBox">ListBox</a>. Die horizontale Scrollbreite ist standardmäßig das 3-fache der Breite der Listbox. Um eine andere Scrollbreite zu definieren, gibt man direkt nach dem Wort HScroll eine Zahl an. <code>HScroll500</code> beispielsweise ermöglicht einen scrollbaren Bereich von 500 Pixeln innerhalb der ListBox. Wenn die angegebene Scrollbreite allerdings kleiner als die Breite der ListBox ist, wird keine Scrollleiste angezeigt (obwohl das bloße Vorhandensein von <em>HScroll</em> es überhaupt erst möglich macht, die horizontale Scrollleiste später via <code>MeineScrollleiste.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code> hinzuzufügen).</p>
  
  <p><strong>Steuerelemente: Selten verwendete Styles und Optionen</strong></p>
  <p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Verwendet einen transparenten Hintergrund, der jedes Steuerelement, das sich hinter einem Text-, Picture- oder GroupBox-Steuerelement befindet, durchscheinen lässt. Ein transparentes Text-Steuerelement oberhalb eines Picture-Steuerelements würde beispielsweise die Illusion erzeugen, als gehöre der Text zum Bild. Mit <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> kann diese Option später wieder entfernt werden. Weitere Informationen zu transparenten Bildern finden Sie im <a href="../commands/GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a>. Bekannte Einschränkung: BackgroundTrans funktioniert eventuell nicht ordnungsgemäß bei Steuerelementen innerhalb eines <a href="../commands/GuiControls.htm#Tab">Tab</a>-Steuerelements, das eine <a href="../commands/ListView.htm">ListView</a> enthält. Wenn ein Steuerelement diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p id="Background"><strong>Background</strong><em>Farbe</em>: Ändert die Hintergrundfarbe des Steuerelements. Geben Sie für <em>Farbe</em> einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix) an. Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet ein <a href="../commands/GuiControls.htm#Text">Text</a>-, <a href="../commands/GuiControls.htm#Picture">Picture</a>-, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>-, <a href="../commands/GuiControls.htm#Checkbox">CheckBox</a>-, <a href="../commands/GuiControls.htm#Radio">Radio</a>-, <a href="../commands/GuiControls.htm#Slider">Slider</a>-, <a href="../commands/GuiControls.htm#Tab">Tab</a>- oder <a href="../commands/GuiControls.htm#Link">Link</a>-Steuerelement zu Beginn die via <a href="#BackColor">Gui.BackColor</a> definierte Hintergrundfarbe (wenn keine definiert ist oder handelt es sich um ein anderes Steuerelement, wird die Standardhintergrundfarbe des Systems verwendet). Mit <code>BackgroundDefault</code> oder <code>-Background</code> kann die Standardhintergrundfarbe des Systems erzwungen werden. Mit <code>LV.Opt("+BackgroundDefault")</code> beispielsweise kann die Standardfarbe wiederhergestellt werden. <code>+Background</code> ohne Angabe einer Farbe kehrt <code>-Background</code> um. Wenn ein Steuerelement diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p><strong>Border</strong>: Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente sind bereits eingerahmt und benötigen aufgrund dessen diese Option nicht. Wenn man ein <em>bereits existierendes</em> Steuerelement mit einem Rahmen versieht, muss die Breite und Höhe des Steuerelements eventuell um einen Pixel erweitert werden, um dessen korrekte Darstellung zu gewährleisten.</p>
  <p><strong>Theme</strong>: Mit dieser Option kann das aktuelle Fenster-Design des neu erstellten Steuerelements überschrieben werden. Bei bereits existierenden Steuerelementen hat diese Option keinen Effekt; allerdings kann sich das in einer zukünftigen Version noch ändern. Weitere Informationen finden Sie unter <a href="#Theme">+/-Theme</a>.</p>
  <p><strong>(Namenloser Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Nummer an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen. Lässt man das Vorzeichen weg, wird der Style standardmäßig hinzugefügt.</p>
  <p><strong>(Namenloser erweiterter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Nummer an, um einen erweiterten Style hinzuzufügen oder zu entfernen. Lässt man das Vorzeichen weg, wird der Style standardmäßig hinzugefügt. <code>E0x200</code> beispielsweise fügt den WS_EX_CLIENTEDGE-Style hinzu, der Steuerelemente wie z. B. Picture mit einem abgesenkten Rahmen ausstattet. Alle anderen erweiterten Styles, die nur selten verwendet werden und aufgrund dessen hier nicht aufgelistet sind, finden Sie unter <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie WS_EX_CLIENTEDGE.</p></dd>
  <dt>Text</dt><dd>Je nach Steuerelement eine Zeichenkette, Zahl oder ein Array.</dd>
</dl>
</div>

<div class="methodShort" id="Show">
<h2>Show</h2>
<p>Diese Methode wird das Fenster standardmäßig sichtbar machen, entminimieren (falls notwendig) und <a href="../commands/WinActivate.htm">aktivieren</a>.</p>
<pre class="Syntax">Gui.<span class="func">Show</span>(<span class="optional">Optionen</span>)</pre>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Die unteren Optionen X, Y, W und H können weggelassen werden, um die zuvor gesetzte Größe und Position des Fensters zu verwenden. Wenn es keine zuvor gesetzte Position gibt, wird das Fenster automatisch auf dem Bildschirm zentriert,  je nachdem, ob die unten erwähnten Optionen X und Y fehlen. Wenn es keine zuvor gesetzte Größe gibt, wird die Größe des Fensters automatisch an die Größe und Position aller darin enthaltenen Steuerelemente angepasst.</p>
  <p>Folgende Zeichenketten können in <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
  <p><strong>Wn</strong>: Geben Sie für <strong>n</strong> die Breite (in Pixel) des Clientbereichs an (das ist der Fensterbereich ohne Rahmen, Titelleiste und <a href="#MenuBar">Menüleiste</a>).</p>
  <p><strong>Hn</strong>: Geben Sie für <strong>n</strong> die Höhe des Clientbereichs an (in Pixel).</p>
  <p><strong>Xn</strong>: Geben Sie für <strong>n</strong> die X-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
  <p><strong>Yn</strong>: Geben Sie für <strong>n</strong> die Y-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
  <p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
  <p><strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
  <p id="AutoSize"><strong>AutoSize</strong>: Passt die Größe des Fensters automatisch an die Größe und Position aller darin enthaltenen sichtbaren Steuerelemente an. Diese Option ist besonders hilfreich, wenn neue Steuerelemente hinzugefügt werden, oder wenn bereits vorhandene Steuerelemente größer, kleiner, sichtbar oder unsichtbar gemacht werden. Zum Beispiel:<br>
    <code>Gui.Show("AutoSize Center")</code></p>
  <p><em><strong>Zusätzlich kann eine der folgenden Optionen angegeben werden:</strong></em></p>
  <p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
  <p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
  <p><strong>Restore</strong>: Entminimiert oder entmaximiert das Fenster, falls nötig. Das Fenster wird zudem sichtbar gemacht und aktiviert, falls nötig.</p>
  <p><strong>NoActivate</strong>: Entminimiert oder entmaximiert das Fenster, falls nötig. Das Fenster wird zudem sichtbar gemacht, ohne es zu aktivieren.</p>
  <p><strong>NA</strong>: Macht das Fenster sichtbar, ohne es zu aktivieren. Wenn das Fenster minimiert ist, bleibt es minimiert, aber wird eventuell in der Z-Rangordnung nach oben steigen (die aktuelle Rangordnung kann via Alt-Tab-Fenster überprüft werden). Wenn das Fenster zuvor versteckt war, bewirkt diese Option, dass es über dem aktiven Fenster erscheint, obwohl das aktive Fenster nicht deaktiviert ist.</p>
  <p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Funktionsgemäß ist das identisch mit <a href="#Hide">Gui.Hide</a>. Diese Option hat aber den Vorteil, dass es ein verstecktes Fenster verschieben oder größer/kleiner machen kann, ohne es sichtbar zu machen. Zum Beispiel: <code>Gui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h2>Submit</h2>
<p>Speichert den Inhalt von allen Steuerelementen in ein <a href="../Objects.htm#Usage_Associative_Arrays">assoziatives Array</a> (Objekt) und gibt es zurück.</p>
<pre class="Syntax">InhaltVonBenanntenElementen := Gui.<span class="func">Submit</span>(<span class="optional">Verstecken := True</span>)</pre>
<dl>
  <dt>Verstecken</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
    <p>Wenn dieser Parameter weggelassen wird oder 1 (true) ist, wird das Fenster versteckt. Wenn dieser Parameter 0 (false) ist, wird das Fenster nicht versteckt.</p>
  </dd>
</dl>
<p>Das zurückgegebene Array enthält ein Element pro Steuerelement, meist so etwas wie <code>Array[GuiCtrl.<a href="GuiControl.htm#Name">Name</a>] := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, mit den unten genannten Ausnahmen. Es sind nur Steuerelemente enthalten, die eingabefähig sind, <a href="GuiControl.htm#Value">GuiCtrl.Value</a> unterstützen und einen Namen erhalten haben.</p>
<p>Bei <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a> und <a href="../commands/GuiControls.htm#Tab">Tab</a> wird nicht der Text, sondern die Positionsnummer des ausgewählten Listeneintrags/Tabs gespeichert, wenn dem Steuerelement die <a href="#AltSubmit">AltSubmit</a>-Option <strong>fehlt</strong> oder wenn der Text der ComboBox nicht mit einem Listeneintrag übereinstimmt. Ansonsten wird der <a href="GuiControl.htm#Value">Wert</a> (die Positionsnummer des Elements) gespeichert.</p>
<p id="submit-radio">Wenn jedoch nur einem <a href="../commands/GuiControls.htm#Radio">Radio</a>-Button einer Radio-Gruppe einen Namen zugeordnet wurde, speichert Submit nicht den <a href="GuiControl.htm#Value">Wert</a> des Steuerelements, sondern die Nummer des aktuell eingeschalteten Radio-Buttons. 1 ist der erste Radio-Button (gemäß der originalen Erstellungsreihenfolge), 2 ist der zweite und so weiter. Wenn kein einziger Radio-Button eingeschaltet ist, wird 0 gespeichert.</p>
<p>Folgende Steuerelemente sind ausgeschlossen, weil sie nicht eingabefähig sind: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Pic">Pic</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Auch ausgeschlossen: <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a>.</p>
</div>

<div class="methodShort" id="Hide">
<h2>Hide</h2>
<p>Versteckt das Fenster.</p>
<pre class="Syntax">Gui.<span class="func">Hide</span>()</pre>
</div>

<div class="methodShort" id="Destroy">
<h2>Destroy</h2>
<p>Entfernt das Fenster und alle darin enthaltenen Steuerelemente, um die entsprechenden Speicher- und Systemressourcen freizugeben.</p>
<pre class="Syntax">Gui.<span class="func">Destroy</span>()</pre>
<p>Selbst wenn man <code>Gui.Destroy()</code> nicht verwendet - das Fenster wird automatisch zerstört, sobald das Gui-Objekt gelöscht wird (weitere Details finden Sie unter <a href="#deleted">Allgemeine Bemerkungen</a>). Alle GUI-Fenster werden automatisch zerstört, sobald das Skript beendet wird.</p>
</div>

<div class="methodShort" id="SetFont">
<h2>SetFont</h2>
<p>Bestimmt Schriftart, Schriftgröße, Schriftstil und/oder Schriftfarbe für danach erstellte Steuerelemente.</p>
<p>Hinweis: Es können beide Parameter weggelassen werden, um die systeminterne Standard-GUI-Schriftart, inklusive Größe und Farbe, wiederherzustellen. Ansonsten werden alle nicht angegebenen Schriftattribute von der vorherigen Schrift übernommen.</p>
<pre class="Syntax">Gui.<span class="func">SetFont</span>(<span class="optional">Optionen, Schriftname</span>)</pre>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Null oder mehr Optionen. Jede Option ist entweder ein einzelner Buchstabe, gefolgt von einem Wert, oder ein einzelnes Wort. Mehrere Optionen müssen mit einem Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
  <p>Folgende Wörter werden unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und schaltet italic, strike und underline aus (Farbe und Größe bleiben unberührt). Man kann norm zum Beispiel nutzen, um alle Attribute auszuschalten und danach bestimmte Attribute wieder einzuschalten. <code>norm italic</code> beispielsweise würde die Schrift normalisieren und danach kursiv machen.</p>
  <p><strong>C</strong>: Der Name einer Farbe (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder ein RGB-Wert, oder das Wort Default, um die Standardfarbe des Systems zu setzen (üblicherweise schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="../commands/GuiControls.htm#Button">Button-Steuerelemente</a> können nicht mit einer benutzerdefinierten Farbe versehen werden. Alternativ kann man auch die C-Option nutzen, um die Schriftfarbe für einzelne Steuerelemente bei ihrer Erstellung zu bestimmen. Zum Beispiel: <code>Gui.Add("Text", "cRed", "Mein Text")</code>.</p>
  <p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
  <p><strong>W</strong>: Breite (Dicke). Eine Zahl im Bereich von 1 bis 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
  <p id="fontq"><strong>Q</strong>: Textdarstellungsqualität. Zum Beispiel: <code>q3</code>. Nach Q muss eine Zahl aus der folgenden Tabelle erfolgen:</p>
  <table class="info">
    <tr>
      <td>0 = DEFAULT_QUALITY</td>
      <td>Die Darstellung der Schrift spielt keine Rolle.</td>
    </tr><tr>
      <td>1 = DRAFT_QUALITY</td>
      <td>Die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv und so weiter) ist wichtiger als die Zeichenqualität der Schrift.</td>
    </tr><tr>
      <td>2 = PROOF_QUALITY</td>
      <td>Die Zeichenqualität der Schrift ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv und so weiter).</td>
    </tr><tr>
      <td>3 = NONANTIALIASED_QUALITY</td>
      <td>Die Schrift wird nie antialiasiert; das heißt, dass die eckigen Kanten einer Schrift nicht geglättet werden.</td>
    </tr><tr>
      <td>4 = ANTIALIASED_QUALITY</td>
      <td>Die Schrift wird antialiasiert bzw. geglättet, wenn die Schrift dies unterstützt und nicht zu klein oder zu groß ist.</td>
    </tr><tr>
      <td>5 = CLEARTYPE_QUALITY</td>
      <td>Windows XP und höher: Die Schrift wird (wenn möglich) mit der ClearType-Antialiasing-Methode gerendert.</td>
    </tr>
  </table>
  <p>Weitere Informationen darüber, was diese Werte bedeuten, finden Sie unter <a href="https://msdn.microsoft.com/de-de/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
  <p>Standardmäßig gilt die höchste Qualitätseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantenglättung zu deaktivieren, um den Text bei bestimmten Fällen besser lesbar zu machen.</p></dd>
  <dt>Schriftname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p><em>Schriftname</em> ist der Name einer beliebigen Schrift, z. B. eine aus der <a href="../misc/FontsStandard.htm">Schriftentabelle</a>. Wenn <em>Schriftname</em> weggelassen wird oder im System nicht vorhanden ist, wird die zuvor gesetzte Schriftart verwendet (wenn es keine gibt, wird die Standard-GUI-Schriftart des Systems verwendet). Dieses Verhalten ist nützlich, um ein GUI-Fenster, das für mehrere Systeme gedacht ist, eine ähnliche Schrift verwenden zu lassen, selbst wenn in einigen dieser Systeme die bevorzugte Schrift fehlt. Das folgende Beispiel bewirkt, dass Verdana gegenüber Arial bevorzugt wird, welches wiederum gegenüber MS Sans Serif bevorzugt wird:</p>
  <pre>Gui.SetFont(, "MS sans serif")
Gui.SetFont(, "Arial")
Gui.SetFont(, "Verdana")  <em>; Bevorzugte Schrift.</em></pre></dd>
</dl>
<p>Pro forma ist noch zu erwähnen, dass das Betriebssystem vorgefertigte Dialogfenster anbietet, die der Benutzer zum Auswählen einer Farbe, einer Schrift oder eines Symbols verwenden kann. Solche Dialogfenster können via <a href="../commands/DllCall.htm">DllCall</a> angezeigt werden, wie auf <a href="https://github.com/majkinetor/mm-autohotkey/tree/master/Dlg">GitHub</a> gezeigt.</p>
</div>

<div class="methodShort" id="BackColor">
<h2>BackColor</h2>
<p>Ermittelt oder setzt die Hintergrundfarbe des Fensters.</p>
<pre class="Syntax">ErmittelteFarbe := Gui.BackColor</pre>
<pre class="Syntax">Gui.BackColor := NeueFarbe</pre>
<p><em>ErmittelteFarbe</em> ist ein 6-stelliger RGB-Wert der aktuellen Farbe, die zuvor von dieser Eigenschaft gesetzt wurde, oder eine leere Zeichenkette, wenn die Standardfarbe genutzt wird.</p>
<p><em>NeueFarbe</em> ist entweder eine der 16 <a href="../misc/Colors.htm">HTML-Hauptfarben</a>, ein hexadezimaler RGB-Farbwert (das 0x-Präfix ist optional), ein reiner numerischer RGB-Farbwert, oder das Wort Default (oder eine leere Zeichenkette) für dessen Standardfarbe. Beispielwerte: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>, <code>""</code>.</p>
<p>Ein Fenster benutzt als Hintergrundfarbe standardmäßig die vordefinierte Farbe einer Schaltfläche.</p>
<p>Die Farbe der <a href="#MenuBar">Menüleiste</a> und aller darin enthaltenen Untermenüs können wie folgt geändert werden: <code>MeineMenüleiste.<a href="Menu.htm#SetColor">SetColor</a> "White"</code>.</p>
<p>Mit <a href="../commands/WinSetTransColor.htm">WinSetTransColor</a> kann der Hintergrund transparent gemacht werden. Wenn Sie dies jedoch tun, ohne zuvor eine benutzerdefinierte Fensterfarbe via <a href="#BackColor">Gui.BackColor</a> zugewiesen zu haben, werden Button-Steuerelemente ebenfalls transparent. Um das zu verhindern, weist man zunächst eine benutzerdefinierte Farbe zu und macht diese dann transparent. Zum Beispiel:</p>
<pre>Gui.BackColor := "EEAA99"
WinSetTransColor("EEAA99")</pre>
<p>Die folgende Zeile kann hinzugefügt werden, um zusätzlich den Rahmen und die Titelleiste eines Fensters zu entfernen: <code>Gui.Opt("-Caption")</code></p>
<p>Weiter unten finden Sie das Beispiel einer Bildschirmanzeige (OSD), die zeigt, wie diese Methode praktisch eingesetzt werden kann.</p>
</div>

<div class="methodShort" id="MarginX">
<h2>MarginX</h2>
<p>Ermittelt oder setzt die Größe von horizontalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">ErmittelterWert := Gui.MarginX</pre>
<pre class="Syntax">Gui.MarginX := NeuerWert</pre>
<p><em>ErmittelterWert</em> ist die Anzahl der Pixel, die aktuell für den horizontalen Abstand gesetzt ist.</p>
<p><em>NeuerWert</em> ist die Anzahl der Pixel, die auf der linken und rechten Seite des Fensters freigelassen werden sollen, wenn Steuerelemente aufgrund fehlender <a href="#XY">X-Koordinate</a> automatisch positioniert werden. Dieser Abstand wird auch genutzt, um den horizontalen Abstand zwischen automatisch positionierten Steuerelementen zu bestimmen. Außerdem wird dieser Abstand zur Berechnung der Fenstergröße herangezogen, wenn <a href="#Show">Gui.Show</a> das erste Mal verwendet wird (wenn keine explizite Größe angegeben ist).</p>
<p>Standardmäßig ist dieser Abstand proportional zur Größe der aktuell ausgewählten <a href="#SetFont">Schrift</a> (1.25 mal Schriftbreite für Links &amp; Rechts).</p>
</div>

<div class="methodShort" id="MarginY">
<h2>MarginY</h2>
<p>Ermittelt oder setzt die Größe von vertikalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">ErmittelterWert := Gui.MarginY</pre>
<pre class="Syntax">Gui.MarginY := NeuerWert</pre>
<p><em>ErmittelterWert</em> ist die Anzahl der Pixel, die aktuell für den vertikalen Abstand gesetzt ist.</p>
<p><em>NeuerWert</em> ist die Anzahl der Pixel, die auf der oberen und unteren Seite des Fensters freigelassen werden sollen, wenn Steuerelemente aufgrund fehlender <a href="#XY">Y-Koordinate</a> automatisch positioniert werden. Dieser Abstand wird auch genutzt, um den vertikalen Abstand zwischen automatisch positionierten Steuerelementen zu bestimmen. Außerdem wird dieser Abstand zur Berechnung der Fenstergröße herangezogen, wenn <a href="#Show">Gui.Show</a> das erste Mal verwendet wird (wenn keine explizite Größe angegeben ist).</p>
<p>Standardmäßig ist dieser Abstand proportional zur Größe der aktuell ausgewählten <a href="#SetFont">Schrift</a> (0.75 mal Schrifthöhe für Unten &amp; Oben).</p>
</div>

<div class="methodShort" id="Opt">
<h2>Opt</h2>
<p>Setzt eine oder mehrere Optionen für das GUI-Fenster.</p>
<pre class="Syntax">Gui.<span class="func">Opt</span>(Optionen)</pre>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
  <p>Aus Performance-Gründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (das heißt, bevor andere Methoden wie <a href="#Add">Gui.Add</a> verwendet werden).</p>
  <p>Der Effekt dieser Methode ist kumulativ (summierend); das heißt, dass diese Methode nur die explizit angegebenen Optionen ändert, alle anderen bleiben unverändert.</p>
  <p>Geben Sie ein Pluszeichen an, um die Option hinzuzufügen, oder ein Minuszeichen, um sie zu entfernen. Zum Beispiel: <code>Gui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p><strong>AlwaysOnTop</strong>: Gibt dem Fenster die Eigenschaft, immer im Vordergrund bzw. immer vor allen anderen Fenstern sichtbar zu sein, was den gleichen Effekt hat wie <a href="../commands/WinSetAlwaysOnTop.htm">WinSetAlwaysOnTop</a>.</p>
  <p><strong>Border</strong>: Stattet das Fenster mit einem dünnen Rahmen aus. Diese Option benutzt man eher selten.</p>
  <p><strong>Caption</strong> (standardmäßig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Beachten Sie, dass die Titelleiste eines Fensters erst entfernt werden sollte, nachdem man bestimmte Farben des Fensters via <a href="../commands/WinSetTransColor.htm">WinSetTransColor</a> transparent gemacht hat.</p>
  <p id="Delimiter"><strong>Delimiter</strong>: Bewirkt, dass das Fenster nicht den Vertikalstrich (|), sondern ein beliebig anderes Zeichen als Trennzeichen verwendet, wenn die Inhalte der Steuerelemente via <a href="#Add">Gui.Add</a> hinzugefügt oder via <a href="GuiControl.htm">GuiControl-Objekt</a> abgerufen werden. Geben Sie das gewünschte Trennzeichen direkt nach dem Wort Delimiter an. Zum Beispiel kann man mit <code>Gui.Opt("+Delimiter`n")</code> ein Zeilenumbruchszeichen als Trennzeichen definieren, das besonders gut für <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> geeignet ist. Mit <code>Gui.Opt("+Delimiter|")</code> kann man wiederum das Standardtrennzeichen wiederherstellen. Wenn ein Leer- oder Tabulatorzeichen notwendig ist, kann man <code>Gui.Opt("+DelimiterSpace")</code> oder <code>Gui.Opt("+DelimiterTab")</code> angeben. Das Ändern des Trennzeichens wirkt sich auf alle vorhandenen und nachfolgenden <a href="../misc/Threads.htm">Threads</a> aus, die sich auf dieses bestimmte Fenster beziehen.</p>
  <p><strong>Disabled</strong>: Deaktiviert das Fenster, um den Benutzer daran zu hindern, mit den darin enthaltenen Steuerelementen zu interagieren. Diese Option wird oft bei Fenstern benutzt, die untergeordnete Fenster haben (siehe <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale</strong>: Verwenden Sie <code>Gui.Opt("-DPIScale")</code>, um die üblicherweise aktive DPI-Skalierung zu deaktivieren. Wenn die DPI-Skalierung auf einem System mit benutzerdefinierter DPI-Einstellung aktiviert ist, passen Gui-Objekte und <a href="GuiControl.htm">GuiControl-Objekte</a> automatisch ihre Koordinaten und Größen an, um Steuerelemente in etwa gleich groß aussehen zu lassen (aber in höherer Auflösung). Bei einem DPI-Wert von beispielsweise 144 (150%) würde <code>E := Gui.Add("Edit", "w100")</code> das Gui-Steuerelement 150 Pixel breit machen (<a href="GuiControl.htm#Pos">E.Pos.W</a> enthält aber weiterhin 100). <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> enthält die aktuelle DPI des Systems.</p>
  <p>Die DPI-Skalierung betrifft nur Gui-Objekte und <a href="GuiControl.htm">GuiControl-Objekte</a>; das heißt, dass Koordinaten aus anderen Quellen wie ControlGetPos oder WinGetPos nicht funktionieren werden. Es gibt eine Reihe von Möglichkeiten, damit umzugehen:</p>
  <ul>
    <li>Vermeiden Sie hartcodierte Koordinaten, wenn möglich. Zum Beispiel können Sie zum Positionieren von Steuerelementen die Optionen <a href="#xp">xp</a>, <a href="#xs">xs</a>, <a href="#xm">xm</a> und <a href="#PosPlusMargin">x+m</a> nutzen und als Höhe <a href="#R">Textreihen</a> statt Pixel angeben.</li>
    <li>Sie können die Skalierung jederzeit aktivieren (<code>Gui.Opt("+DPIScale")</code>) und deaktivieren (<code>Gui.Opt("-DPIScale")</code>). Die Änderung der Einstellung hat keinen Einfluss auf bereits gesetzte Positionen oder Größen.</li>
    <li>Passen Sie die Koordinaten manuell an. <code>x*(A_ScreenDPI/96)</code> beispielsweise wandelt logische Koordinaten bzw. GUI-Koordinaten (in diesem Fall x) in physische Koordinaten bzw. Nicht-GUI-Koordinaten um.</li>
  </ul>
  <p id="LastFound"><strong>LastFound</strong>: Definiert das Fenster als das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> (obwohl das in einem <a href="GuiOnEvent.htm#Threads">GUI-Thread</a> nicht notwendig ist, weil dies automatisch geschieht), damit Funktionen wie <a href="../commands/WinGetStyle.htm">WinGetStyle</a> und <a href="../commands/WinSetTransparent.htm">WinSetTransparent</a> mit diesem Fenster interagieren können, sogar wenn es versteckt ist (das heißt, dass <a href="../commands/DetectHiddenWindows.htm">DetectHiddenWindows</a> nicht notwendig ist). Diese Option ist besonders nützlich, um die Eigenschaften des Fensters zu ändern, bevor es angezeigt wird. Zum Beispiel:</p>
  <pre>Gui.Opt("+LastFound")
WinSetTransColor(BeliebigeFarbe " 150")
Gui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox</strong>: Aktiviert die Titelleistenschaltfläche zum Maximieren des Fensters. Diese Option ist auch Bestandteil von <em>Resize</em> (siehe unten).</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert die Titelleistenschaltfläche zum Minimieren des Fensters.</p>
  <p id="MinSize"><strong>MinSize</strong> und <strong>MaxSize</strong>: Legt die minimale und/oder maximale Größe des Fensters fest, z. B. wenn der Benutzer die Kanten des Fensters zieht, um es kleiner oder größer zu machen. Geben Sie das Wort <em>MinSize</em> und/oder <em>MaxSize</em> ohne Suffix an, um die aktuelle Größe des Fensters als Grenzwert zu nutzen (wenn das Fenster keine aktuelle Größe hat, wird die gesetzte Größe des ersten <a href="#Show">Gui.Show</a> verwendet). Alternativ können Sie auch die Breite, ein X und dann die Höhe anfügen; zum Beispiel: <code>Gui.Opt("+Resize +MinSize640x480")</code>. Diese Dimensionen (in Pixel) spezifizieren die Größe des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#MenuBar">Menüleiste</a>). Jede Zahl muss im dezimalen Format sein.</p>
  <p>Die Breite oder Höhe kann weggelassen werden, um sie unverändert zu lassen (z. B. <code>+MinSize640x</code> oder <code>+MinSizex480</code>). Darüber hinaus kann Min/MaxSize mehrfach angegeben werden, um eine Dimension mit der aktuellen Größe des Fensters und die andere mit einer expliziten Größe zu versehen. <code>+MinSize +MinSize640x</code> beispielsweise verwendet die aktuelle Größe des Fensters für die Höhe und 640 Pixel für die Breite.</p>
  <p>Wenn <em>MinSize</em> und <em>MaxSize</em> nie genutzt werden, gelten die Standardwerte des Betriebssystems (ähnlich wie <code>Gui.Opt("-MinSize -MaxSize")</code>, was auch die Standardwerte wiederherstellt). Hinweis: Das Fenster muss <a href="#Resize">+Resize</a> haben, damit der Benutzer es kleiner oder größer machen kann.</p>
  <p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>Gui.Opt("+OwnDialogs")</code> bewirkt, dass alle nachfolgenden <a href="../commands/MsgBox.htm">MsgBox</a>-, <a href="../commands/InputBox.htm">InputBox</a>-, <a href="../commands/FileSelect.htm">FileSelect</a>- oder <a href="../commands/DirSelect.htm">DirSelect</a>-Dialogfenster im aktuellen <a href="../misc/Threads.htm">Thread</a> (z. B. eine ereignisbehandelnde Funktion eines Button-Steuerelements) dem aktuellen Fenster untergeordnet werden. Solche Dialogfenster werden dabei modal; das heißt, dass der Benutzer das Dialogfenster schließen muss, bevor er weiter mit dem GUI-Fenster interagieren kann. Ein <a href="../commands/ToolTip.htm">ToolTip</a> kann hingegen nicht modal gemacht werden, selbst wenn es einem Fenster untergeordnet wird; dieses befinden sich immer über dem Hauptfenster. Untergeordnete Dialogfenster werden automatisch zerstört, sobald das Hauptfenster <a href="#Destroy">zerstört</a> wird.</p>
  <p>Normalerweise ist es nicht notwendig, diese Einstellung wieder zu deaktivieren, weil sie keine Auswirkung auf andere <a href="../misc/Threads.htm">Threads</a> hat. Verwenden Sie je nach Bedarf <code>Gui.Opt("-OwnDialogs")</code>, um ein Thread sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen zu lassen.</p>
  <p id="Owner"><strong>Owner</strong>: Mit <em>+Owner</em> kann das Fenster einem anderen Fenster untergeordnet werden. Ein untergeordnetes Fenster hat standardmäßig keine eigene Taskleistenschaltfläche und befindet sich, sofern sichtbar, immer über dem Hauptfenster. Es wird automatisch zerstört, sobald das Hauptfenster zerstört wird. <em>Owner</em> kann vor oder nach Erstellen des Hauptfensters verwendet werden. Es gibt zwei Möglichkeiten, wie man <em>+Owner</em> nutzen kann:</p>
  <pre>Gui.Opt("+OwnerAndereGui")  <em>; Definiert die GUI als Unterfenster von <i>AndereGui</i>.</em>
Gui.Opt("+Owner")  <em>; Definiert die GUI als Unterfenster vom <a href="../Variables.htm#ScriptHwnd">Hauptfenster des Skripts</a>, um deren Taskleistenschaltfläche zu verstecken.</em></pre>
  <p>Verwenden Sie <code>+Owner</code> und direkt danach den <a href="GuiControl.htm#Name">Namen</a> oder die Nummer einer bereits vorhandenen GUI oder die <a href="#Hwnd">HWND-Nummer (eindeutige ID)</a> eines beliebigen nicht-untergeordneten Fensters.</p>
  <p>Um dem Benutzer die Interaktion mit dem Hauptfenster zu verbieten, während ein untergeordnetes Fenster angezeigt wird, nutzt man <code>Gui.Opt("+Disabled")</code>. Später kann man die Interaktion mit dem Hauptfenster, nachdem das untergeordnete Fenster geschlossen oder entfernt wurde, wieder mit <code>Gui.Opt("-Disabled")</code> erlauben. Dies sollte aber erfolgen, bevor das untergeordnete Fenster geschlossen bzw. zerstört wird, damit das übergeordnete Fenster automatisch reaktiviert werden kann.</p>
  <p id="Parent"><strong>Parent</strong>: Verwenden Sie <code>+Parent</code> und direkt danach den <a href="GuiControl.htm#Name">Namen</a> oder die Nummer einer bereits vorhandenen GUI oder die <a href="#Hwnd">HWND-Nummer (eindeutige ID)</a> eines beliebigen Fensters oder Steuerelements, um der GUI eines dieser Genannten überzuordnen. Mit <code>-Parent</code> kann die GUI wieder in ein nicht-untergeordnetes Fenster umgewandelt werden. Diese Option funktioniert auch, nachdem das Fenster erstellt wurde.</p>
  <p id="Resize"><strong>Resize</strong>: Aktiviert die Größenänderung des Fensters und die Titelleistenschaltfläche zum Maximieren des Fensters. Mit <code>+Resize -MaximizeBox</code> kann die Aktivierung der Schaltfläche zum Maximieren des Fensters verhindert werden.</p>
  <p><strong>SysMenu</strong> (standardmäßig vorhanden): Geben Sie <code>-SysMenu</code> (minus SysMenu) an, um das Systemmenü und Symbol in der oberen linken Ecke des Fensters zu entfernen. Die Titelleistenschaltflächen zum Minimieren, Maximieren und Schließen des Fensters werden auch entfernt.</p>
  <p id="Theme"><strong>Theme</strong>: Geben Sie <code>-Theme</code> an, um alle nachfolgende Steuerelemente im klassischen Design darzustellen (nur ab Windows XP). Mit <code>+Theme</code> kann das neue Design wieder für nachfolgende Steuerelemente eingeschaltet werden. Hinweis: Diese Option funktioniert nicht, wenn das Betriebssystem älter als Windows XP ist oder wenn Windows XP selbst das klassische Design aktiv hat. Um diese Option nur für ein bestimmtes Steuerelement zu ändern, fügt man <code>+Theme</code> oder <code>-Theme</code> in den Optionen-Parameter ein, während es erstellt wird.</p>
  <p><strong>ToolWindow</strong>: Stattet das Fenster mit einer kleineren Titelleiste aus und versteckt dessen Taskleistenschaltfläche. Dies versteckt immer die Schaltflächen zum Maximieren und Minimieren des Fensters, egal ob die Styles <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> und <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> vorhanden sind.</p>
  <p><strong>(Namenloser Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Nummer an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen.</p>
  <p><strong>(Namenloser erweiterter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Nummer an, um einen erweiterten Style hinzuzufügen oder zu entfernen. <code>+E0x40000</code> beispielsweise würde den WS_EX_APPWINDOW-Style hinzufügen, um eine Taskleistenschaltfläche für ein Fenster bereitzustellen, das aktuell keine hat. Alle anderen erweiterten Styles, die nur selten verwendet werden und aufgrund dessen hier nicht aufgelistet sind, finden Sie unter <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie WS_EX_APPWINDOW.</p></dd>
</dl>
</div>

<div class="methodShort" id="FocusedCtrl">
<h2>FocusedCtrl</h2>
<p>Ermittelt das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten Steuerelements in der GUI.</p>
<pre class="Syntax">GuiCtrlObj := Gui.FocusedCtrl</pre>
<p>Hinweis: Um die gewünschte Wirkung zu erzielen, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="MenuBar">
<h2>MenuBar</h2>
<p>Ermittelt oder setzt die Menüleiste des Fensters.</p>
<pre class="Syntax">Gui.MenuBar := Menüleiste</pre>
<pre class="Syntax">Menüleiste := Gui.MenuBar</pre>
<p><em>Menüleiste</em> ist ein <a href="Menu.htm">MenuBar-Objekt</a>, das mit der <a href="../commands/MenuBarCreate.htm">MenuCreate</a>-Funktion erstellt wurde. Zum Beispiel:</p>
<pre>Dateimenü := MenuCreate()
Dateimenü.Add "Ö&amp;ffnen`tCtrl+F", (*) =&gt; FileSelect()  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Dateimenü.Add "&amp;Beenden", (*) =&gt; ExitApp()
Hilfsmenü := MenuCreate()
Hilfsmenü.Add "Inf&amp;o", (*) =&gt; MsgBox("Nicht implementiert")
Menüs := MenuBarCreate()
Menüs.Add "&amp;Datei", Dateimenü  <em>; Fügt die zwei oben erstellten Untermenüs hinzu.</em>
Menüs.Add "&amp;?", Hilfsmenü
Gui := GuiCreate()
Gui.MenuBar := Menüs
Gui.Show "w300 h200"</pre>
<p>In der ersten Zeile oben ist zu erkennen, dass nach <code>Ö&amp;ffnen</code> das Tastenkürzel <code>Ctrl+F</code> erfolgt (mit einem Tabulatorzeichen dazwischen). Wenn der Benutzer dieses Tastenkürzel drückt, wird die Aktion des Menüpunkts ausgeführt, ohne dass er erst dorthin navigieren muss. Tastenkürzel mit den Standardmodifikatoren Ctrl, Alt und Shift werden automatisch als <em>Keyboard Accelerator</em> für die GUI registriert. Keyboard Accelerators ohne Modifikatoren sind Groß-/Kleinschreibung-sensitiv und können nur durch ungewöhnliche Mitteln wie IME oder <kbd>Alt</kbd>+NNNN ausgelöst werden.</p>
<p>Wenn eine bestimmte Tastenkombination nicht automatisch funktioniert, muss eventuell ein <a href="../commands/_If.htm">kontextabhängiger Hotkey</a> verwendet werden. Beachten Sie aber, dass solche Hotkeys üblicherweise nicht durch <a href="../commands/Send.htm">Send</a> ausgelöst werden können und dass sie, im Gegensatz zu einem typischen Keyboard Accelerator, andere Skripte stören können.</p>
<p>Verwenden Sie <code>Gui.MenuBar := ""</code> (bzw. weisen Sie eine leere Zeichenkette zu), um die aktuelle Menüleiste des Fensters zu entfernen.</p>
</div>

<div class="methodShort" id="Minimize">
<h2>Minimize</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und minimiert es.</p>
<pre class="Syntax">Gui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h2>Maximize</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und maximiert es.</p>
<pre class="Syntax">Gui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Restore">
<h2>Restore</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und stellt dessen ursprünglichen Zustand wieder her, falls es zuvor minimiert oder maximiert war.</p>
<pre class="Syntax">Gui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="Pos">
<h2>Pos</h2>
<p>Ermittelt die Position und Größe des GUI-Fensters.</p>
<pre class="Syntax">PosGrößeObj := Gui.Pos</pre>
<p><em>PosGrößeObj</em> ist ein <a href="../Objects.htm">Objekt</a> mit den Keys <strong>X</strong> (X-Koordinate), <strong>Y</strong> (Y-Koordinate), <strong>W</strong> (Breite) und <strong>H</strong> (Höhe). Die Koordinaten sind die obere linke Ecke des Fensters. Breite ist der horizontale Abstand zwischen dem linken und rechten Rand des Fensters, und Höhe der vertikale Abstand zwischen dem oberen und unteren Rand des Fensters (in Pixel).</p>
</div>

<div class="methodShort" id="ClientPos">
<h2>ClientPos</h2>
<p>Ermittelt die Position und Größe des Clientbereichs eines GUI-Fensters.</p>
<pre class="Syntax">PosGrößeObj := Gui.ClientPos</pre>
<p><em>PosGrößeObj</em> ist ein <a href="../Objects.htm">Objekt</a> mit den Keys <strong>X</strong> (X-Koordinate), <strong>Y</strong> (Y-Koordinate), <strong>W</strong> (Breite) und <strong>H</strong> (Höhe). Die Koordinaten sind die obere linke Ecke des Clientbereich des Fensters (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen). Breite ist der horizontale Abstand zwischen dem linken und rechten Rand des Clientbereichs, und Höhe der vertikale Abstand zwischen dem oberen und unteren Rand (in Pixel).</p>
</div>

<div class="methodShort" id="Flash">
<h2>Flash</h2>
<p>Lässt die Taskleistenschaltfläche des Fensters einmal aufblinken.</p>
<pre class="Syntax">Gui.<span class="func">Flash</span>(<span class="optional">Blinken := True</span>)</pre>
<dl>
  <dt>Blinken</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
    <p>Wenn dieser Parameter weggelassen wird oder 1 (true) ist, wird die Taskleistenschaltfläche des Fensters aufblinken. Dazu wird die Farbe der Titelleiste und/oder der Taskleistenschaltfläche (falls vorhanden) invertiert. Geben Sie 0 (false) an, um die Originalfarben der Titelleiste und Taskleistenschaltfläche wiederherzustellen (die tatsächliche Auswirkung variiert aber je nach Betriebssystemversion).</p>
  </dd>
</dl>
<p>Das folgende Beispiel lässt das Fenster dreimal aufblinken, weil jedes Paar von "Gui Flash" die Farben des Fensters invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui.Flash
    Sleep 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>
</div>

<div class="methodShort" id="Hwnd">
<h2>Hwnd</h2>
<p>Ermittelt die HWND-Nummer (eindeutige ID) des GUI-Fensters.</p>
<pre class="Syntax">AktuellerHwnd := Gui.Hwnd</pre>
<p>Die HWND-Nummer einer GUI wird oft in Verbindung mit <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/SendMessage.htm">SendMessage</a> und <a href="../commands/DllCall.htm">DllCall</a> genutzt. Außerdem kann diese Nummer direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> verwendet werden.</p></div>

<div class="methodShort" id="Title">
<h2>Title</h2>
<p>Ermittelt oder setzt den Titel des GUI-Fensters.</p>
<pre class="Syntax">ErmittelterTitel := Gui.Title</pre>
<pre class="Syntax">Gui.Title := NeuerTitel</pre>
</div>

<div class="methodShort" id="Name">
<h2>Name</h2>
<p>Ermittelt oder setzt einen benutzerdefinierten Namen für das GUI-Fenster.</p>
<pre class="Syntax">ErmittelterName := Gui.Name</pre>
<pre class="Syntax">Gui.Name := NeuerName</pre>
</div>

<div class="methodShort" id="__Item">
<h2>__Item</h2>
<p>Ermittelt ein <a href="GuiControl.htm">GuiControl-Objekt</a>, das zu einem Namen, einem Text, einer ClassNN-Bezeichnung oder einer HWND-Nummer (eindeutige ID) gehört.</p>
<pre class="Syntax">GuiCtrlObj := Gui[Name]</pre>
</div>

<div class="methodShort" id="__Enum">
<h2>__Enum</h2>
<p>Enumeriert die Steuerelemente der GUI.</p>
<pre class="Syntax">For Hwnd <span class="optional">, Ctrl</span> in Gui</pre>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zurück. Diese Methode wird für gewöhnlich nicht direkt aufgerufen. Stattdessen wird das Gui-Objekt direkt an eine <a href="../commands/For.htm">For-Schleife</a> übergeben, die __Enum einmal aufruft und dann den Enumerator einmal für jede Wiederholung der Schleife aufruft. Jeder Aufruf des Enumerators gibt das nächste Steuerelement zurück. Die Variablen der For-Schleife entsprechen den folgenden Parametern des Enumerators:</p>
<dl>
  <dt>Hwnd</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die HWND-Nummer des Steuerelements.</p>
  </dd>
  <dt>Ctrl</dt>
  <dd>
    <p>Das <a href="GuiControl.htm">GuiControl</a>-Objekt.</p>
  </dd>
</dl>
<p>Zum Beispiel:</p>
<pre>For Hwnd, GuiCtrlObj in GuiObj
    MsgBox "Steuerelement #" A_Index " ist " GuiCtrlObj.ClassNN</pre>
</div>

<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Mit der <kbd>Tab</kbd>-Taste ist es möglich, den Tastaturfokus jeweils auf das nächste eingabefähige Steuerelement in einem GUI-Fenster zu setzen (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). In welcher Reihenfolge die Steuerelemente navigiert werden, ist abhängig davon, zu welchem Zeitpunkt sie hinzugefügt wurden. Wenn das Fenster zum ersten Mal angezeigt wird, bekommt das erste eingabefähige Steuerelement mit aktiviertem Tabstop-Style (was auf die meisten zutrifft) den Tastaturfokus.</p>
<p id="ShortcutKey">Bestimmte Steuerelemente können ein Und-Zeichen (&amp;) enthalten, um ein Tastenkürzel zu erstellen, das im Text des Steuerelements je nach Systemeinstellungen als unterstrichenes Zeichen dargestellt wird. Um so ein Tastenkürzel auszulösen, muss der Benutzer die <kbd>Alt</kbd>-Taste gedrückt halten und dann das entsprechende Zeichen auf der Tastatur drücken. Drückt man das Tastenkürzel von einem Button, einer CheckBox oder einem Radio-Button, ist der Effekt das gleiche wie, als würde man das Steuerelement anklicken. Drückt man das Tastenkürzel von einer GroupBox oder einem Text-Steuerelement, wird der Tastaturfokus auf das erste eingabefähige <a href="#Tabstop">Tabstop</a>-Steuerelement gesetzt, welches danach erstellt wurde. Wenn mehrere Steuerelemente das gleiche Tastenkürzel verwenden und drückt man dieses, springt der Tastaturfokus zwischen solchen Steuerelementen abwechselnd hin und her.</p>
<p>Geben Sie zwei aufeinanderfolgende Und-Zeichen an, um ein direkt geschriebenes Und-Zeichen in einem der oben genannten Steuerelementen anzuzeigen. Zum Beispiel: <code>Gui.Add("Button",, "Speichern &amp;&amp; Beenden")</code>.</p>

<h2 id="Appear">Fensterdarstellung</h2>
<p>Ein GUI-Fenster verwendet als Symbol das Tray-Symbol, welches zum Zeitpunkt der Erstellung des Fensters wirksam war. Daher muss, sofern ein anderes Symbol angezeigt werden soll, das Tray-Symbol vor der Erstellung des Fensters geändert werden. Zum Beispiel: <code><a href="../commands/TraySetIcon.htm">TraySetIcon</a>("MeinSymbol.ico")</code>. Es ist auch möglich, ein Fenster mit einem anderen großen Symbol zu versehen (das große Symbol wird im Alt-Tab-Fenster angezeigt). Dazu verwendet man LoadPicture und SendMessage; zum Beispiel:</p>
<pre>Symbolgröße := 32  <em>; Die ideale Größe für Alt-Tab variiert je nach System und Windows-Version.</em>
hIcon := <a href="../commands/LoadPicture.htm">LoadPicture</a>("Mein Symbol.ico", "Icon1 w" Symbolgröße " h" Symbolgröße, Bildtyp)
Gui := GuiCreate("+LastFound")
<a href="../commands/SendMessage.htm">SendMessage</a>(0x80, 1, hIcon)  <em>; 0x80 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 wäre ICON_SMALL).</em>
Gui.Show()</pre>
<p>Aufgrund von Einschränkungen in Windows XP und höher werden CheckBox-, Radio- und GroupBox-Steuerelemente mit benutzerdefinierter Textfarbe im klassischen Design dargestellt.</p>
<p>Verwandtes Thema: <a href="#MarginX">Margin</a> (Abstände innerhalb eines Fensters).</p>

<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p>Das <a href="GuiControl.htm">GuiControl-Objekt</a> kann genutzt werden, um mit einzelnen Steuerelementen in einem GUI-Fenster zu agieren.</p>
<p>Jedes GUI-Fenster kann bis zu 11000 Steuerelemente enthalten. Aber Vorsicht: Bei mehr als 5000 Steuerelementen kann es vorkommen, dass bestimmte Steuerelemente instabil werden.</p>
<p id="deleted">Das GUI-Fenster wird automatisch <a href="#Destroy">zerstört</a>, sobald das Gui-Objekt gelöscht wird, oder anders gesagt, wenn dessen <a href="../Objects.htm#Reference_Counting">Referenzanzahl</a> auf 0 ist. Dies geschieht jedoch in der Regel nicht, wenn das Fenster sichtbar ist, da <a href="#Show">Show</a> die Referenzanzahl automatisch um 1 erhöht. Während das Fenster sichtbar ist, kann der Benutzer mit dem Fenster interagieren und Ereignisse auslösen, die vom Skript behandelt werden. Wenn das Fenster vom Benutzer geschlossen oder mit <a href="#Hide">Hide</a>, <a href="#Show">Show</a> oder <a href="#Submit">Submit</a> versteckt wird, wird diese zusätzliche Referenz freigegeben.</p>
<p>Um ein GUI-Fenster "künstlich am Leben" zu erhalten, ohne <a href="#Show">Show</a> aufzurufen oder eine Referenz zu dessen Gui-Objekt aufrecht zu erhalten, kann das Skript die Referenzanzahl des Objekts mithilfe von <a href="../commands/ObjAddRef.htm">ObjAddRef</a> um 1 erhöhen (in diesem Fall muss <a href="../commands/ObjAddRef.htm">ObjRelease</a> aufgerufen werden, wenn das Fenster nicht mehr benötigt wird). Dies kann z. B. der Fall sein, wenn ein verstecktes GUI-Fenster zum <a href="../commands/OnMessage.htm">Überwachen von Meldungen</a> genutzt wird, oder wenn das Fenster mithilfe von "externen" Mitteln wie <a href="../commands/WinShow.htm">WinShow</a> angezeigt wird (über dieses oder ein anderes Skript).</p>
<p>Wenn das Skript aus irgendeinem Grund nicht <a href="../Scripts.htm#persistent">persistent</a> ist, wird es beendet, nachdem das letzte sichtbare GUI-Fenster geschlossen wurde; entweder erst, wenn der letzte Threads endet, oder sofort, wenn keine Threads laufen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../commands/GuiCreate.htm">GuiCreate</a>, <a href="GuiControl.htm">GuiControl-Objekt</a>, <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="../commands/GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="../commands/GuiControls.htm">Steuerelemente</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="Menu.htm">Menu-Objekt</a>, <a href="../commands/Control.htm">Control-Funktionen</a>, <a href="../commands/MsgBox.htm">MsgBox</a>, <a href="../commands/FileSelect.htm">FileSelect</a>, <a href="../commands/DirSelect.htm">DirSelect</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExPopup">
<p><a href="#ExPopup">#1</a>: Zeigt ein Begrüßungsfenster an:</p>
<pre>Gui := GuiCreate(, "Fenstertitel")
Gui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner verhindert eine Taskleistenschaltfläche.</em>
Gui.Add("Text",, "Beliebiger Text.")
Gui.Show("NoActivate")  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a href="#ExInputBox">#2</a>: Ein einfaches Eingabefenster zum Abfragen des Vor- und Nachnamens:</p>
<pre>Gui := GuiCreate(, "Einfaches Eingabebeispiel")
Gui.Add("Text",, "Vorname:")
Gui.Add("Text",, "Nachname:")
Gui.Add("Edit", "vVorname ym")  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
Gui.Add("Edit", "vNachname")
Gui.Add("Button", "default", "OK").OnEvent("Click", (*) =&gt; VerarbeiteBenutzereingabe(Gui))
Gui.OnEvent("Close", "VerarbeiteBenutzereingabe")
Gui.Show()

VerarbeiteBenutzereingabe(this, *)
{
    Gespeichert := this.Submit()  <em>; Speichert die Inhalte von benannten Steuerelementen in ein Objekt.</em>
    MsgBox("Sie haben '" Gespeichert.Vorname " " Gespeichert.Nachname "' eingegeben.")
}</pre>
</div>

<div class="ex" id="ExTab">
<p><a href="#ExTab">#3</a>: Erstellt ein Tab-Steuerelement mit mehreren Tabs, die jeweils verschiedene Steuerelemente enthalten, mit denen Sie interagieren können:</p>
<pre>Gui := GuiCreate()
Tab := Gui.Add("Tab3",, "Erster Tab|Zweiter Tab|Dritter Tab")
Gui.Add("Checkbox", "vMeineCheckBox", "Kontrollkästchen") 
Tab.UseTab(2)
Gui.Add("Radio", "vMeinRadio", "Optionsfeld 1")
Gui.Add("Radio",, "Optionsfeld 2")
Tab.UseTab(3)
Gui.Add("Edit", "vMeinEdit r5")  <em>; r5 bedeutet 5 Reihen hoch.</em>
Tab.UseTab()  <em>; nachfolgende Steuerelemente werden nicht als Teil des Tab-Steuerelements angesehen.</em>
Btn := Gui.Add("Button", "default xm", "OK")  <em>; xm positioniert die Schaltfläche in die untere linke Ecke.</em>
Btn.OnEvent("Click", (*) =&gt; VerarbeiteBenutzereingabe(Gui))
Gui.OnEvent("Close", "VerarbeiteBenutzereingabe")
Gui.OnEvent("Escape", "VerarbeiteBenutzereingabe")
Gui.Show()

VerarbeiteBenutzereingabe(this, *)
{
    Gespeichert := this.Submit()  <em>; Speichert die Inhalte von benannten Steuerelementen in ein Objekt.</em>
    MsgBox("Ihre Eingaben sind:`n" Gespeichert.MeineCheckBox "`n" Gespeichert.MeinRadio "`n" Gespeichert.MeinEdit)
}</pre>
</div>

<div class="ex" id="ExListBox">
<p><a href="#ExListBox">#4</a>: Erstellt eine ListBox mit Dateien aus einem Verzeichnis:</p>
<pre>Gui := GuiCreate()
Gui.Add("Text",, "Wählen Sie eine Datei aus der unteren Liste aus.")
LB := Gui.Add("ListBox", "w640 r10 vDatei")
LB.OnEvent("DoubleClick", "StarteDatei")
Loop Files, "C:\*.*"  <em>; Ordner und Platzhaltermuster je nach Bedarf anpassen.</em>
    LB.Add(A_LoopFilePath)
Gui.Add("Button", "Default", "OK").OnEvent("Click", "StarteDatei")
Gui.Show()

StarteDatei(this, *)
{
    Gespeichert := this.Gui.Submit()
    if MsgBox("Wollen Sie die folgende Datei wirklich öffnen?`n`n" Gespeichert.Datei,, 4) = "No"
        return
    <em>; Ansonsten versuchen zu starten:</em>
    try Run(Gespeichert.Datei)
    if A_LastError
        MsgBox("Die angegebene Datei konnte nicht gestartet werden. Scheinbar fehlt ein passendes Programm dafür.")
}</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a href="#ExToolTip">#5</a>: Zeigt eine kontextabhängige Hilfe an (via ToolTip), wenn man den Mauszeiger über ein bestimmtes Steuerelement bewegt:</p>
<pre>Gui := GuiCreate()
Gui.Add("Edit", "v<strong>MeinEdit</strong>")
<strong>MeinEdit</strong>_TT := "Das Tooltip für das Steuerelement mit dem Namen MeinEdit."
Gui.Add("DropDownList", "v<strong>MeineDDL</strong>", "Rot|Grün|Blau")
<strong>MeineDDL</strong>_TT := "Wählen Sie eine Farbe aus."
Gui.Add("Checkbox", "vMeineCheckBox", "Dieses Steuerelement hat kein Tooltip.")
Gui.OnEvent("Close", (*) =&gt; ExitApp())
Gui.Show()
<a href="../commands/OnMessage.htm">OnMessage</a>(0x200, "WM_MOUSEMOVE")

WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
    global  
    static AltesHwnd
    if (Hwnd != AltesHwnd)
    {
        Text := "", <a href="../commands/ToolTip.htm">ToolTip</a>() <em>; Schließt alle offenen Tooltips.</em>
        AktSteuerelement := GuiCtrlFromHwnd(Hwnd)
        if AktSteuerelement
        {
            Text := %AktSteuerelement.Name%_TT
            SetTimer () =&gt; ToolTip(Text), -1000
            SetTimer () =&gt; ToolTip(), -4000 <em>; Entfernt das ToolTip.</em>
        }
        AltesHwnd := Hwnd
    }
}</pre>
</div>

<div class="ex" id="ExOSD">
<p><a href="#ExOSD">#6</a>: Erstellt eine Bildschirmanzeige (OSD) mittels transparentem Fenster:</p>
<pre>Gui := GuiCreate()
Gui.Opt("+LastFound +AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow entfernt die Taskleistenschaltfläche und die Möglichkeit, via ALT+TAB angesteuert zu werden.</em>
Gui.BackColor := "EEAA99"  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
Gui.SetFont("s32")  <em>; Setzt eine große Schriftgröße (32 Punkte).</em>
KoordText := Gui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY dienen zum automatischen Anpassen der Fenstergröße.
; Macht alle Pixel dieser Farbe unsichtbar und den Text selbst transparent (150):</em>
WinSetTransColor(Gui.BackColor " 150")
SetTimer(() =&gt; AktualisiereOSD(KoordText), 200)
AktualisiereOSD(KoordText)  <em>; Führt die Aktualisierung sofort durch, anstatt auf den Timer zu warten.</em>
Gui.Show("x0 y400 NoActivate")  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em>

AktualisiereOSD(GuiCtrl)
{
    MouseGetPos(MausX, MausY)
    GuiCtrl.Value := "X" MausX ", Y" MausY
}</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a href="#ExProgressBar">#7</a>: Ein animierter Fortschrittsbalken auf einem Hintergrundbild:</p>
<pre>Gui := GuiCreate()
Gui.BackColor := "White"
Gui.Add("Picture", "x0 y0 h350 w450", A_WinDir "\Web\Wallpaper\Windows\img0.jpg")
MeinBtn := Gui.Add("Button", "Default xp+20 yp+250", "Animation starten")
MyBtn.OnEvent("Click", "AnimiereLeiste")
Gui.Add("Progress", "w416 vMeinProgress")
Gui.Add("Text", "wp vMeinText")  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui.Show()

AnimiereLeiste(this, *)
{
    ProgressCtrl := this.Gui["MeinProgress"]
    TextCtrl := this.Gui["MeinText"]
    Loop Files, A_WinDir "\*.*"
    {
        if (A_Index &gt; 100)
            break
        ProgressCtrl.Value := A_Index
        TextCtrl.Value := A_LoopFileName
        Sleep 50
    }
    TextCtrl.Value := "Animation beendet."
}</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a href="#ExImageViewer">#8</a>: Ein einfacher Bildbetrachter:</p>
<pre>Gui := GuiCreate("+Resize")
MeinBtn := Gui.Add("Button", "default", "Neues Bild &amp;laden")
MeinBtn.OnEvent("Click", "LadeNeuesBild")
Gui.Add("Radio", "ym+5 x+10 checked vMeinRadio", "&amp;Originalgröße")
Gui.Add("Radio", "ym+5 x+10", "&amp;Kompletter Bildschirm")
Gui.Add("Pic", "xm vMeinPic")
Gui.Show()

LadeNeuesBild(this, *)
{
    Gui := this.Gui
    RadioCtrl := Gui["MeinRadio"]
    PicCtrl := Gui["MeinPic"]
    Datei := FileSelect(,, "Bild auswählen:", "Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
    if Datei = ""
        return
    if RadioCtrl.Value = 1  <em>; Bild mit aktueller Größe anzeigen.</em>
    {
        Breite := 0
        Höhe := 0
    }
    else <em>; Zweites Optionsfeld ausgewählt: Größe des Bildes an Bildschirmgröße anpassen.</em>
    {
        Breite := A_ScreenWidth - 28  <em>; Minus 28, um Platz für Rahmen und Innenabstand zu schaffen.</em>
        Höhe := -1  <em>; "Seitenverhältnis beibehalten" erscheint sinnvoll.</em>
    }
    PicCtrl.Value := Format("*w{1} *h{2} {3}", Breite, Höhe, Datei)  <em>; Bild laden.</em>
    Gui.Title := Datei
    Gui.Show("xCenter y0 AutoSize")  <em>; Fenstergröße an Bildgröße anpassen.</em>
}</pre>
</div>

<div class="ex" id="ExEditor">
<p><a href="#ExEditor">#9</a>: Ein einfacher Texteditor mit Menüleiste:</p>
<pre><em>; Macht diese Variablen für alle unteren Funktionen zugänglich:</em>
global Gui, Dateimenü, HauptEdit, AktuellerDateiname, Über

<em>; Erstellt das GUI-Fenster:</em>
Gui := GuiCreate("+Resize", "Unbenannt")  <em>; Macht die Größe des Fensters veränderbar.</em>

<em>; Untermenüs für die Menüleiste erstellen:</em>
Dateimenü := MenuCreate()
Dateimenü.Add("&amp;Neu", "MenüDateiNeu")
Dateimenü.Add("&amp;Öffnen", "MenüDateiÖffnen")
Dateimenü.Add("&amp;Speichern", "MenüDateiSpeichern")
Dateimenü.Add("Speichern &amp;unter...", "MenüDateiSpeichernUnter")
Dateimenü.Add() <em>; Trennlinie.</em>
Dateimenü.Add("E&amp;xit", "MenüDateiBeenden")
Hilfsmenü := MenuCreate()
Hilfsmenü.Add("Inf&amp;o", "MenüHilfeÜber")

<em>; Fügt die Untermenüs in die Menüleiste ein:</em>
MeineMenüleiste := MenuBarCreate()
MeineMenüleiste.Add("&amp;Datei", Dateimenü)
MeineMenüleiste.Add("&amp;?", Hilfsmenü)

<em>; Heftet die Menüleiste an das Fenster an:</em>
Gui.MenuBar := MeineMenüleiste

<em>; Erstellt das Haupt-Eingabefeld:</em>
HauptEdit := Gui.Add("Edit", "WantTab W600 R20")

<em>; Ereignisse hinzufügen:</em>
Gui.OnEvent("DropFiles", "Gui_DropFiles")
Gui.OnEvent("Size", "Gui_Size")

MenüDateiNeu()  <em>; Standardeinstellungen abrufen.</em>
Gui.Show()  <em>; Zeigt das Fenster an.</em>

MenüDateiNeu(*)
{
    HauptEdit.Value := ""  <em>; Eingabefeld leeren.</em>
    Dateimenü.Disable("3&amp;")  <em>; Ergraut &amp;Speichern.</em>
    Gui.Title := "Unbenannt"
}

MenüDateiÖffnen(*)
{
    Gui.Opt("+OwnDialogs")  <em>; Zwingt den Benutzer, das FileSelect-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
    AusgewählterDateiname := FileSelect(3,, "Datei öffnen", "Text-Dokumente (*.txt)")
    if AusgewählterDateiname = "" <em>; Keine Datei ausgewählt.</em>
        return
    AktuellerDateiname := leseInhalt(AusgewählterDateiname)
}

MenüDateiSpeichern(*)
{
    speichereInhalt(AktuellerDateiname)
}

MenüDateiSpeichernUnter(*)
{
    Gui.Opt("+OwnDialogs")  <em>; Zwingt den Benutzer, das FileSelect-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
    AusgewählterDateiname := FileSelect("S16",, "Datei speichern", "Text-Dokumente (*.txt)")
    if AusgewählterDateiname = "" <em>; Keine Datei ausgewählt.</em>
        return
    AktuellerDateiname := speichereInhalt(AusgewählterDateiname)
}

MenüDateiBeenden(*)  <em>; Benutzer hat "Exit" im Dateimenü ausgewählt.</em>
{
    WinClose()
}

MenüHilfeÜber(*)
{
    Über := GuiCreate("+owner" Gui.Hwnd)  <em>; Macht das Über-Fenster zum Unterfenster vom Hauptfenster.</em>
    Gui.Opt("+Disabled")  <em>; Deaktiviert die Interaktion mit dem Hauptfenster.</em>
    Über.Add("Text",, "Beliebiger Text.")
    Über.Add("Button", "Default", "OK").OnEvent("Click", "Über_Close")
    Über.OnEvent("Close", "Über_Close")
    Über.OnEvent("Escape", "Über_Close")
    Über.Show()
}

leseInhalt(Dateiname)
{
    Dateiinhalt := FileRead(Dateiname)  <em>; Liest den Inhalt der Datei und speichert ihn in die Variable.</em>
    if ErrorLevel
    {
        MsgBox("'" Dateiname "' konnte nicht geöffnet werden.")
        return
    }
    HauptEdit.Value := Dateiinhalt  <em>; Fügt den Text in das Steuerelement ein.</em>
    Dateimenü.Enable("3&amp;")  <em>; Aktiviert &amp;Speichern.</em>
    Gui.Title := Dateiname  <em>; Zeigt den Dateinamen in der Titelleiste an.</em>
    return Dateiname
}

speichereInhalt(Dateiname)
{
    if FileExist(Dateiname)
    {
        FileDelete(Dateiname)
        if ErrorLevel
        {
            MsgBox("Überschreiben der Datei '" Dateiname "' fehlgeschlagen.")
            return
        }
    }
    FileAppend(HauptEdit.Value, Dateiname)  <em>; Speichert den Inhalt in eine Datei.
    ; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit DateiSpeichernUnter aufgerufen wurde):</em>
    Gui.Title := Dateiname
    return Dateiname
}

Über_Close(*)
{
    Gui.Opt("-Disabled")  <em>; Reaktiviert die Interaktion mit dem Hauptfenster (muss vor dem nächsten Schritt erfolgen).</em>
    Über.Destroy()  <em>; Entfernt das Über-Fenster.</em>
}

Gui_DropFiles(Gui, Ctrl, DateiArray, *)  <em>; Ziehen &amp; Ablegen unterstützen.</em>
{
    AktuellerDateiname := leseInhalt(DateiArray[1])  <em>; Nur die erste Datei nehmen (sofern mehrere Dateien vorhanden sind).</em>
}

Gui_Size(Gui, MinMax, Breite, Höhe)
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
        return
    <em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Eingabefeldes muss entsprechend angepasst werden.</em>
    HauptEdit.Move("W" Breite-20 " H" Höhe-20)
}</pre>
</div>
</body>
</html>
