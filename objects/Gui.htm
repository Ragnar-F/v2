<!DOCTYPE HTML>
<html>
<head>
<title>GUI-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GUI-Objekt</h1>
<p>Ermöglicht eine Schnittstelle zum Erstellen und Verwalten von Fenstern, und Erstellen von Steuerelementen. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden. <a href="../commands/GuiCreate.htm">GuiCreate</a> und <a href="../commands/GuiFromHwnd.htm">GuiFromHwnd</a> geben ein Objekt dieses Typs zurück.</p>

<h4 id="Properties">Eigenschaften:</h4>
<ul>
  <li><a href="#BackColor">BackColor</a>: Ermittelt oder setzt die Hintergrundfarbe des Fensters.</li>
  <li><a href="#ClientPos">ClientPos</a>: Ermittelt die Position und Größe des Clientbereichs eines GUI-Fensters.</li>
  <li><a href="#Control">Control</a>: Ermittelt ein <a href="GuiControl.htm">GuiControl-Objekt</a>, das mit dem angegebenen Namen, ClassNN oder HWND verknüpft ist.</li>
  <li><a href="#FocusedCtrl">FocusedCtrl</a>: Ermittelt das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten GUI-Steuerelements.</li>
  <li><a href="#Hwnd">Hwnd</a>: Ermittelt das HWND (Window Handle) des GUI-Fensters.</li>
  <li><a href="#MarginX">MarginX</a>: Ermittelt oder setzt die Größe von horizontalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</li>
  <li><a href="#MarginY">MarginY</a>: Ermittelt oder setzt die Größe von vertikalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</li>
  <li><a href="#Menu">Menu</a>: Fügt eine Menüleiste hinzu oder entfernt sie.</li>
  <li><a href="#Name">Name</a>: Ermittelt oder setzt einen benutzerdefinierten Namen für das GUI-Fenster.</li>
  <li><a href="#Pos">Pos</a>: Ermittelt die Position und Größe des GUI-Fensters.</li>
  <li><a href="#Title">Title</a>: Ermittelt oder setzt den Titel des GUI-Fensters.</li>
</ul>
<h4 id="Methods">Methoden:</h4>
<ul>
  <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
  <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
  <li><a href="#Flash">Flash</a>: Lässt das Fenster und seine Taskleistenschaltfläche einmal aufblinken.</li>
  <li><a href="#Hide">Hide / Cancel</a>: Versteckt das Fenster.</li>
  <li><a href="#Maximize">Maximize</a>: Macht das Fenster wieder sichtbar und maximiert es.</li>
  <li><a href="#Minimize">Minimize</a>: Macht das Fenster wieder sichtbar und minimiert es.</li>
  <li><a href="#_NewEnum">_NewEnum</a>: Ermöglicht es, Steuerelemente des GUI-Fensters schrittweise durchzugehen.</li>
  <li><a href="GuiOnEvent.htm">OnEvent</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn das entsprechende Ereignis ausgelöst wird.</li>
  <li><a href="#Opt">Opt</a>: Setzt verschiedene Optionen und Styles, die das Aussehen und Verhalten des GUI-Fensters beeinflussen.</li>
  <li><a href="#Restore">Restore</a>: Macht das Fenster wieder sichtbar und stellt dessen ursprünglichen Zustand wieder her, falls es zuvor minimiert oder maximiert war.</li>
  <li><a href="#SetFont">SetFont</a>: Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und die Textfarbe für danach erstellte Steuerelemente.</li>
  <li><a href="#Show">Show</a>: Zeigt das Fenster an. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
  <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
</ul>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>Fügt ein Steuerelement in das GUI-Fenster ein, und gibt ein  <a href="GuiControl.htm">GuiControl-Objekt</a> zurück.</p>
<pre class="Syntax">Gui.<span class="func">Add</span>(Steuerelement <span class="optional">, Optionen, Text</span>)
Gui.<span class="func">Add</span>Steuerelement(<span class="optional">Optionen, Text</span>)</pre>
<dl>
  <dt>Steuerelement</dt><dd><p>Dies kann folgendes sein: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Edit">Edit</a>, <a href="../commands/GuiControls.htm#UpDown">UpDown</a>, <a href="../commands/GuiControls.htm#Picture">Picture</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Checkbox">Checkbox</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>, <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#Hotkey">Hotkey</a>, <a href="../commands/GuiControls.htm#DateTime">DateTime</a>, <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="../commands/GuiControls.htm#Slider">Slider</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Tab">Tab</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a></p>
  <p>Zum Beispiel:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Text",, "Bitte Name eingeben:")
Gui.AddEdit("vName")
Gui.Show</pre></dd>
  <dt>Optionen</dt><dd><h4 id="PosSize">Position und Größe von Steuerelementen anpassen</h4>
  <p>Wenn man einige Größenangaben oder Koordinaten in <em>Optionen</em> absichtlich weglässt, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder je nach Inhalt und Typ automatisch größer/kleiner gemacht.</p>
  <p>Folgende Optionen werden unterstützt:</p>
  <p id="R"><strong>R</strong>: Textzeilen (kann eine Gleitkommazahl wie bei R2.5 enthalten). <strong>R</strong> ist oft besser als <strong>H</strong> (Höhe). Wenn <strong>R</strong> und <strong>H</strong> gleichzeitig vorhanden sind, wird <strong>R</strong> Vorrang haben. Bei einer GroupBox bestimmt diese Einstellung die Menge an Steuerelementen, für die innerhalb der Box Platz geschaffen werden soll. Bei <a href="../commands/GuiControls.htm#DropDownList">DropDownLists</a>, <a href="../commands/GuiControls.htm#ComboBox">Comboboxen</a> und <a href="../commands/GuiControls.htm#ListBox">Listboxen</a> ist diese Option die Anzahl der Elemente, die gleichzeitig innerhalb des Listenbereichs eines Steuerelements sichtbar sein sollen (aber in Windows XP oder höher wäre es ratsam, sowohl <strong>R</strong> als auch <strong>H</strong> bei DropDownList und ComboBox wegzulassen, damit die Aufklappliste sich automatisch an die verfügbare Höhe des Benutzerdesktops anpassen kann). Bei allen anderen Steuerelementen ist <strong>R</strong> die Anzahl der Textzeilen, die sichtbar im Steuerelement reinpassen können.</p>
  <p><strong>W</strong>: Breite in Pixel. Wenn diese Option fehlt, wird die Breite bei einigen Steuerelementarten automatisch anhand ihrer Inhalte berechnet. Alle anderen Steuerelementarten haben standardmäßig folgende Breiten:<br>
      Tab-Steuerelemente: Das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#MarginX">X-Abstands</a>.<br>
      Vertikale ProgressBars: Das 2-fache der aktuellen Schriftgröße.<br>
      Horizontale ProgressBars, horizontale Slider, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits und Hotkeys: Das 15-fache der aktuellen Schriftgröße (außer GroupBoxes, die mit 18 multipliziert werden, um innerhalb der Abstände Platz zu schaffen).</p>
  <p><strong>H</strong>: Höhe in Pixel. Wenn man sowohl <strong>H</strong> als auch <strong>R</strong> weglässt, verwenden DropDownLists, ComboBoxes, ListBoxes und leere mehrzeilige Edit-Steuerelemente standardmäßig eine Höhe von 3 Zeilen; GroupBoxes standardmäßig 2 Zeilen; vertikale Slider und ProgressBars standardmäßig 5 Zeilen; horizontale Slider standardmäßig 30 Pixel (außer wenn eine Dicke angegeben wurde); horizontale ProgressBars standardmäßig das 2-fache der aktuellen Schriftgröße; Hotkey-Steuerelemente standardmäßig 1 Zeile; und Tab-Steuerelemente standardmäßig 10 Zeilen. Bei allen anderen Steuerelementen wird die Höhe automatisch anhand ihrer Inhalte berechnet. Die Höhe <strong>H</strong> von DropDownLists und ComboBoxes ist eine Kombination aus Höhe des sichtbaren Teils und Höhe des Listenbereichs (selbst wenn die Höhe zu niedrig ist, wird mindestens immer ein Element in der Liste sichtbar sein). Außerdem wäre es ratsam, die gewünschte Höhe via <strong>R</strong> statt via <strong>H</strong> zu definieren, um die vollständige Sichtbarkeit der Textzeilen zu gewährleisten.</p>
  <p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, die Größen eines Steuerelements an die Größen des zuvor hinzugefügten Steuerelements anzupassen, optional mit einem Plus- oder Minuszeichen. Zum Beispiel würde <code>wp</code> die Breite eines Steuerelements auf die Breite des vorherigen Steuerelements setzen, und <code>wp-50</code> würde die Breite des vorherigen Steuerelements verwenden, subtrahiert mit 50.</p>
  <p id="XY"><strong>X</strong>: X-Position. Zum Beispiel würde <code>x0 y0</code> das Steuerelement in die obere linke Ecke des Client-Bereichs positionieren (das ist der Fensterbereich ohne Rahmen, Titelleiste und Menüleiste). Wenn <strong>Y</strong> vorhanden ist und <strong>X</strong> fehlt, wird das Steuerelement auf der rechten Seite der zuvor eingefügten Steuerelementen positioniert, wie als würde eine neue "Spalte" beginnen.</p>
  <p><strong>Y</strong>: Y-Position. Wenn <strong>X</strong> vorhanden ist und <strong>Y</strong> fehlt, wird das Steuerelement auf der unteren Seite der zuvor eingefügten Steuerelementen positioniert, wie als würde eine neue "Zeile" beginnen.</p>
  <p>Das Weglassen von <strong>X</strong> und/oder <strong>Y</strong> hat den Vorteil, dass sich ein GUI-Layout automatisch an zukünftigen Änderungen bzgl. der Größe von Steuerelementen oder Schriftart anpassen kann. Bei absoluten Steuerelementpositionen müsste man jedes einzelne Steuerelement manuell verschieben, das sich unterhalb oder rechts neben dem Steuerelement befindet, welches vergrößert oder verkleinert wurde.</p>
  <p>Wenn sowohl <strong>X</strong> als auch <strong>Y</strong> fehlen, wird das Steuerelement unterhalb des vorherigen Steuerelements positioniert, unter Beachtung des vordefinierten Abstands.</p>
  <p id="PosPlus">Bei <strong>X</strong> und <strong>Y</strong> kann optional ein Pluszeichen vor der Zahl angefügt werden, um ein Steuerelement relativ zum rechten oder unteren Rand des zuvor eingefügten Steuerelements zu positionieren. Zum Beispiel würde <code>Y+10</code> das Steuerelement unterhalb des vorherigen Steuerelements mit einem Abstand von 10 Pixel positionieren, anstatt auf den vordefinierten Abstand zurückzugreifen. <code>X+10</code> hingegen würde das Steuerelement rechts neben dem vorherigen Steuerelement mit einem Abstand von 10 Pixel positionieren. Negative Zahlen wie bei <code>X-10</code> sind für die absolute Positionierung vorbehalten. Um einen negativen Abstand zu erreichen, muss zusätzlich ein Pluszeichen davorgesetzt werden. Zum Beispiel: <code>X+-10</code>.</p>
  <p id="PosPlusMargin">Bei <strong>X+</strong> und <strong>Y+</strong> kann der Buchstabe <strong>M</strong> als Ersatz für den aktuellen <a href="#MarginX">Abstand</a> (Margin) des Fensters verwendet werden. Zum Beispiel würde <strong>x+m</strong> den rechten Rand des vorherigen Steuerelements verwenden, plus den voreingestellten Innenabstand. <strong>xp y+m</strong> würde ein Steuerelement unterhalb des vorherigen Steuerelements positionieren, während eine X-Koordinate allein normalerweise standardmäßig <strong>yp</strong> bedeuten würde.</p>
  <p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, Steuerelemente relativ zur linken oberen Ecke des vorherigen Steuerelements zu positionieren, um beispielsweise Steuerelemente in einer <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a> einzuschließen.</p>
  <p id="xm"><strong>xm</strong> und <strong>ym</strong> können dazu verwendet werden, ein Steuerelement jeweils am linken und rechten <a href="#MarginX">Abstand</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen). Wenn man <strong>ym</strong> ohne X-Position verwendet, wird das Steuerelement am oberen Abstand positioniert, aber rechts neben allen zuvor eingefügten Steuerelementen, wie als würde eine neue "Spalte" beginnen. Umgekehrt gilt das gleiche (xs ohne Y-Position).</p>
  <p id="xs"><strong>xs</strong> und <strong>ys</strong>: Diese Optionen sind ungefähr das gleiche wie <strong>xm</strong> und <strong>ym</strong>, allerdings beziehen sie sich auf Koordinaten, die via <a href="#Section">Section</a>-Option eines zuvor hinzugefügten Steuerelements gespeichert wurden (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, egal ob diese Option vorhanden ist oder nicht). Wenn man <strong>ys</strong> ohne X-Position verwendet, wird das Steuerelement auf die zuvor gespeicherte Y-Position positioniert, aber rechts neben allen Steuerelementen, die seit der letzten Verwendung von <a href="#Section">Section</a> hinzugefügt wurden; wie als würde eine neue "Spalte" innerhalb der Sektion beginnen. Zum Beispiel:</p>
  <pre>Gui := GuiCreate()
Gui.Add("Edit", "w600")  <em>; Fügt ein breites Eingabefeld am oberen Rand des Fensters hinzu.</em>
Gui.Add("Text", "<strong>section</strong>", "Vorname:")  <em>; Speichert die Position des Steuerelements und beginnt eine neue Sektion.</em>
Gui.Add("Text",, "Nachname:")
Gui.Add("Edit", "<strong>ys</strong>")  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui.Add("Edit")
Gui.Show</pre>
  <p>Umgekehrt gilt das gleiche (<strong>xs</strong> ohne Y-Position).</p>
  <p>Bei Bedarf kann nach <strong>xs</strong> und <strong>ys</strong> ein Plus-/Minuszeichen und eine Zahl erfolgen. Das Wort <a href="#Section">Section</a> und xs/ys können gleichzeitig in den Optionen des Steuerelements vorhanden sein, dadurch kann das Steuerelement die vorherigen Positionsdaten für sich selbst nutzen und für nachfolgende Steuerelemente eine neue Sektion beginnen.</p>
  
  <h4 id="Events">Speichern von und Reagieren auf Benutzereingaben</h4>
  <p id="var"><strong>V</strong>: Setzt den <a href="GuiControl.htm#Name">Namen</a> des Steuerelements. Geben Sie den Namen direkt nach dem Buchstaben V an, welches nicht im Namen enthalten ist. Zum Beispiel würde <code><strong>v</strong>MeinEdit</code> das Steuerelement mit dem Namen "MeinEdit" versehen.</p>
  <p id="label"><strong>Ereignisse</strong>: Ereignis-Handler (z. B. eine Funktion, die automatisch aufgerufen wird, wenn der Benutzer ein Steuerelement anklickt oder ändert) können nicht in den <em>Optionen</em> des Steuerelements gesetzt werden. Stattdessen kann man <a href="GuiOnEvent.htm">OnEvent</a> benutzen, um für jedes Ereignis von Interesse eine Callback-Funktion oder Methode zu registrieren.</p>
  
  <h4 id="OtherOptions">Steuerelemente: Häufig verwendete Styles und Optionen</h4>
  <p>Hinweis: Vorzeichenlose Optionen werden standardmäßig hinzugefügt; zum Beispiel ist <code>Wrap</code> das gleiche wie <code>+Wrap</code>. <code>-Wrap</code> hingegen entfernt den Zeilenumbruch im Steuerelement.</p>
  <p id="AltSubmit"><strong>AltSubmit</strong>: Eine alternative Submit-Methode. Bei DropDownList, ComboBox oder ListBox bewirkt diese Option, dass <a href="#Submit">Gui.Submit</a> die Position des ausgewählten Elements speichert, nicht dessen Text. Wenn kein Element ausgewählt ist, wird eine ComboBox den Text in ihrem Eingabefeld als den zu speichernden Wert verwenden.</p>
  <p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="../commands/GuiControls.htm#Button">Buttons</a>). Geben Sie den Buchstaben C an und fügen Sie direkt danach den Namen einer Farbe (siehe <a href="../misc/Colors.htm">Farbtabelle</a>) oder einen RGB-Wert ein (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled</strong>: Deaktiviert ein eingabefähiges Steuerelement, wodurch es weder fokussiert noch geändert werden kann. Mit <a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a> kann es später wieder aktiviert werden. Hinweis: Um ein Edit-Steuerelement stattdessen in den schreibgeschützten Zustand zu versetzen, gibt man <code>ReadOnly</code> in den Optionen an. Direkt nach dem Wort Disabled kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für aktiviert, 1 für deaktiviert). In diesem Fall wäre <code>Disabled</code> das gleiche wie <code>"Disabled" VarMitEins</code>.</p>
  <p><strong>Hidden</strong>: Das Steuerelement wird zu Beginn unsichtbar sein. Mit <a href="GuiControl.htm#Visible">GuiCtrl.<span style="color: #4280ca;">Visible</span></a> kann es später wieder sichtbar gemacht werden. Direkt nach dem Wort Hidden kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für sichtbar, 1 für versteckt). In diesem Fall wäre <code>Hidden</code> das gleiche wie <code>"Hidden" VarMitEins</code>.</p>
  <p><strong>Left</strong>: Richtet den Text im Steuerelement nach links aus. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right</strong>: Richtet den Text im Steuerelement nach rechts aus. Bei CheckBox- und Radio-Steuerelementen wird das Auswahlfeld auf die rechte Seite gesetzt. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center</strong>: Zentriert den Text im Steuerelement auf horizontaler Ebene. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section</strong>: Beginnt eine neue Sektion und speichert die Positiondaten des Steuerelements, die für die Positionierungsoptionen <em>xs</em> und <em>ys</em> gedacht sind (<a href="#xs">siehe oben</a>).</p>
  <p id="Tabstop"><strong>Tabstop</strong>: <code>-Tabstop</code> bewirkt, dass ein eingabefähiges Steuerelement übersprungen wird, wenn der Benutzer die TAB-Taste zum Navigieren verwendet.</p>
  <p id="Wrap"><strong>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Steuerelement. Nahezu alle Arten von Steuerelementen haben zu Beginn den automatischen Zeilenumbruch aktiv, daher verwendet man häufiger <code>-Wrap</code>, um es zu deaktivieren.</p>
  <p><strong>VScroll</strong>: Stattet das Steuerelement mit einer vertikalen Scrollleiste aus, sofern möglich.</p>
  <p><strong>HScroll</strong>: Stattet das Steuerelement mit einer horizontalen Scrollleiste aus, sofern möglich. Der Rest dieses Absatzes gilt nur für die <a href="../commands/GuiControls.htm#ListBox">ListBox</a>. Die Breite des scrollbaren Bereichs ist standardmäßig 3-mal so groß wie die Breite der ListBox. Um eine eigene Breite des scrollbaren Bereichs zu definieren, fügt man direkt nach dem Wort HScroll eine Zahl ein. Zum Beispiel wäre <code>HScroll500</code> ein scrollbarer Bereich von 500 Pixeln innerhalb der ListBox. Wenn die angegebene Breite des scrollbaren Bereichs allerdings kleiner ist als die Breite der ListBox, wird die Scrollleiste nicht angezeigt (beachte aber, dass die bloße Anwesenheit von <em>HScroll</em> es überhaupt erst möglich macht, die horizontale Scrollleiste später via <code>MyScrollBar.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code> zu aktivieren).</p>
  
  <h4>Steuerelemente: Selten verwendete Styles und Optionen</h4>
  <p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Aktiviert einen transparenten Hintergrund, wodurch Steuerelemente unterhalb eines Text-, Picture- oder GroupBox-Steuerelements teilweise sichtbar sind. Ein transparentes Text-Steuerelement oberhalb eines Picture-Steuerelements würde beispielsweise die Illusion erzeugen, als gehöre der Text zum Bild. Mit <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> kann diese Option wieder entfernt werden. Im <a href="../commands/GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a> findet man weitere Informationen über transparente Bilder. Bekannte Einschränkung: BackgroundTrans kann sich falsch verhalten, wenn man diese Option bei Steuerelementen innerhalb eines <a href="../commands/GuiControls.htm#Tab">Tab-Steuerelement</a>s mit einer <a href="../commands/ListView.htm">ListView</a> anwendet. Wenn ein Steuerelementtyp diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p id="Background"><strong>Background</strong><em>Farbe</em>: Ändert die Hintergrundfarbe des Steuerelements. Ersetzen Sie <em>Farbe</em> mit einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbtabelle</a>) oder RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Fehlt diese Option, verwendet ein <a href="../commands/GuiControls.htm#Text">Text</a>-, <a href="../commands/GuiControls.htm#Picture">Picture</a>-, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>-, <a href="../commands/GuiControls.htm#Checkbox">CheckBox</a>-, <a href="../commands/GuiControls.htm#Radio">Radio</a>-, <a href="../commands/GuiControls.htm#Slider">Slider</a>-, <a href="../commands/GuiControls.htm#Tab">Tab</a>- oder <a href="../commands/GuiControls.htm#Link">Link</a>-Steuerelement zu Beginn eine Hintergrundfarbe, die via <a href="#BackColor">Gui.BackColor</a> gesetzt wurde (wenn dies nicht der Fall ist oder ein anderer Typ des Steuerelements benutzt wird, dann die Standard-Hintergrundfarbe des Betriebssystems). Mit <code>BackgroundDefault</code> oder <code>-Background</code> kann die Standard-Hintergrundfarbe des Betriebssystems erzwungen werden. Mit <code>LV.Opt("+BackgroundDefault")</code> kann beispielsweise die Standardfarbe wiederhergestellt werden. <code>+Background</code> ohne Farbangabe kehrt <code>-Background</code> um. Wenn ein Steuerelementtyp diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p><strong>Border</strong>: Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente benötigen diese Option nicht, da sie bereits einen typenspezifischen Rahmen haben. Beim <em>nachträglichen</em> Hinzufügen eines Rahmens kann es vorkommen, dass man die Breite und Höhe des Steuerelements um 1 Pixel erweitern muss, um eine korrekte Darstellung zu gewährleisten.</p>
  <p><strong>Theme</strong>: Mit dieser Option kann das aktuelle Fenster-Design des neu erstellten Steuerelements überschrieben werden. Bei bereits vorhandenen Steuerelementen hat diese Option keinen Effekt; allerdings kann sich das in einer zukünftigen Version noch ändern. Siehe <a href="../commands/GuiCreate.htm#Theme">+/-Theme</a>-Option für Details.</p>
  <p><strong>(Unbenannter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach eine dezimale oder hexadezimale <a href="../misc/Styles.htm">Style-Nummer</a> ein. Wenn das Vorzeichen fehlt, wird die Style-Nummer standardmäßig hinzugefügt.</p>
  <p><strong>(Unbenannter ExStyle)</strong>: Geben Sie ein Plus- oder Minuszeichen an und fügen Sie direkt danach ein "E" und eine dezimale oder hexadezimale erweiterte Style-Nummer ein. Wenn das Vorzeichen fehlt, wird die Style-Nummer standardmäßig hinzugefügt. <code>E0x200</code> würde beispielsweise den WS_EX_CLIENTEDGE-Style hinzufügen, der Steuerelemente wie z. B. Picture mit einem abgesenkten Rahmen ausstattet. Es gibt noch viele andere Styles, die hier zwar nicht aufgelistet sind (weil sie eher selten benutzt werden), aber auf <a href="http://www.microsoft.com">www.microsoft.com</a> zu finden sind, wenn man dort z. B. nach WS_EX_CLIENTEDGE sucht.</p></dd>
  <dt>Text</dt><dd>Je nach Typ des Steuerelements eine Zeichenkette, Zahl oder ein Array.</dd>
</dl>
</div>

<div class="methodShort" id="Show">
<h2>Show</h2>
<p>Bewirkt standardmäßig, dass das Fenster sichtbar gemacht, sein minimierter Zustand aufgehoben (falls notwendig) und <a href="../commands/WinActivate.htm">aktiviert</a> wird.</p>
<pre class="Syntax">Gui.<span class="func">Show</span>(<span class="optional">Optionen</span>)</pre>
<dl>
  <dt>Optionen</dt><dd><p>Wenn man die Optionen X, Y, W und H weglässt, wird das Fenster seine vorherige Größe und Position beibehalten. Falls keine vorherige Position vorhanden ist, wird das Fenster automatisch auf eine der beiden Koordinatenachsen zentriert, wenn die unten erwähnten Optionen X und/oder Y fehlen. Falls eine vorherige Größe nicht wiederhergestellt werden kann, wird die Fenstergröße automatisch an den vorhandenen Steuerelementen angepasst.</p>
  <p>Folgende Zeichenketten können in den <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
  <p><strong>Wn</strong>: Geben Sie für <strong>n</strong> die Breite (in Pixel) des Client-Fensterbereichs an (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a> des Fensters).</p>
  <p><strong>Hn</strong>: Geben Sie für <strong>n</strong> die Höhe des Client-Fensterbereichs an (in Pixel).</p>
  <p><strong>Xn</strong>: Geben Sie für <strong>n</strong> die X-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
  <p><strong>Yn</strong>: Geben Sie für <strong>n</strong> die Y-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
  <p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
  <p><strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
  <p id="AutoSize"><strong>AutoSize</strong>: Passt die Fenstergröße an den aktuell sichtbaren Steuerelementen an. Diese Option ist besonders hilfreich, wenn neue Steuerelemente hinzugefügt werden, oder wenn bereits vorhandene Steuerelemente größer, kleiner, sichtbar oder unsichtbar gemacht werden. Zum Beispiel:<br>
    <code>Gui.Show("AutoSize Center")</code></p>
  <p><em><strong>Von den folgenden Optionen kann nur eine aktiv sein:</strong></em></p>
  <p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
  <p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
  <p><strong>Restore</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Das Fenster wird dabei angezeigt und aktiviert.</p>
  <p><strong>NoActivate</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Das Fenster wird dabei angezeigt, aber nicht aktiviert.</p>
  <p><strong>NA</strong>: Zeigt das Fenster an, ohne es zu aktivieren. Das Fenster bleibt falls zutreffend minimiert, aber steigt in der Z-Rangordnung nach oben (die aktuelle Rangordnung sieht man, wenn man ALT+TAB drückt). Wenn das Fenster vorher versteckt wurde, dann erscheint es so, als befände es sich direkt über dem aktiven Fenster, egal ob das aktive Fenster deaktiviert ist oder nicht.</p>
  <p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Funktioniert genauso wie <a href="#Hide">Gui.Hide</a>, aber das versteckte Fenster darf hier weiterhin verschoben oder kleiner/größer gemacht werden, ohne es anzeigen zu müssen. Zum Beispiel: <code>Gui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h2>Submit</h2>
<p>Speichert die Inhalte von Steuerelementen in ein <a href="../Objects.htm#Usage_Associative_Arrays">assoziatives Array</a> (Objekt) und gibt es zurück. Standardmäßig versteckt es auch das Fenster.</p>
<pre class="Syntax">BenannteStrlmntInhalte := Gui.<span class="func">Submit</span>(<span class="optional">Verstecken := True</span>)</pre>
<dl>
  <dt>Verstecken</dt><dd>Wenn dieser Parameter False ist, wird das Fenster nicht versteckt.</dd>
</dl>
<p>Das zurückgegebene Array enthält ein Element pro Steuerelement, meist so etwas wie <code>Array[GuiCtrl.<a href="GuiControl.htm#Name">Name</a>] := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, mit den unten genannten Ausnahmen. Es sind nur eingabfähige Steuerelemente enthalten, die <a href="GuiControl.htm#Value">GuiCtrl.Value</a> unterstützen und einen Namen erhalten haben.</p>
<p>Bei <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a> und <a href="../commands/GuiControls.htm#Tab">Tab</a> wird der Text statt Positionsnummer des ausgewählten Elements/Tabs gespeichert, wenn dem Steuerelement die <a href="#AltSubmit">AltSubmit</a>-Option <strong>fehlt</strong>, oder wenn ComboBox's Text nicht mit einem Listenelement übereinstimmt. Ansonsten wird <a href="GuiControl.htm#Value">Value</a> (die Positionsnummer des Elements) gespeichert.</p>
<p id="submit-radio">Wenn nur ein <a href="../commands/GuiControls.htm#Radio">Radio</a>-Button in einer Radiogruppe einen Namen hat, wird Submit die Nummer des aktuell markierten Radio-Buttons speichern, anstatt dessen <a href="GuiControl.htm#Value">Value</a>. 1 ist der erste Radio-Button (gemäß der originalen Erstellungsreihenfolge), 2 ist der zweite und so weiter. Wenn kein einziger Radio-Button markiert ist, wird 0 gespeichert.</p>
<p>Folgende Steuerelemente sind ausgeschlossen, weil sie nicht eingabefähig sind: <a href="../commands/GuiControls.htm#Text">Text</a>, <a href="../commands/GuiControls.htm#Pic">Pic</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Progress">Progress</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Auch ausgeschlossen: <a href="../commands/ListView.htm">ListView</a>, <a href="../commands/TreeView.htm">TreeView</a>, <a href="../commands/GuiControls.htm#ActiveX">ActiveX</a>, <a href="../commands/GuiControls.htm#Custom">Custom</a>.</p>
</div>

<span id="Cancel"></span><div class="methodShort" id="Hide">
<h2>Hide / Cancel</h2>
<p>Versteckt das Fenster.</p>
<pre class="Syntax">Gui.<span class="func">Hide</span>()
Gui.<span class="func">Cancel</span>()</pre>
</div>

<div class="methodShort" id="Destroy">
<h2>Destroy</h2>
<p>Bewirkt, dass das Fenster und seine Steuerelemente entfernt, und die benutzten Systemressourcen wie z. B. Arbeitsspeicher freigegeben werden.</p>
<pre class="Syntax">Gui.<span class="func">Destroy</span>()</pre>
<p>Hinweis: Falls das Skript später das Fenster neu erstellt, beginnen alle Fenstereigenschaften wie Farbe und Schriftart wieder mit ihren Standardwerten (als hätte das Fenster nie existiert). Selbst wenn man <code>Gui.Destroy()</code> nicht verwendet - alle GUI-Fenster werden automatisch entfernt, sobald das Skript beendet wird.</p>
</div>

<div class="methodShort" id="SetFont">
<h2>SetFont</h2>
<p>Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und/oder die Textfarbe für alle nachfolgenden Steuerelemente, die neu hinzugefügt werden.</p>
<p>Hinweis: Wenn man beide Parameter weglässt, werden die Standardeinstellungen für die Schriftart, Schriftgröße und Textfarbe wiederhergestellt. Ansonsten werden alle ausgelassenen Attribute von der vorherigen Schriftart übernommen.</p>
<pre class="Syntax">Gui.<span class="func">SetFont</span>(<span class="optional">Optionen, Schriftart</span>)</pre>
<dl>
  <dt>Optionen</dt><dd><p>Null oder mehrere Optionen. Jede Option ist entweder ein einzelner Buchstabe mit direkt einem Wert danach, oder ein einzelnes Wort. Mehrere Optionen müssen mit einem Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
  <p>Folgende Wörter werden unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und deaktiviert italic, strike und underline (Farbe und Größe bleiben unberührt). Man kann mit norm zuerst alle Attribute deaktivieren und dann bestimmte Attribute wieder aktivieren. So zum Beispiel könnte man mit <code>norm italic</code> die Schrift normalisieren und sie dann kursiv machen.</p>
  <p><strong>C</strong>: Der Name einer Farbe (siehe <a href="../misc/Colors.htm">Farbtabelle</a>) oder ein RGB-Wert, oder das Wort "Default", um die Standardfarbe des Systems wiederherzustellen (üblicherweise schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="../commands/GuiControls.htm#Button">Buttons</a> können nicht mit einer benutzerdefinierten Farbe versehen werden. Fügen Sie ein C und direkt danach die gewünschte Farbe in den Optionen ein, um die Textfarbe eines bestimmten Steuerelements zu ändern. Zum Beispiel: <code>Gui.Add("Text", "cRed", "Mein Text")</code>.</p>
  <p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
  <p><strong>W</strong>: Breite (Dicke). Eine Nummer zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
  <p id="fontq"><strong>Q</strong>: Textdarstellungsqualität. Zum Beispiel: <code>q3</code>. Nach Q muss eine Zahl aus der folgenden Tabelle erfolgen:</p>
  <table class="info">
    <tr>
      <td>0 = DEFAULT_QUALITY</td>
      <td>Die Darstellung der Schriftart spielt keine Rolle.</td>
    </tr><tr>
      <td>1 = DRAFT_QUALITY</td>
      <td>Die Darstellung der Schriftart ist ein wenig unwichtiger als wie bei PROOF_QUALITY.</td>
    </tr><tr>
      <td>2 = PROOF_QUALITY</td>
      <td>Die Zeichenqualität der Schriftart ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (z. B. fett, kursiv und so weiter).</td>
    </tr><tr>
      <td>3 = NONANTIALIASED_QUALITY</td>
      <td>Schrift wird nicht geglättet.</td>
    </tr><tr>
      <td>4 = ANTIALIASED_QUALITY</td>
      <td>Schrift wird geglättet, wenn die Schriftart so etwas unterstützt und deren Größe nicht zu klein und nicht zu groß ist.</td>
    </tr><tr>
      <td>5 = CLEARTYPE_QUALITY</td>
      <td>Windows XP und höher: Der Text wird gegebenenfalls mithilfe der ClearType-Kantenglättung dargestellt.</td>
    </tr>
  </table>
  <p>Um mehr darüber zu erfahren, was diese Werte bedeuten, siehe <a href="https://msdn.microsoft.com/de-de/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
  <p>Standardmäßig gilt die höchste Qualitätseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantenglättung zu deaktivieren, um den Text bei bestimmten Fällen besser lesbar zu machen.</p></dd>
  <dt>Schriftart</dt><dd><p><em>Schriftart</em> kann der Name einer beliebigen Schriftart sein (siehe <a href="../misc/FontsStandard.htm">Tabelle für Schriftarten</a>). Lässt man die <em>Schriftart</em> weg oder wird sie im System nicht gefunden, bleibt die vorherige Schriftart erhalten (sofern es eine gibt, ansonsten die Standardschriftart des Systems). So könnte man mit mehreren Schriftarten sicherstellen, dass bei verschiedenen Systemen eine von denen verwendet wird. Wenn man die folgenden Methoden in dieser Reihenfolge verwendet, wird Verdana Vorrang vor Arial haben, welches wiederum Vorrang vor MS Sans Serif haben wird:</p>
  <pre>Gui.SetFont(, "MS sans serif")
Gui.SetFont(, "Arial")
Gui.SetFont(, "Verdana")  <em>; Bevorzugte Schriftart.</em></pre></dd>
</dl>
<p>Pro forma ist noch zu erwähnen, dass das Betriebssystem vorgefertigte Dialogfenster anbietet, die der Benutzer zum Auswählen einer Farbe, einer Schriftart oder eines Symbols verwenden kann. Solche Dialogfenster können via <a href="../commands/DllCall.htm">DllCall</a> angezeigt werden, siehe dazu <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
</div>

<div class="methodShort" id="BackColor">
<h2>BackColor</h2>
<p>Ermittelt oder setzt die Hintergrundfarbe des Fensters.</p>
<pre class="Syntax">ErmittelteFarbe := Gui.BackColor</pre>
<pre class="Syntax">Gui.BackColor := NeueFarbe</pre>
<p><em>ErmittelteFarbe</em> ist ein 6-stelliger RGB-Wert der aktuellen Farbe, welche zuvor von dieser Eigenschaft gesetzt worden ist.</p>
<p><em>NeueFarbe</em> ist eine der 16 <a href="../misc/Colors.htm">HTML-Hauptfarben</a>, ein hexadezimaler RGB-Farbwert (das 0x-Präfix ist optional), ein reiner numerischer RGB-Farbwert, oder das Wort Default für dessen Standardfarbe. Beispielwerte: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p>
<p>Standardmäßig ist die Hintergrundfarbe des Fensters die vordefinierte Farbe eines Buttons.</p>
<p>Die Farbe der <a href="#Menu">Menüleiste</a> und ihre Untermenüs können wie folgt geändert werden: <code><a href="../commands/Menu.htm">Menu</a> "MeineMenüleiste", "Color", "White"</code>.</p>
<p>Mit <a href="../commands/WinSet.htm#TransColor">WinSetTransColor</a> kann der Hintergrund transparent gemacht werden. Wenn Sie dies jedoch tun, ohne zuvor eine benutzerdefinierte Fensterfarbe via <a href="#BackColor">Gui.BackColor</a> zugewiesen zu haben, werden die Buttons ebenfalls transparent. Um das zu verhindern, weist man zuerst eine benutzerdefinierte Farbe zu und macht diese Farbe anschließend transparent. Zum Beispiel:</p>
<pre>Gui.BackColor("EEAA99")
WinSetTransColor("EEAA99")</pre>
<p>Die folgenden Zeilen können hinzugefügt werden, um den Rahmen und die Titelleiste eines Fensters zu entfernen, das <strong>bereits</strong> transparent gemacht wurde: <code>Gui.Opt("-Caption")</code></p>
<p>Weiter unten finden Sie das Beispiel einer Bildschirmanzeige (OSD), die zeigt, wie diese Methode praktisch eingesetzt werden kann.</p>
</div>

<div class="methodShort" id="MarginX">
<h2>MarginX</h2>
<p>Ermittelt oder setzt die Größe von horizontalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">ErmittelterWert := Gui.MarginX</pre>
<pre class="Syntax">Gui.MarginX := NeuerWert</pre>
<p><em>ErmittelterWert</em> ist die aktuelle Pixelanzahl des horizontalen Abstands.</p>
<p><em>NeuerWert</em> ist der Pixelabstand zwischen der linken/rechten Fensterseite und Steuerelementen, die aufgrund fehlender <a href="#XY">X-Koordinate</a> automatisch positioniert wurden. Dieser Wert bestimmt auch den horizontalen Abstand zwischen automatisch positionierten Steuerelementen. <a href="#Show">Gui.Show</a> wird diesen Wert einkalkulieren, wenn das Fenster erstellt und dessen Größe berechnet werden muss (wenn keine explizite Größe angegeben ist).</p>
<p>Standardmäßig ist dieser Abstand proportional zur Größe der aktuell ausgewählten <a href="#SetFont">Schriftart</a> (1.25 x Schriftbreite für Links &amp; Rechts).</p>
</div>

<div class="methodShort" id="MarginY">
<h2>MarginY</h2>
<p>Ermittelt oder setzt die Größe von vertikalen Abständen zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">ErmittelterWert := Gui.MarginY</pre>
<pre class="Syntax">Gui.MarginY := NeuerWert</pre>
<p><em>ErmittelterWert</em> ist die aktuelle Pixelanzahl des vertikalen Abstands.</p>
<p><em>NeuerWert</em> ist der Pixelabstand zwischen der oberen/unteren Fensterseite und Steuerelementen, die aufgrund fehlender <a href="#XY">Y-Koordinate</a> automatisch positioniert wurden. Dieser Wert bestimmt auch den vertikalen Abstand zwischen automatisch positionierten Steuerelementen. <a href="#Show">Gui.Show</a> wird diesen Wert einkalkulieren, wenn das Fenster erstellt und dessen Größe berechnet werden muss (wenn keine explizite Größe angegeben ist).</p>
<p>Standardmäßig ist dieser Abstand proportional zur Größe der aktuell ausgewählten <a href="#SetFont">Schriftart</a> (0.75 x Schrifthöhe für Unten &amp; Oben).</p>
</div>

<div class="methodShort" id="Opt">
<h2>Opt</h2>
<p>Setzt eine oder mehrere Optionen für das GUI-Fenster.</p>
<pre class="Syntax">Gui.<span class="func">Opt</span>(Optionen)
Gui.<span class="func">Options</span>(Optionen)</pre>
<dl>
  <dt>Optionen</dt><dd><p>Dieser Parameter kann <a href="../commands/GuiCreate.htm#Options">Optionen</a> enthalten, die von <a href="../commands/GuiCreate.htm">GuiCreate</a> unterstützt werden.</p>
  <p>Aus Performance-Gründen ist es besser, alle Optionen zu setzen, bevor das Fenster erstellt wird (das heißt, bevor andere Methoden wie <a href="#Add">Gui.Add</a> verwendet werden).</p></dd>
</dl>
</div>

<div class="methodShort" id="FocusedCtrl">
<h2>FocusedCtrl</h2>
<p>Ermittelt das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten GUI-Steuerelements.</p>
<pre class="Syntax">GuiCtrlObj := Gui.FocusedCtrl</pre>
<p>Hinweis: Dieser Unterbefehl funktioniert nur, wenn das Fenster weder minimiert noch versteckt ist.</p>
</div>

<div class="methodShort" id="Menu">
<h2>Menu</h2>
<p>Stattet das Fenster mit einer Menüleiste aus.</p>
<pre class="Syntax">Gui.Menu := Menüname</pre>
<p><em>Menüname</em> ist der Name eines gewöhnlichen Menüs, das via <a href="../commands/Menu.htm">Menu</a>-Funktion erstellt wurde. Zum Beispiel:</p>
<pre>Menu("Dateimenü", "Add", "Ö&amp;ffnen<a href="../misc/EscapeChar.htm">`t</a>Ctrl+F", "MenüDateiÖffnen")  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Menu("Dateimenü", "Add", "&amp;Beenden", "MenuHandler")
Menu("Dateimenü", "Add", "Inf&amp;o", "MenuHandler")
Menu("MeineMenüleiste", "Add", "&amp;Datei", ":Dateimenü")  <em>; Fügt die oben erstellten Untermenüs hinzu.</em>
Menu("MeineMenüleiste", "Add", "&amp;?", ":Hilfsmenü")
<strong>Gui.Menu := "MeineMenüleiste"</strong></pre>
<p>Auf der ersten Zeile oben sieht man <code>Ö&amp;ffnen</code> in Kombination mit <code>Ctrl+F</code> (mit einem Tabulatorzeichen dazwischen). Diese Schreibweise ermöglicht dem Benutzer, ein Tastenkürzel zu drücken, um den Menüpunkt zu aktivieren, ohne eine langwierige Navigation über sich ergehen zu lassen. Tastenkürzel, die die Standard-Modifikatoren Ctrl, Alt und Shift enthalten, werden automatisch als <em>Keyboard Accelerator</em> für das GUI registriert. Keyboard Accelerators ohne Modifikatoren können nur durch ungewöhnliche Mitteln wie IME oder ALT+NNNN ausgelöst werden.</p>
<p>Wenn eine bestimmte Tastenkombination nicht wie erwartet automatisch funktioniert, gäbe es die Alternative, einen <a href="../commands/_IfWinActive.htm">kontextabhängigen Hotkey</a> zu verwenden. Beachten Sie aber, dass solche Hotkeys üblicherweise nicht durch <a href="../commands/Send.htm">Send</a> ausgelöst werden können und dass es zu Komplikationen mit anderen Skripten kommen kann.</p>
<p>Mit <code>Gui.Menu := ""</code> (also eine leere Zeichenkette zuweisen) kann die aktuelle Menüleiste des Fensters entfernt werden.</p>
<p>Ein Menü, das als Menüleiste verwendet wurde, sollte später nicht als Popup-Menü oder Untermenü benutzt werden. Menüleisten benötigen intern ein anderes Format (allerdings gilt diese Einschränkung nicht für ihre Untermenüs). Umgehen Sie dieses Problem einfach, indem Sie zweimal das gleiche Menü erstellen und eines davon der Menüleiste zuweisen.</p>
<p>Das Anwenden von destruktiven <a href="../commands/Menu.htm">Menu-Unterbefehlen</a> wie Delete und DeleteAll auf eine Menüleiste (und in einigen Fällen auf ihre Untermenüs) ist wirkungslos und verursacht eine Fehlermeldung (sofern <a href="../commands/Menu.htm">UseErrorLevel</a> nicht aktiv ist). Führen Sie die folgenden Schritte durch, um solche Änderungen vornehmen zu können: 1) entfernen Sie die Menüleiste mit <code>Gui.Menu := ""</code>; 2) führen Sie die gewünschte Änderungen durch; 3) fügen Sie die Menüleiste via <code>Gui.Menu := "MeineMenüleiste"</code> wieder hinzu.</p></div>

<div class="methodShort" id="Minimize">
<h2>Minimize</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und minimiert es.</p>
<pre class="Syntax">Gui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h2>Maximize</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und maximiert es.</p>
<pre class="Syntax">Gui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Restore">
<h2>Restore</h2>
<p>Macht das Fenster wieder sichtbar (falls notwendig) und stellt dessen ursprünglichen Zustand wieder her, falls es zuvor minimiert oder maximiert war.</p>
<pre class="Syntax">Gui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="Pos">
<h2>Pos</h2>
<p>Ermittelt die Position und Größe des GUI-Fensters.</p>
<pre class="Syntax">PosGrößeObj := Gui.Pos</pre>
<p><em>PosGrößeObj</em> ist ein <a href="../Objects.htm">Objekt</a> mit den Keys <strong>X</strong> (X-Koordinate), <strong>Y</strong> (Y-Koordinate), <strong>W</strong> (Breite) und <strong>H</strong> (Höhe). Die Koordinaten sind die obere linke Ecke des Fensters. Breite ist der horizontale Abstand zwischen dem linken und rechten Fensterrand, und Höhe der vertikale Abstand zwischen dem oberen und unteren Fensterrand (in Pixel).</p>
</div>

<div class="methodShort" id="ClientPos">
<h2>ClientPos</h2>
<p>Ermittelt die Position und Größe des Clientbereichs eines GUI-Fensters.</p>
<pre class="Syntax">PosGrößeObj := Gui.ClientPos</pre>
<p><em>PosGrößeObj</em> ist ein <a href="../Objects.htm">Objekt</a> mit den Keys <strong>X</strong> (X-Koordinate), <strong>Y</strong> (Y-Koordinate), <strong>W</strong> (Breite) und <strong>H</strong> (Höhe). Die Koordinaten sind die obere linke Ecke des Fenster-Clientbereich, das der Bereich ohne Titelleiste, Menüleiste und Rahmen ist. Breite ist der horizontale Abstand zwischen dem linken und rechten Rand des Clientbereichs, und Höhe der vertikale Abstand zwischen dem oberen und unteren Rand (in Pixel).</p>
</div>

<div class="methodShort" id="Flash">
<h2>Flash</h2>
<p>Lässt die Taskleistenschaltfläche des Fensters einmal aufblinken.</p>
<pre class="Syntax">Gui.<span class="func">Flash</span>(<span class="optional">Blinken := True</span>)</pre>
<dl>
  <dt>Blinken</dt><dd>Wenn dieser Parameter fehlt oder True ist, wird die Taskleistenschaltfläche des Fensters aufblinken. Dazu wird die Farbe der Titelleiste und/oder der Taskleistenschaltfläche (falls vorhanden) invertiert. Geben Sie False an, um die Originalfarben der Titelleiste und Taskleistenschaltfläche wiederherzustellen (die tatsächliche Auswirkung variiert aber je nach Betriebssystemversion).</dd>
</dl>
<p>Das folgende Beispiel lässt das Fenster dreimal aufblinken, weil jedes Paar von "Gui Flash" die Farben des Fensters invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui.Flash
    Sleep 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>
</div>

<div class="methodShort" id="Hwnd">
<h2>Hwnd</h2>
<p>Ermittelt das HWND (Window Handle) des GUI-Fensters.</p>
<pre class="Syntax">AktuellesHwnd := Gui.Hwnd</pre>
<p>Das HWND eines GUI wird oft in Verbindung mit <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/PostMessage.htm">SendMessage</a> und <a href="../commands/DllCall.htm">DllCall</a> verwendet. Außerdem kann es direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-Fenstertitel</a> benutzt werden.</p></div>

<div class="methodShort" id="Title">
<h2>Titel</h2>
<p>Ermittelt oder setzt den Titel des GUI-Fensters.</p>
<pre class="Syntax">ErmittelterTitel := Gui.Title</pre>
<pre class="Syntax">Gui.Title := NeuerTitel</pre>
</div>

<div class="methodShort" id="Name">
<h2>Name</h2>
<p>Ermittelt oder setzt einen benutzerdefinierten Namen für das GUI-Fenster.</p>
<pre class="Syntax">ErmittelterName := Gui.Name</pre>
<pre class="Syntax">Gui.Name := NeuerName</pre>
</div>

<div class="methodShort" id="Control">
<h2>Control</h2>
<p>Ermittelt ein <a href="GuiControl.htm">GuiControl-Objekt</a>, das mit dem angegebenen Namen, ClassNN oder HWND verknüpft ist.</p>
<pre class="Syntax">GuiCtrlObj := Gui.Control<span class="optional">Name</span></pre>
</div>

<div class="methodShort" id="_NewEnum">
<h2>_NewEnum</h2>
<p>Ermöglicht es, Steuerelemente des GUI-Fensters schrittweise durchzugehen.</p>
<pre class="Syntax">Enum := Gui._<span class="func">NewEnum</span>()</pre>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zurück, um das HWND und <a href="GuiControl.htm">GuiControl-Objekt</a> von jedem Steuerelement innerhalb einer GUI schrittweise durchzugehen.</p>
  <p>Diese Methode wird in der Regel nicht direkt, sondern über die <a href="../commands/For.htm">For-Schleife</a> aufgerufen. Zum Beispiel:</p>
  <pre>For Hwnd, GuiCtrlObj in GuiObj
  MsgBox "Steuerelement #" A_Index " ist " GuiCtrlObj.ClassNN</pre>
</div>

</body>
</html>
