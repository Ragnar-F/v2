<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Grundlegendes Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Ein grundlegendes Objekt bietet eine Schnittstelle zum Durchführen von Aktionen wie z. B. Keys einfügen oder entfernen, Anzahl der Keys abrufen, Objekt klonen, etc." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Object</h1>

<p class="warning"><strong>Hinweis:</strong> Diese Dokumentation umfasst sowohl das seit v2.0-a103 geltende Verhalten als auch einige geplante Änderungen. Einzelheiten finden Sie unter <a href="https://www.autohotkey.com/boards/viewtopic.php?f=37&amp;t=57591">Objects (Forum-Thread)</a>.</p>
<p>In AutoHotkey ist der grundlegende Objektdatentyp ein assoziatives Array, dessen Verhalten <a href="../Objects.htm#Custom_Objects">individuell angepasst werden kann</a>. In dieser und älteren Versionen von AutoHotkey sind alle Objekte, die mit <code>{}</code>, <code>[]</code>, <code>Object()</code> und <code>Array()</code> erstellt wurden, standardmäßig vom gleichen Typ und unterstützen die gleichen Methoden und Eigenschaften.</p>
<p>In einer zukünftigen Version wird dieses Objekt in verschiedene Typen aufgeteilt: Array, Map und Object. Skript-Autoren können mit der Vorbereitung beginnen, indem sie auf Methoden verzichten, die darauf basieren, wie das Objekt erstellt wurde oder wie es verwendet werden soll.</p>
<ul>
  <li><code>[]</code>, <code>Array()</code> und <a href="../Functions.htm#Variadic">variadische Funktionen</a> erstellen ein Array-Objekt. <a href="../commands/StrSplit.htm">StrSplit</a> und <a href="../Variables.htm#Args">A_Args</a> geben ebenfalls ein Array-Objekt zurück.</li>
  <li>Wenn das Objekt als assoziatives Array vorgesehen ist, muss das Skript aktualisiert werden, wenn der Map-Typ eingeführt wird. Erstellen Sie das Objekt erst einmal mit <code>{}</code> oder <code>Object()</code> und verwenden Sie nur die Map-Methoden oder allgemeine Methoden.</li>
  <li>Verwenden Sie beim Zugriff auf Eigenschaften immer <code>obj.<i>Identifikator</i></code> oder <code>obj.%<i>Ausdruck</i>%</code>, nicht <code>obj[<i>Ausdruck</i>]</code>. Letzteres sollte nur bei Elementen eines Arrays oder assoziativen Arrays angewendet werden.</li>
  <li>Verwenden Sie beim Zugriff auf assoziativen Array-Elemente immer <code>obj[<i>Ausdruck</i>]</code>, nicht <code>obj.<i>DirektGeschrieben</i></code>.</li>
</ul>
<p>Weitere Änderungen an Skripten sind erforderlich. Einzelheiten finden Sie unter <a href="https://www.autohotkey.com/boards/viewtopic.php?f=37&amp;t=57591">Objects (Forum-Thread)</a>. Dieser Forum-Thread enthält ein Skript namens Object.ahk, das eine Vorschau auf die geplanten Änderungen liefert. Experimentieren Sie nach Belieben mit diesem Skript oder werfen Sie einen Blick auf dessen Dokumentation, um sich auf v2.0 vorzubereiten.</p>

<p><strong>Allgemeine Methoden:</strong></p>
<ul>
	<li><a href="#Clone">Clone</a></li>
	<li><a href="#NewEnum">_NewEnum</a></li>
	<li>Veraltet: <a href="#SetCapacity">SetCapacity</a> / <a href="#GetCapacity">GetCapacity</a></li>
	<li>Veraltet: <a href="#GetAddress">GetAddress</a></li>
</ul>
<p><strong>Array-Methoden:</strong></p>
<ul>
  <li><a href="#InsertAt">InsertAt</a> / <a href="#RemoveAt">RemoveAt</a></li>
  <li><a href="#Push">Push</a> / <a href="#Pop">Pop</a></li>
  <li><a href="#Length">Länge</a></li>
  <li>Veraltet: <a href="#MinMaxIndex">MinIndex / MaxIndex</a></li>
</ul>
<p><strong>Map-Methoden:</strong></p>
<ul>
  <li><a href="#Delete">Delete</a></li>
	<li><a href="#Count">Count</a></li>
	<li><a href="#HasKey">HasKey</a></li>
</ul>
<p><strong>Allgemeine Eigenschaften:</strong></p>
<ul>
	<li><a href="#Base">Base</a></li>
</ul>
<p><strong>Funktionen:</strong></p>
<ul>
	<li><a href="#GetBase">ObjGetBase</a></li>
	<li><a href="#SetBase">ObjSetBase</a></li>
	<li>Veraltet: <a href="#RawGet">ObjRawGet</a></li>
	<li>Veraltet: <a href="#RawSet">ObjRawSet</a></li>
</ul>
<p>Jede Methode hat außerdem eine äquivalente Funktion, mit der jedes <a href="../Objects.htm#Custom_Objects">benutzerdefinierte Verhalten</a>, das vom Objekt implementiert wurde, umgangen werden kann. Diese Funktionen sollten nur für diesen Zweck verwendet werden. Um so eine Funktion aufzurufen, fügt man vor dem Methodennamen "Obj" an (bei _NewEnum muss der Unterstrich weggelassen werden) und übergibt das Zielobjekt als ersten Parameter. Zum Beispiel:</p>
<pre>array := [1, 2, 3]
MsgBox ObjLength(array) " = " array.Length()</pre>
&nbsp;

<div class="methodShort" id="InsertAt"><h2>InsertAt</h2>
<p>Fügt einen oder mehrere Werte auf einer bestimmten Position innerhalb eines linearen Arrays ein.</p>
<pre class="Syntax">Object.<span class="func">InsertAt</span>(Pos, Value1 <span class="optional">, Value2, ... Value<i>N</i></span>)</pre>
<dl>
  <dt>Pos</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Position, auf der <em>Value1</em> eingefügt werden soll. Nachfolgende Werte werden auf Pos+1, Pos+2, etc. eingefügt.</p>
  </dd>
  <dt>Value1 ...</dt>
  <dd>
    <p>Eine oder mehrere Werte, die eingefügt werden sollen. Um einen Array mit Werten einzufügen, übergibt man <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p>
  </dd>
</dl>
<h3>Bemerkungen</h3>
<p>InsertAt ist das Gegenstück von <a href="#RemoveAt">RemoveAt</a>.</p>
<p>Da Objekte assoziative Arrays sind, ist <em>Pos</em> zudem der Integer-Key, der mit <em>Value1</em> verbunden wird. Alle Elemente, die sich auf oder rechts neben <em>Pos</em> befinden, werden in Abhängigkeit der exakten Value-Parameteranzahl nach rechts verschoben, sogar wenn einige davon fehlen (also wenn das Objekt ein lückenhaftes Array ist). Zum Beispiel:</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =&gt;  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =&gt;  ["A", "C", "B"]</em>

<em>; Lückenhafte/leere Elemente bleiben erhalten:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =&gt;  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =&gt;  [   , "B", "C"]</em></pre>
<p>InsertAt sollte nur verwendet werden, wenn die Integer-Keys des Objekts  Positionen in einem linearen Array repräsentieren. Enthält das Objekt willkürliche Integer-Keys wie IDs oder Handles, wird InsertAt wahrscheinlich unerwünschte Nebenwirkungen verursachen. Zum Beispiel:</p>
<pre>x := [], handleX := 0x4321, handleY := 0x1234
x.InsertAt(handleX, "A")
MsgBox x[handleX]  <em>; A - Okay</em>
x.InsertAt(handleY, "B")
MsgBox x[handleX]  <em>; Leer</em>
MsgBox x[handleX+1]  <em>; Dies ist die neue "Position" von "A"</em></pre>
<p>InsertAt hat keinen Effekt auf Zeichenketten- oder Objekt-Keys, demzufolge kann es ohne Probleme bei Objekten mit unterschiedlichen Key-Typen verwenden werden.</p>
</div>

<div class="methodShort" id="RemoveAt"><h2>RemoveAt</h2>
<p>Entfernt Elemente auf der angegebenen Position in einem linearen Array.</p>
<pre class="Syntax">Object.<span class="func">RemoveAt</span>(Pos <span class="optional">, Länge</span>)</pre>
<dl>
  <dt>Pos</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Position des Wertes oder der Werte, die entfernt werden sollen.</p>
  </dd>
  
  <dt>Länge</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Länge des Wertebereichs, der entfernt werden soll. Elemente von <code>Pos</code> bis <code>Pos+Länge-1</code> werden entfernt. Lässt man diesen Parameter weg, wird nur ein Element entfernt.</p>
  </dd>
  
  <dt>Rückgabewert</dt>
  <dd><p>Lässt man <em>Länge</em> weg, wird der auf <em>Pos</em> entfernte Wert zurückgegeben (leer, wenn keine entfernt wurden). Ansonsten ist der Rückgabewert die Anzahl der entfernten Elemente, die Werte enthielten. Die Anzahl und <em>Länge</em> können bei einem lückenhaften Array unterschiedlich sein, aber sie geht immer von 0 bis <em>Länge</em>.</p></dd>
</dl>
<h3>Bemerkungen</h3>
<p>RemoveAt ist das Gegenstück der <a href="#InsertAt">InsertAt</a>.</p>
<p>Die restlichen Elemente auf der rechten Seite von <em>Pos</em> werden um den via <em>Länge</em> definierten Wert (oder standardmäßig um 1) nach links verschoben, selbst wenn einige Elemente im entfernten Bereich keine Werte haben. Zum Beispiel:</p>
<pre>x := ["A", "B"]
MsgBox x.RemoveAt(1)  <em>; A</em>
MsgBox x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox x[1]              <em>; C</em></pre>
<p>RemoveAt sollte nur verwendet werden, wenn die Integer-Keys des Objekts  Positionen in einem linearen Array repräsentieren. Enthält das Objekt willkürliche Integer-Keys wie IDs oder Handles, wird RemoveAt wahrscheinlich unerwünschte Nebenwirkungen verursachen. Zum Beispiel:</p>
<pre>x := {0x4321: "A", 0x1234: "B"}
MsgBox x.RemoveAt(0x1234) <em>; B</em>
MsgBox x[0x4321]          <em>; Leer</em>
MsgBox x[0x4321-1]        <em>; A</em></pre>
<p>RemoveAt hat keinen Effekt auf Zeichenketten- oder Objekt-Keys, demzufolge kann es ohne Probleme bei Objekten mit unterschiedlichen Key-Typen verwenden werden.</p>
</div>

<div class="methodShort" id="Push"><h2>Push</h2>
<p>Fügt Values an das Ende eines Arrays an.</p>
<pre class="Syntax">Object.<span class="func">Push</span>(<span class="optional"> Value, Value2, ..., Value<i>N</i> </span>)</pre>
<dl>
  <dt>Value ...</dt>
  <dd><p>Eine oder mehrere Werte, die eingefügt werden sollen. Um einen Array mit Werten einzufügen, übergibt man <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p></dd>
  <dt>Rückgabewert</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Position des zuletzt eingefügten Wertes. Kann negativ sein, wenn das Array nur Elemente bei negativen Indexen enthält.</p>
  </dd>
</dl>
<h3>Bemerkungen</h3>
<p>Der erste Wert wird auf Position 1 eingefügt, wenn das Array leer ist oder nur Zeichenketten- oder Objekt-Keys enthält.</p>
<p>Ansonsten wird der erste Wert auf <code>Object.MaxIndex() + 1</code> eingefügt, selbst wenn diese Position negativ oder null ist. Alternativ kann man, wenn das unerwünscht ist, besonders bei einem Objekt mit negativen Keys, <code>Object.InsertAt(Object.Length() + 1, ...)</code> benutzen.</p>
</div>

<div class="methodShort" id="Pop"><h2>Pop</h2>
<p>Entfernt und gibt das letzte Array-Element zurück.</p>
<pre class="Syntax">Value := Object.<span class="func">Pop</span>()</pre>
<p>Wenn es keine Array-Elemente gibt, ist der Rückgabewert eine leere Zeichenkette. Ansonsten ist es das gleiche wie:</p>
<pre>Value := Object.RemoveAt(Object.Length())</pre>
</div>

<div class="methodShort" id="Delete"><h2>Delete</h2>
<p>Entfernt Key-Value-Paare von einem Objekt.</p>
<pre class="Syntax">Object.<span class="func">Delete</span>(Key)
Object.<span class="func">Delete</span>(ErsterKey, LetzterKey)</pre>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Beliebiger einzelner Key.</p>
  </dd>
  <dt>ErsterKey, LetzterKey</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein gültiger Bereich von Integer- oder Zeichenketten-Keys, wo <em>ErsterKey</em> &lt;= <em>LetzterKey</em> gilt. Beide Keys müssen vom gleichen Typ sein.</p>
  </dd>
  <dt>Rückgabewert</dt>
  <dd><p>Bei nur einem Parameter wird der entfernte Wert zurückgegeben (leer, wenn es keinen gibt). Ansonsten ist der Rückgabewert die Anzahl der Keys, die gefunden und entfernt wurden.</p></dd>
</dl>
<h3>Bemerkungen</h3>
<p>Im Gegensatz zu <a href="#RemoveAt">RemoveAt</a> hat Delete keine Auswirkung auf  Key-Value-Paare, die es nicht entfernt. Zum Beispiel:</p>
<pre>x := ["A", "B"]
MsgBox x.RemoveAt(1)  <em>; A</em>
MsgBox x[1]           <em>; B</em>

x := ["A", "B"]
MsgBox x.Delete(1)    <em>; A</em>
MsgBox x[1]           <em>; Leer</em></pre>
</div>

<div class="methodShort" id="MinMaxIndex"><h2>MinIndex / MaxIndex</h2>
<p class="warning"><strong>Veraltet:</strong> Diese Methoden werden in zukünftigen Versionen nicht mehr verfügbar sein. Array-Objekte werden auf Index-Werte 1 bis Länge beschränkt. Map-Objekte unterstützen keine Array-ähnliche Funktionalität.</p>
<pre class="Syntax">MinIndex := Object.<span class="func">MinIndex</span>()
MaxIndex := Object.<span class="func">MaxIndex</span>()</pre>
<p>Sofern Integer-Keys vorhanden sind, gibt MinIndex den niedrigsten und MaxIndex den höchsten Key zurück. Ansonsten wird eine leere Zeichenkette zurückgegeben.</p></div>

<div class="methodShort" id="Length"><h2>Length</h2>
<pre class="Syntax">Länge := Object.<span class="func">Length</span>()</pre>
<p>Gibt die Länge eines linearen Arrays zurück, beginnend bei Position 1; also entweder der höchste positive Integer-Key innerhalb des Objekts, oder 0, wenn keine vorhanden sind.</p>
<pre>
MsgBox ["A", "B", "C"].Length()  <em>;  3</em>
MsgBox ["A",    , "C"].Length()  <em>;  3</em>
MsgBox {-10: 0, 10: 0}.Length()  <em>; 10</em>
MsgBox {-10: 0, -1: 0}.Length()  <em>;  0</em>
</pre></div>

<div class="methodShort" id="Count"><h2>Count</h2>
<pre class="Syntax">Anzahl := Object.<span class="func">Count</span>()</pre>
<p>Gibt die Anzahl der im Objekt vorhandenen Key-Value-Paare zurück.</p>
<pre>
MsgBox {A: 1, Z: 26}.Count()    <em>;  2</em>
MsgBox ["A", "B", "C"].Count()  <em>;  3</em>
MsgBox ["A",    , "C"].Count()  <em>;  2</em>
</pre>
</div>

<div class="methodShort" id="SetCapacity"><h2>SetCapacity</h2>
<p>Passt die Kapazität eines Objekts oder eines seiner Felder an.</p>
<p class="warning"><strong>Veraltet:</strong> Diese Methode wird in zukünftigen Versionen nicht mehr verfügbar sein. Verwenden Sie für binäre Daten das <a href="Buffer.htm">Buffer</a>-Objekt.</p>
<pre class="Syntax">Object.<span class="func">SetCapacity</span>(MaxElemente)
Object.<span class="func">SetCapacity</span>(Key, Bytegröße)</pre>
<dl>
	<dt>MaxElemente</dt>
	<dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl an Key-Value-Paaren, die das Objekt beinhalten soll, bevor es automatisch erweitert werden muss. Ist dieser Parameter kleiner als die aktuelle Anzahl an Key-Value-Paaren, wird stattdessen dieser Wert verwendet und ungenutzter Speicher freigegeben.</p></dd>
	<dt>Key</dt>
	<dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Beliebiger gültiger Key.</p>
  </dd>
	<dt>Bytegröße</dt>
	<dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die neue Größe in Bytes für den Zeichenketten-Zwischenspeicher des Feldes, ohne den 0-Terminator. Wenn das Feld nicht vorhanden ist, wird es erstellt. Ist <i>Bytegröße</i> eine 0, wird der Zwischenspeicher freigegeben, aber das leere Feld nicht entfernt. Ist <i>Bytegröße</i> kleiner als die aktuelle Größe, werden überschüssige Daten gekürzt; ansonsten werden alle vorhandenen Daten beibehalten.</p>
  </dd>
	<dt><strong>Rückgabe</strong></dt>
	<dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die neue Kapazität. Bei Misserfolg wird eine Ausnahme ausgelöst.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="GetCapacity"><h2>GetCapacity</h2>
<p class="warning"><strong>Veraltet:</strong> Diese Methode wird in zukünftigen Versionen nicht mehr verfügbar sein. Verwenden Sie für binäre Daten das <a href="Buffer.htm">Buffer</a>-Objekt.</p>
<pre class="Syntax">MaxElemente := Object.<span class="func">GetCapacity</span>()
Bytegröße := Object.<span class="func">GetCapacity</span>(Key)</pre>
<p>Gibt die Kapazität eines Objekts oder eines seiner Felder zurück.</p>
<p>Gibt eine leere Zeichenkette zurück, wenn das Feld nicht existiert oder keine Zeichenkette enthält.</p></div>

<div class="methodShort" id="GetAddress"><h2>GetAddress</h2>
<p class="warning"><strong>Veraltet:</strong> Diese Methode wird in zukünftigen Versionen nicht mehr verfügbar sein. Verwenden Sie für binäre Daten das <a href="Buffer.htm">Buffer</a>-Objekt.</p>
<pre class="Syntax">Ptr := Object.<span class="func">GetAddress</span>(Key)</pre>
<p>Gibt die aktuelle Adresse des Zeichenketten-Zwischenspeichers des Feldes zurück, wenn es einen hat. Wenn das Feld eine leere Zeichenkette enthält und eine Kapazität von Null hat, ist die Adresse nicht eindeutig und darf nicht geändert werden. Es wird eine Ausnahme ausgelöst, wenn das Feld eine reine Zahl oder ein Objekt enthält, oder nicht existiert.</p></div>

<div class="methodShort" id="NewEnum"><h2>_NewEnum</h2>
<pre class="Syntax">Enum := Object.<span class="func">_NewEnum</span>()</pre>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zurück, um Key-Value-Paare des Objekts zu enumerieren. Diese Methode wird in der Regel nicht direkt, sondern über die <a href="../commands/For.htm">For-Schleife</a> aufgerufen.</p>
<p class="warning"><strong>Hinweis:</strong> Das oben genannte gilt für v2.0-a103, aber es sind Änderungen an der Enumerationsschnittstelle geplant. Es wird eine Unterscheidung zwischen Array-Elemente, Eigenschaften und Methoden geben. Das Enumerieren von Eigenschaften oder Methoden erfordert einen expliziten Methodenaufruf, um den entsprechenden Enumerator zu erhalten. Einzelheiten finden Sie unter <a href="https://www.autohotkey.com/boards/viewtopic.php?f=37&amp;t=57591">Objects (Forum-Thread)</a>.</p>
</div>

<div class="methodShort" id="HasKey"><h2>HasKey</h2>
<pre class="Syntax">Object.<span class="func">HasKey</span>(Key)</pre>
<p>Gibt wahr zurück, wenn <i>Key</i> mit einem Value (auch "") innerhalb des <i>Objekts</i> verbunden ist, ansonsten falsch.</p></div>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<pre class="Syntax">Klon := Object.<span class="func">Clone</span>()</pre>
<p>Gibt eine flache Kopie des Objekts zurück.</p></div>

<div class="methodShort" id="Base"><h2>Base</h2>
<p>Ermittelt oder setzt das <a href="../Objects.htm#Custom_Objects">Base-Objekt</a> des Objekts.</p>
<pre class="Syntax">BaseObject := Object.Base</pre>
<pre class="Syntax">Object.Base := BaseObject</pre>
<p><em>BaseObject</em> muss ein Objekt oder eine leere Zeichenkette sein.</p>
<p>Eigenschaften und Methoden, die via Base-Objekt definiert werden, sind nur zugänglich, während dieses Base-Objekt in Gebrauch ist. Ändert man also <em>Object</em>'s base, würde man gleichzeitig auch die Auswahl an verfügbaren Eigenschaften und Methoden ändern.</p>
<p>Siehe auch: <a href="#GetBase">ObjGetBase</a>, <a href="#SetBase">ObjSetBase</a></p>
</div>

<div class="methodShort" id="RawGet"><h2>ObjRawGet</h2>
<p>Ermittelt den Wert, der einem bestimmten Key innerhalb von <em>Object</em> zugeordnet ist.</p>
<p class="warning"><strong>Veraltet:</strong> Diese Funktion wird möglicherweise in einer zukünftigen Version entfernt oder ersetzt. Es wird eine Unterscheidung zwischen Array-Elemente, Eigenschaften und Methoden geben. Diese Funktion wird nicht mehr benötigt.</p>
<pre class="Syntax">Value := <span class="func">ObjRawGet</span>(Object, Key)</pre>
<p>Wenn <em>Object</em> den <em>Key</em> nicht enthält, ist der Rückgabewert eine leere Zeichenkette. Es werden keine <a href="../Objects.htm#Meta_Functions">Meta-Funktionen</a> oder <a href="../Objects.htm#Custom_Classes_property">Eigenschaftsfunktionen</a> aufgerufen. Die Inhalte der Base-Objekte von <em>Object</em> werden nicht berücksichtigt. Da <a href="#Base">base</a> selbst <a href="../Objects.htm#base-key">standardmäßig</a> kein Key-Value-Paar sondern eine Eigenschaft ist, wird es normalerweise nicht zurückgegeben.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Object</em> vom falschen Typ ist.</p>
</div>

<div class="methodShort" id="RawSet"><h2>ObjRawSet</h2>
<p>Speichert oder überschreibt ein Key-Value-Paar im Objekt.</p>
<p class="warning"><strong>Veraltet:</strong> Diese Funktion wird möglicherweise in einer zukünftigen Version entfernt oder ersetzt. Es wird eine Unterscheidung zwischen Array-Elemente, Eigenschaften und Methoden geben. Diese Funktion wird nicht mehr benötigt.</p>
<pre class="Syntax"><span class="func">ObjRawSet</span> Object, Key, Value</pre>
<p>Diese Funktion wurde bereitgestellt, um den Skripten die Möglichkeit zu bieten, die __Set-<a href="../Objects.htm#Meta_Functions">Meta-Funktion</a> und <a href="../Objects.htm#Custom_Classes_property">Eigenschaften</a> zu umgehen. Falls dies nicht notwendig ist, sollte stattdessen eine normale Zuweisung verwendet werden. Zum Beispiel: <code>Object[Key] := Value</code></p>
<p>Da der Zweck darin besteht, Meta-Funktionen zu umgehen, ist dies nur eine Funktion, keine Methode. Das Aufrufen einer internen Methode ruft generell auch die __Call-Meta-Funktion auf.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Object</em> vom falschen Typ ist.</p>
</div>

<div class="methodShort" id="GetBase"><h2>ObjGetBase</h2>
<p>Gibt das <a href="../Objects.htm#Custom_Objects">Base-Objekt</a> des Objekts zurück.</p>
<pre class="Syntax">BaseObject := <span class="func">ObjGetBase</span>(Object)</pre>
<p>Es werden keine <a href="../Objects.htm#Meta_Functions">Meta-Funktionen</a> aufgerufen. Das base des Objekts wird auch dann zurückgegeben, wenn der Key "base" in das Objekt gespeichert worden ist (z. B. mit <a href="#RawSet">ObjRawSet</a> oder <a href="#SetCapacity">SetCapacity</a>). Es wird eine leere Zeichenkette zurückgegeben, wenn das Objekt kein base hat.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Object</em> vom falschen Typ ist.</p>
<p>Siehe auch: <a href="#Base">Base-Eigenschaft</a></p>
</div>

<div class="methodShort" id="SetBase"><h2>ObjSetBase</h2>
<p>Setzt das <a href="../Objects.htm#Custom_Objects">Base-Objekt</a> des Objekts.</p>
<pre class="Syntax"><span class="func">ObjSetBase</span>(Object, BaseObject)</pre>
<p>Es werden keine <a href="../Objects.htm#Meta_Functions">Meta-Funktionen</a> aufgerufen. Das base des Objekts wird auch dann gesetzt, wenn der Key "base" in das Objekt gespeichert worden ist (z. B. mit <a href="#RawSet">ObjRawSet</a> oder <a href="#SetCapacity">SetCapacity</a>). Es wird eine leere Zeichenkette zurückgegeben, wenn das Objekt kein base hat.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Object</em> vom falschen Typ ist oder wenn <em>BaseObject</em> kein Objekt oder eine leere Zeichenkette ist.</p>
<p>Siehe auch: <a href="#Base">Base-Eigenschaft</a></p>
</div>

</body>
</html>
