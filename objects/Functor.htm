<!DOCTYPE HTML>
<html>
<head>
<title>Funktionsobjekte</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Funktionsobjekte</h1>

<p>"Funktionsobjekt" bedeutet in der Regel folgendes:</p>
<ul>
  <li>Ein Verweis auf ein <a href="Func.htm">Func-Objekt</a>, das eine tatsächliche <a href="../Functions.htm">Funktion</a> repräsentiert; entweder eine Built-in- oder vom Skript definierte Funktion.</li>
  <li>Ein benutzerdefiniertes Objekt, das wie eine Funktion aufgerufen werden kann. Dies bezeichnet man manchmal auch als "Funktor".</li>
  <li>Jedes andere Objekt, das wie eine Funktion aufgerufen werden kann, wie z. B. ein <a href="#BoundFunc">BoundFunc-Objekt</a> oder ein JavaScript-Funktionsobjekt, zurückgegeben von einer COM-Methode.</li>
</ul>
<p>Funktionsobjekte können in Verbindung mit folgenden Dingen verwendet werden:</p>
<ul>
  <li><a href="../commands/Gui.htm#label">Gui-Steuerelement-Ereignisse</a> (g-Labels)</li>
  <li><a href="../commands/Hotkey.htm#Functor">Hotkey</a></li>
  <li><a href="../commands/Menu.htm#Functor">Menu</a></li>
  <li><a href="../commands/OnClipboardChange.htm">OnClipboardChange()</a></li>
  <li><a href="../commands/OnExit.htm">OnExit()</a></li>
  <li><a href="../commands/OnMessage.htm">OnMessage()</a></li>
  <li><a href="../commands/SetTimer.htm#Functor">SetTimer</a></li>
</ul>

<h2 id="User-Defined">Benutzerdefiniert</h2><!-- TODO: Explain how a user-defined object could be useful -->

<p>Benutzerdefinierte Funktionsobjekte müssen eine <em>Call</em>-Methode definieren, die die Implementierung von der "Funktion" enthält.</p>
<pre>class DeinKlassenname {
    Call(a, b) {  <em>; Deklariere Parameter je nach Bedarf, oder ein <a href="../Functions.htm#Variadic">Array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<h3 id="User-Defined-Examples">Beispiele</h3>
<p>Das folgende Beispiel definiert ein Funktions-Array, das aufgeruft werden kann; wenn man das Array aufruft, wird es jedes seiner Elemente nacheinander aufrufen.</p>
<pre>class FuncArrayType {
    Call(obj, params*) {
        <em>; Ruft eine Liste mit Funktionen auf.</em>
        Loop % this.Length()
            this[A_Index].Call(params*)
    }
}

<em>; Erstellt ein Array mit Funktionen.</em>
funcArray := new FuncArrayType
<em>; Fügt ein paar Funktionen für das Array hinzu (kann jederzeit gemacht werden).</em>
funcArray.Push(Func("One"))
funcArray.Push(Func("Two"))
<em>; Erstellt ein Objekt, das das Array als Methode benutzt.</em>
obj := {method: funcArray}
<em>; Ruft die Methode auf.</em>
obj.method("foo", "bar")

One(param1, param2) {
    ListVars
    MsgBox
}
Two(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFunc-Objekt</h2>
<p>Verhält sich wie eine Funktion, aber übergibt nur vordefinierte Parameter an eine andere Funktion.</p>
<p>Es gibt zwei Möglichkeiten, wie BoundFunc-Objekte erstellt werden können:</p>
<ul>
  <li>Durch Aufrufen der <a href="Func.htm#Bind">Func.Bind()</a>-Methode, die Parameterwerte an eine Funktion bindet.</li>
  <li>Durch Aufrufen der <a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a>-Funktion, die Parameterwerte und Methodennamen an ein Zielobjekt bindet.</li>
</ul>
<p>Im unteren Beispiel wird gezeigt, wie BoundFunc-Objekte aufgerufen werden können. Anderen Methoden werden nicht unterstützt. Wenn das BoundFunc-Objekt aufgerufen wird, ruft es die Funktion oder Methode auf, an der es gebunden wurde, und übergibt alle gebundenen Parameter, gefolgt von denen, die vom Aufrufer übergeben wurden. Zum Beispiel:</p>
<pre>fn := Func("EchteFn").Bind(1)

%fn%(2)    <em>; Zeigt "1, 2"</em>
fn.Call(3) <em>; Zeigt "1, 3"</em>

EchteFn(a, b) {
    MsgBox %a%, %b%
}</pre>
<p>Mit <a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a> kann eine Methode mit einem Objekt verbunden werden, wenn es nicht möglich ist, einen Verweis auf die Methode selbst abzurufen. Zum Beispiel:</p>
<pre>Datei := FileOpen(A_ScriptFullPath, "r")
ZeileAbrufen := ObjBindMethod(Datei, "ReadLine")
MsgBox % %ZeileAbrufen%()  <em>; Zeigt die erste Zeile dieser Datei.</em></pre>
<p>Ein komplexeres Beispiel findest du bei <a href="../commands/SetTimer.htm#ExampleClass">SetTimer</a>.</p>

</body>
</html>
