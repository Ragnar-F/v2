<!DOCTYPE HTML>
<html lang="de">
<head>
<title>File-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das File-Objekt bietet eine Schnittstelle für eine Datei zum Durchführen von Aktionen wie das Lesen oder Schreiben von Daten oder zum Abrufen oder Setzen von Werten wie die Länge." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>File-Objekt</h1>

<p>Ermöglicht eine Schnittstelle für die Dateibearbeitung. <a href="../commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</p>

<h2 id="Members">Objektelemente</h2>
<p>Eigenschaften:</p>
<ul>
  <li><a href="#Position">Position / Pos</a>: Ermittelt oder setzt die Position des Dateizeigers.</li>
  <li><a href="#Length">Length</a>: Ermittelt oder bestimmt die Größe der Datei.</li>
  <li><a href="#AtEOF">AtEOF</a>: Ermittelt einen Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat.</li>
  <li><a href="#Encoding">Encoding</a>: Ermittelt oder setzt die Textcodierung für das File-Objekt.</li>
  <li><a href="#Handle">Handle</a>: Ermittelt ein System-Datei-Handle, das für DllCall verwendet werden kann.</li>
</ul>
<p>Methoden:</p>
<ul>
  <li><a href="#Read">Read</a>: Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#Write">Write</a>: Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#ReadLine">ReadLine</a>: Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#WriteLine">WriteLine</a>: Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</li>
  <li><a href="#ReadNum">Read<em>Zahlentyp</em></a>: Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#WriteNum">Write<em>Zahlentyp</em></a>: Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</li>
  <li><a href="#RawRead">RawRead</a>: Liest unbearbeitete Binärdaten aus der Datei in den Speicher. Falls eine Variable angegeben ist, dann wird sie je nach Bedarf automatisch erweitert.</li>
  <li><a href="#RawWrite">RawWrite</a>: Schreibt unbearbeitete Binärdaten in die Datei.</li>
  <li><a href="#Seek">Seek</a>: Verschiebt den Dateizeiger. Lässt man den zweiten Parameter weg, ist es das gleiche wie <code>File.Pos := Distanz</code>.</li>
  <li><a href="#Close">Close</a>: Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf.</li>
</ul>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zeichenkette := File.<span class="func">Read</span>(<span class="optional">Zeichen</span>)</pre>
<dl>
  <dt>Zeichen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der zu lesenden Zeichen. Lässt man diesen Parameter weg, wird der Rest der Datei gelesen und als Zeichenkette zurückgegeben. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erzeugt wurde, bewirkt das Weglassen des Parameters, dass die Methode fehlschlägt oder nur die aktuell verfügbaren Daten zurückgibt.</p>
  </dd>
</dl>
<p><strong>Rückgabewert</strong> ist eine Zeichenkette.</p>
</div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.<span class="func">Write</span>(Zeichenkette)</pre>
<dl>
  <dt>Zeichenkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die geschrieben werden soll.</p>
  </dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</p>
</div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Textzeile := File.<span class="func">ReadLine</span>()</pre>
<p><strong>Rückgabewert</strong> ist eine Textzeile ohne Zeilenende.</p>
<p>Es können Zeilen gelesen werden, die bis zu 65534 Zeichen lang sind. Wenn eine Zeile diese Länge überschreitet, wird der Rest der Zeile durch nachfolgende Aufrufe dieser Methode zurückgegeben.</p></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</p>
<pre class="Syntax">File.<span class="func">WriteLine</span>(<span class="optional">Zeichenkette</span>)</pre>
<dl>
  <dt>Zeichenkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine optionale Zeichenkette, die geschrieben werden soll.</p>
  </dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</p>
</div>

<div class="methodShort" id="ReadNum"><h2>Read<i>Zahlentyp</i></h2>
<p>Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zahl := File.Read<i>Zahlentyp</i>()</pre>
<p><em>Zahlentyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie die von <a href="../commands/DllCall.htm#types">DllCall</a>.</p>
<p><strong>Rückgabewert</strong> ist eine Zahl, wenn das Lesen erfolgreich war, oder eine leere Zeichenkette bei Misserfolg. Wenn die Anzahl der gelesenen Bytes ungleich 0, aber kleiner als die Größe von <em>Zahlentyp</em> ist, werden die fehlenden Bytes als 0 angesehen.</p>
</div>

<div class="methodShort" id="WriteNum"><h2>Write<i>Zahlentyp</i></h2>
<p>Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.Write<i>Zahlentyp</i>(Zahl)</pre>
<dl>
  <dt>Zahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a> oder <a href="../Concepts.htm#numbers">Float</a></p>
    <p>Eine Zahl, die geschrieben werden soll.</p>
  </dd>
</dl>
<p><em>Zahlentyp</em> ist entweder UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float. Diese Typennamen haben die gleiche Bedeutung wie die von <a href="../commands/DllCall.htm#types">DllCall</a>.</p>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die geschrieben wurden. Zum Beispiel wird WriteUInt bei Erfolg eine 4 zurückgeben.</p>
</div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Liest unbearbeitete Binärdaten aus der Datei in den Speicher.</p>
<pre class="Syntax">File.<span class="func">RawRead</span>(Puffer <span class="optional">, Bytes</span>)</pre>
<dl>
  <dt>Puffer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a>, <a href="../Concepts.htm#variables">Variable</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="../objects/Buffer.htm">Buffer</a>-ähnliches Objekt, eine Variable oder Speicheradresse, in der die Daten gespeichert werden sollen.</p>
    <p>Es wird empfohlen, in einen von <a href="../commands/BufferAlloc.htm">BufferAlloc</a> erstellten <a href="Buffer.htm">Puffer</a> zu lesen. Lässt man <em>Bytes</em> weg, wird standardmäßig die Größe des Puffers verwendet. Es wird eine Ausnahme ausgelöst, wenn <em>Bytes</em> die Größe des Puffers überschreitet.</p>
    <p>Um die Daten zu einer Speicheradresse zu lesen, übergibt man einen reinen Integer wie <code>&amp;Variable + Offset</code> oder eine Variable, die einen reinen Integer enthält. In diesem Fall muss <em>Bytes</em> auch angegeben werden.</p>
    <p class="warning"><strong>Veraltet:</strong> Um die Daten in eine Variable zu lesen, übergibt man eine Variable, die entweder leer ist oder eine Zeichenkette enthält. Lässt man <em>Bytes</em> weg, wird standardmäßig die Kapazität der Variable verwendet. Wenn <em>Bytes</em> größer als die Kapazität der Variable ist, wird die Variable erweitert. Nachdem die Daten gelesen wurden, wird die Länge der Variable auf die Zeichenkettenlänge der Daten gesetzt (aufgerundet auf eine ganze Zahl).</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der zu lesenden Bytes. Dieser Parameter ist optional, wenn <em>Puffer</em> ein Objekt oder (veraltet) eine Zeichenkettenvariable ist; ist dies nicht der Fall, muss er angegeben werden.</p>
  </dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die gelesen wurden.</p>
</div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Schreibt unbearbeitete Binärdaten in die Datei.</p>
<pre class="Syntax">File.<span class="func">RawWrite</span>(Daten <span class="optional">, Bytes</span>)</pre>
<dl>
  <dt>Daten</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a>, <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein <a href="../objects/Buffer.htm">Buffer</a>-ähnliches Objekt oder eine Zeichenkette mit binären Daten, oder eine Speicheradresse. Wenn ein Objekt oder eine Zeichenkette angegeben ist, ist <em>Bytes</em> optional und verwendet standardmäßig die Größe des Puffers oder der Zeichenkette. Ansonsten muss <em>Bytes</em> auch angegeben werden.</p>
    <p>Um Daten von einer bestimmten Speicheradresse zu schreiben, übergibt man einen reinen Integer wie <code>&amp;Variable + Offset</code> oder eine Variable, die einen reinen Integer enthält.</p>
  </dd>
  <dt>Bytes</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die maximale Anzahl der zu schreibenden Bytes. Dieser Parameter ist optional, wenn <em>Daten</em> ein Objekt oder eine Zeichenkette ist; ist dies nicht der Fall, muss er angegeben werden.</p>
  </dd>
</dl>
<p><strong>Rückgabewert</strong> ist die Anzahl der Bytes, die geschrieben wurden.</p>
</div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>Verschiebt den Dateizeiger.</p>
<pre class="Syntax">File.<span class="func">Seek</span>(Distanz <span class="optional">, Ausgangspunkt := 0</span>)
</pre>
<dl>
  <dt>Distanz</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Anzahl der Bytes, die zurückgelegt werden sollen. Niedrigere Werte sind näher an den Anfang der Datei.</p>
  </dd>
  <dt>Ausgangspunkt</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Startpunkt zum Verschieben des Dateizeigers. Kann nur eine der folgenden Angaben sein:</p>
    <ul>
      <li>0 (SEEK_SET): Anfang der Datei. <i>Distanz</i> muss 0 oder größer sein.</li>
      <li>1 (SEEK_CUR): Aktuelle Position des Dateizeigers.</li>
      <li>2 (SEEK_END): Ende der Datei. <i>Distanz</i> sollte normalerweise negativ sein.</li>
    </ul>
    <p>Lässt man diesen Parameter weg, wird als <i>Ausgangspunkt</i> standardmäßig SEEK_END verwendet, wenn die Distanz negativ ist, ansonsten SEEK_SET.</p></dd>
</dl>
<p><strong>Rückgabewert</strong> ist bei Erfolg ein Wert ungleich 0 und bei Misserfolg eine 0.</p>
</div>

<div class="methodShort" id="Position"><h2>Position</h2>
<p>Ermittelt oder setzt die aktuelle Position des Dateizeigers.</p>
<pre class="Syntax">Pos := File.Position
Pos := File.Pos</pre>
<pre class="Syntax">File.Position := NeuePos
File.Pos := NeuePos</pre>
<p>Äquivalent zu <code>File.Seek(NeuePos)</code>.</p>
<p>Die Position ist der Offset vom Anfang der Datei (in Bytes), wobei 0 das erste Byte ist. Wenn Daten in die Datei geschrieben oder aus ihr gelesen werden, springt der Dateizeiger nach diesen Daten automatisch auf das nächste Byte.</p>
</div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>Ermittelt oder bestimmt die Größe der Datei.</p>
<pre class="Syntax">Dateigröße := File.Length</pre>
<pre class="Syntax">File.Length := NeueGröße</pre>
<p><em>Dateigröße</em> und <em>NeueGröße</em> ist die Größe der Datei in Bytes.</p>
<p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein Pipe verweist, erzeugt wurde, wird es möglicherweise die derzeitig verfügbare Datenmenge im internen Pipe-Puffer zurückgeben. Allerdings ist dieses Verhalten nicht sichergestellt.</p></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
  <p>Ermittelt ein Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat, ansonsten 0.</p>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
  <p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erstellt wurde, könnte der Rückgabewert ohne Bedeutung sein, da solche Devices logischerweise kein "End of File" haben.</p></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf.</p>
<pre class="Syntax">File.<span class="func">Close</span>()</pre>
<p>&nbsp;Obwohl die Datei beim Freigeben des Objekts automatisch geschlossen wird, ist es empfehlenswert, die Datei so schnell wie möglich zu schließen.</p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>Ermittelt oder setzt die Textcodierung für das File-Objekt.</p>
<pre class="Syntax">ErmittelteCodierung := File.Encoding</pre>
<pre class="Syntax">File.Encoding := NeueCodierung</pre>
  <p><em>ErmittelteCodierung</em> und <em>NeueCodierung</em> ist ein numerischer Zeichensatzidentifikator (siehe <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">MSDN</a>) oder eine der folgenden Zeichenketten:</p>
  <ul>
	<li><code>UTF-8</code>: Unicode UTF-8, entspricht CP65001.</li>
	<li><code>UTF-16</code>: Unicode UTF-16 mit Little-Endian-Byte-Order, entspricht CP1200.</li>
	<li><code>CP<i>nnn</i></code>: Ein Zeichensatz mit dem numerischen Identifikator <i>nnn</i>.</li>
  </ul>
  <p><em>ErmittelteCodierung</em> ist nie ein Wert mit dem Suffix <code>-RAW</code>, egal wie die Datei geöffnet wurde oder ob es eine Byte-Order-Markierung (BOM) enthält. Das Setzen von <em>NeueCodierung</em> bewirkt nicht, dass ein BOM hinzugefügt oder entfernt wird. Normalerweise wird das BOM bereits beim Erstellen der Datei hinzugefügt.</p>
  <p>Man kann <em>NeueCodierung</em> auf <code>UTF-8-RAW</code> oder <code>UTF-16-RAW</code> setzen, allerdings wird der Suffix <code>-RAW</code> ignoriert. Dies gilt nur für <code>File.Encoding</code>, nicht für <a href="../commands/FileOpen.htm">FileOpen</a>.</p>
</div>

<div class="methodShort" id="Handle"><h2>Handle</h2>
  <p>Gibt ein System-Datei-Handle zurück, das für DllCall verwendet werden kann. Siehe <a href="http://msdn.microsoft.com/de-de/library/aa363858.aspx">CreateFile</a>.</p>
<pre class="Syntax">File.Handle</pre>
<p>File-Objekte zwischenspeichern gelesene und geschriebene Daten. Daten im internen Zwischenspeicher des Objekts werden erst auf das Laufwerk übertragen, wenn das Handle zurückgegeben wird. Enthält der Zwischenspeicher gelesene Daten von der Datei, werden diese Daten verworfen und der aktuelle Dateizeiger auf die logische Position (gekennzeichnet durch <code>File.Pos</code>) zurückgesetzt.</p></div>

</body>
</html>
