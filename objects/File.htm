<!DOCTYPE HTML>
<html>
<head>
<title>File-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>File-Objekt</h1>

<p>Ermöglicht eine Schnittstelle für die Dateibearbeitung. <a href="../commands/FileOpen.htm">FileOpen</a> gibt ein Objekt dieses Typs zurück.</p>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>Liest eine Zeichenfolge aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zeichenkette := File.Read([Zeichen])</pre>
<table class="info">
  <tr><td style="width:15%">Zeichen</td><td>Die maximale Anzahl der zu lesenden Zeichen. Fehlt dieser Parameter, wird der Rest der Datei gelesen und als Zeichenkette zurückgegeben. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erzeugt wurde, bewirkt das Weglassen des Parameters, dass die Methode fehlschlägt oder nur die aktuell verfügbaren Daten zurückgibt.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Eine Zeichenkette.</td></tr>
</table></div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>Schreibt eine Zeichenfolge in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.Write(Zeichenkette)</pre>
<table class="info">
  <tr><td style="width:15%">Zeichenkette</td><td>Eine Zeichenkette.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</td></tr>
</table></div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>Liest eine Textzeile aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zeile := File.ReadLine()</pre>
<table class="info">
  <tr><td style="width:15%"><b>Rückgabe</b></td><td width="85%">Eine Textzeile ohne Zeilenende.</td></tr>
</table>
<p>Es können Zeilen gelesen werden, die bis zu 65.534 Zeichen lang sind. Wenn eine Zeile diese Länge überschreitet, wird der Rest der Zeile durch nachfolgende Aufrufe dieser Methode zurückgegeben.</p></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>Schreibt eine Zeichenfolge gefolgt von <code>`n</code> oder <code>`r`n</code>, abhängig von den EOL-Flags, die zum Öffnen der Datei verwendet wurden. Der Dateizeiger wird dabei vorgerückt.</p>
<pre class="Syntax">File.WriteLine([Zeichenkette])</pre>
<table class="info">
  <tr><td style="width:15%">Zeichenkette</td><td>Eine optionale Zeichenkette.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Anzahl der Bytes (nicht Zeichen), die geschrieben wurden.</td></tr>
</table></div>

<div class="methodShort" id="ReadNum"><h2>Read<i>Num</i></h2>
<p>Liest eine Zahl aus der Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">Zahl := File.Read<i>Zahlentyp</i>()</pre>
<table class="info">
  <tr><td style="width:15%"><i>Zahlentyp</i></td>
    <td>Einen der folgenden Typen direkt als Teil der Funktion angegeben:<br>
    UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float.
    <p>Diese Typennamen haben die gleiche Bedeutung wie bei <a href="../commands/DllCall.htm#types">DllCall</a>.</p></td></tr>
  <tr><td><b>Rückgabe</b></td><td>Eine Zahl bei Erfolg, ansonsten eine leere Zeichenkette.</td></tr>
</table>
<p>Wenn eine Try-Anweisung aktiv ist und keine Bytes gelesen wurden, wird eine Ausnahme ausgelöst. Es wird keine Ausnahme ausgelöst, wenn mindestens ein Byte gelesen wurde, selbst wenn die Größe des angegebenen <i>Zahlentyp</i>s größer ist als die Anzahl der gelesenen Bytes. Stattdessen werden die fehlenden Bytes als Null angesehen.</p></div>

<div class="methodShort" id="WriteNum"><h2>Write<i>Num</i></h2>
<p>Schreibt eine Zahl in die Datei und rückt dabei den Dateizeiger vor.</p>
<pre class="Syntax">File.<i>WriteZahlentyp</i>(Zahl)</pre>
<table class="info">
  <tr><td style="width:15%"><i>Zahlentyp</i></td>
    <td>Einen der folgenden Typen direkt als Teil der Funktion angegeben:<br>
    UInt, Int, Int64, Short, UShort, Char, UChar, Double oder Float.
    <p>Diese Typennamen haben die gleiche Bedeutung wie bei <a href="../commands/DllCall.htm#types">DllCall</a>.</p></td></tr>
  <tr><td>Zahl</td><td>Eine Zahl.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Anzahl der Bytes, die geschrieben wurden. Zum Beispiel wird WriteUInt eine 4 bei Erfolg zurückgeben.</td></tr>
</table></div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Liest unbearbeitete Binärdaten aus der Datei in den Speicher. Falls eine Variable angegeben ist, dann wird sie je nach Bedarf automatisch erweitert.</p>
<pre class="Syntax">File.RawRead(VarOderAdresse, Bytes)</pre>
<table class="info">
  <tr><td style="width:15%">VarOderAdresse</td><td>Eine Variable oder Speicheradresse, in der die Daten kopiert werden. Die Verwendung hat Ähnlichkeit mit <a href="../commands/NumGet.htm">NumGet</a>.</td></tr>
  <tr><td>Bytes</td><td>Die maximale Anzahl der zu lesenden Bytes.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Anzahl der Bytes, die gelesen wurden.</td></tr>
</table>
<p>Wenn eine Try-Anweisung aktiv ist und <em>Bytes</em> ungleich Null ist, aber keine Bytes gelesen wurden, wird eine Ausnahme ausgelöst. Mit <a href="#AtEOF">AtEOF</a> kann man das verhindern, wenn nötig.</p></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Schreibt unbearbeitete Binärdaten in die Datei.</p>
<pre class="Syntax">File.RawWrite(VarOderAdresse, Bytes)</pre>
<table class="info">
  <tr><td style="width:15%">VarOderAdresse</td><td>Eine Variable, die die Daten oder die Adresse der Daten im Speicher enthält. Die Verwendung hat Ähnlichkeit mit <a href="../commands/NumPut.htm">NumPut</a>.</td></tr>
  <tr><td>Bytes</td><td>Die maximale Anzahl der zu schreibenden Bytes.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Anzahl der Bytes, die geschrieben wurden.</td></tr>
</table></div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>Verschiebt den Dateizeiger.</p>
<pre class="Syntax">File.Seek(Distanz [, Ausgangspunkt = 0])
File.Position := Distanz
File.Pos := Distanz</pre>
<table class="info">
  <tr><td style="width:15%">Distanz</td><td>Die Anzahl der Bytes, die zurückgelegt werden sollen. Niedrigere Werte sind näher an den Anfang der Datei.</td></tr>
  <tr><td>Ausgangspunkt</td><td>Startpunkt zum Verschieben des Dateizeigers. Kann nur eine der folgenden Angaben sein:<ul>
      <li>0 (SEEK_SET): Anfang der Datei. <i>Distanz</i> muss 0 oder größer sein.</li>
      <li>1 (SEEK_CUR): Aktuelle Position des Dateizeigers.</li>
      <li>2 (SEEK_END): Ende der Datei. <i>Distanz</i> sollte normalerweise negativ sein.</li>
    </ul>Wenn weggelassen, dann ist der <i>Ausgangspunkt</i> standardmäßig SEEK_END, solange die Distanz negativ ist, ansonsten SEEK_SET.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Ein Wert ungleich 0 bei Erfolg, ansonsten 0.</td></tr>
</table></div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<pre class="Syntax">Pos := File.Tell()
Pos := File.Position
Pos := File.Pos</pre>
<table class="info">
  <tr><td style="width:15%"><b>Rückgabe</b></td><td>Die aktuelle Position des Dateizeigers, wobei 0 der Anfang der Datei ist.</td></tr>
</table></div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>Ermittelt oder bestimmt die Größe der Datei.</p>
<pre class="Syntax">Dateigröße := File.Length
File.Length := NeueGröße</pre>
<table class="info">
  <tr><td style="width:15%">NeueGröße</td><td>Die neue Größe der Datei in Bytes.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Die Größe der Datei in Bytes.</td></tr>
</table>
<p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein Pipe verweist, erzeugt wurde, wird es möglicherweise die derzeitig verfügbare Datenmenge im internen Pipe-Puffer zurückgeben. Allerdings ist dieses Verhalten nicht sichergestellt.</p></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
<table class="info">
  <tr><td style="width:15%"><b>Rückgabe</b></td><td>Ein Wert ungleich 0, wenn der Dateizeiger das Ende der Datei erreicht hat, ansonsten 0.</td></tr>
</table>
<p>Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Diese Eigenschaft sollte nur mit einer realen Datei verwendet werden. Falls das File-Objekt von einem Handle, das auf ein nicht-suchendes Device (z. B. ein Konsolenpuffer oder Pipe) verweist, erstellt wurde, könnte der Rückgabewert ohne Bedeutung sein, da solche Devices logischerweise kein "End of File" haben.</p></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>Schließt die Datei, löscht alle Daten im Zwischenspeicher auf der Festplatte und hebt die Sperrungen auf. Obwohl die Datei beim Freigeben des Objekts automatisch geschlossen wird, ist es empfehlenswert, die Datei so schnell wie möglich zu schließen.</p>
<pre class="Syntax">File.Close()</pre>
<p><i>Keine Parameter oder Rückgabewerte.</i></p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>Ermittelt oder setzt die Textcodierung für das File-Objekt.</p>
<pre class="Syntax">Codierung := File.Encoding
File.Encoding := Codierung</pre>
<table class="info">
  <tr><td style="width:15%">Codierung</td><td>Eine numerische Zeichensatz-Kennung (siehe <a href="https://msdn.microsoft.com/de-de/library/dd317756.aspx">MSDN</a>) oder eine der folgenden Zeichenketten:<br>
  <ul>
	<li><code>UTF-8</code>: Unicode UTF-8, entspricht CP65001.</li>
	<li><code>UTF-16</code>: Unicode UTF-16 mit Little-Endian-Bytereihenfolge, entspricht CP1200.</li>
	<li><code>CP<i>nnn</i></code>: Ein Zeichensatz mit numerischer Kennung <i>nnn</i>.</li>
  </ul>
  <p><em>Codierung</em> gibt nie einen Wert mit dem Suffix <code>-RAW</code> zurück, egal wie die Datei geöffnet wurde oder ob es eine Bytereihenfolge (BOM) enthält. Das Setzen der <em>Codierung</em> bewirkt nicht, dass ein BOM hinzugefügt oder entfernt wird. Normalerweise wird das BOM bereits beim Erstellen der Datei hinzugefügt.</p>
  <p>Das Setzen der <em>Codierung</em> auf <code>UTF-8-RAW</code> oder <code>UTF-16-RAW</code> ist seit v1.1.15.04 möglich, aber der Suffix <code>-RAW</code> wird ignoriert. In früheren Versionen verhielten sich <code>UTF-8-RAW</code> und <code>UTF-16-RAW</code> wie eine ungültige 8-Bit-Codierung, und bewirkten, dass alle Nicht-ASCII-Zeichen verworfen wurden. Dies gilt nur für <code>File.Encoding</code>, nicht für <a href="../commands/FileOpen.htm">FileOpen()</a>.</p>
  </td></tr>
</table></div>

<div class="methodShort" id="Handle"><h2>__Handle</h2>
<pre class="Syntax">File.__Handle</pre>
<table class="info">
  <tr><td style="width:15%"><b>Rückgabe</b></td><td>Ein System-Datei-Handle, das für DllCall verwendet werden kann. Siehe <a href="http://msdn.microsoft.com/de-de/library/aa363858.aspx">CreateFile</a>.</td></tr>
</table>
<p>File-Objekte zwischenspeichern gelesene und geschriebene Daten. Daten im internen Zwischenspeicher des Objekts werden erst auf das Laufwerk übertragen, wenn das Handle zurückgegeben wird. Enthält der Zwischenspeicher gelesene Daten von der Datei, werden diese Daten verworfen und der aktuelle Dateizeiger auf die logische Position (gekennzeichnet durch <code>File.Pos</code>) zurückgesetzt.</p></div>

</body>
</html>
