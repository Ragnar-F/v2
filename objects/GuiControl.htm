<!DOCTYPE HTML>
<html>
<head>
<title>GuiControl-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl-Objekt</h1>
<p>Ermöglicht eine Schnittstelle zum Modifizieren von GUI-Steuerelementen und Abrufen ihrer Informationen. <a href="Gui.htm#Add">Gui.Add</a>, <a href="Gui.htm#Control">Gui.Control</a>,&nbsp;<a href="../commands/GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a> und <a href="Gui.htm#_NewEnum">Gui._NewEnum</a> geben ein Objekt dieses Typs zurück.</p>
<h4 id="Properties">Eigenschaften:</h4>
<ul>
  <li><a href="#ClassNN">ClassNN</a>: Ermittelt das ClassNN des Steuerelements.</li>
  <li><a href="#Enabled">Enabled</a>: Ermittelt den aktuellen Interaktionsstatus des Steuerelements, oder aktiviert oder deaktiviert ("ergraut") es.</li>
  <li><a href="#Focused">Focused</a>: Ermittelt den aktuellen Fokusstatus des Steuerelements.</li>
  <li><a href="#Gui">Gui</a>: Ermittelt das übergeordnete GUI-Fenster des Steuerelements.</li>
  <li><a href="#Hwnd">Hwnd</a>: Ermittelt das HWND des Steuerelements.</li>
  <li><a href="#Name">Name</a>: Ermittelt oder setzt den expliziten Namen des Steuerelements.</li>
  <li><a href="#Pos">Pos</a>: Ermittelt die Position und Größe des Steuerelements.</li>
  <li><a href="#Text">Text</a>: Ermittelt oder setzt den Text/die Beschriftung des Steuerelements.</li>
  <li><a href="#Type">Type</a>: Ermittelt den Typ des Steuerelements.</li>
  <li><a href="#Value">Value</a>: Ermittelt oder setzt neue Inhalte in ein Steuerelement, das einen Wert akzeptiert.</li>
  <li><a href="#Visible">Visible</a>: Ermittelt den aktuellen Sichtbarkeitsstatus des Steuerelements, oder zeigt oder versteckt es.</li>
</ul>
<h4 id="Methods">Methoden:</h4>
<ul>
  <li><a href="#Add">Add</a>: Erweitert die aktuelle Liste eines DropDownList-, ListBox-, ComboBox- oder Tab-Steuerelements mit den angegebenen Elementen.</li>
  <li><a href="#Choose">Choose</a>: Setzt die Auswahl innerhalb eines ListBox-, DropDownList-, ComboBox- oder Tab-Steuerelements auf ein Element, das mit dem angegebenen Wert übereinstimmt.</li>
  <li><a href="#Delete">Delete</a>: Löscht den angegebenen Eintrag oder alle Einträge eines ListBox-, DropDownList-, ComboBox- oder Tab-Steuerelements.</li>
  <li><a href="#Focus">Focus</a>: Setzt den Tastaturfokus auf das Steuerelement.</li>
  <li><a href="#Move">Move</a>: Verschiebt das Steuerelement und/oder ändert dessen Größe. </li>
  <li><a href="GuiOnEvent.htm">OnEvent</a>: Registriert eine Funktion oder Methode, die aufgerufen werden soll, wenn das entsprechende <a href="GuiOnEvent.htm#Control_Events">Ereignis</a> ausgelöst wird.</li>
  <li><a href="#Opt">Opt</a>: Setzt verschiedene Optionen und Styles, die das Aussehen und Verhalten des Steuerelements beeinflussen.</li>
  <li><a href="#SetFont">SetFont</a>: Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und/oder die Textfarbe des Steuerelements.</li>
  <li><a href="../commands/GuiControls.htm#DateTimeFormat">SetFormat</a>: Setzt das Anzeigeformat eines <a href="../commands/GuiControls.htm#DateTime">DateTime</a>-Steuerelements.</li>
  <li><a href="#UseTab">UseTab</a>: Bewirkt, dass danach erstelle Steuerelemente mit dem angegebenen Tab eines Tab-Steuerelements verknüpft werden.</li>
</ul>

<div class="methodShort" id="Type">
<h2>Type</h2>
<p>Ermittelt den Typ des Steuerelements.</p>
<pre class="Syntax">Type := GuiCtrl.Type</pre>
  <p>Um die komplette Liste der Steuerelementtypen einzusehen, siehe <a href="../commands/GuiControls.htm">GUI-Steuerelementarten</a>.</p>
</div>

<div class="methodShort" id="Hwnd">
<h2>Hwnd</h2>
<p>Ruft das Window Handle (HWND) des Steuerelements ab. </p>
<pre class="Syntax">Hwnd := GuiCtrl.Hwnd</pre>
<p>Das HWND eines Steuerelements benutzt man häufig in Verbindung mit <a href="../commands/PostMessage.htm">PostMessage</a>, <a href="../commands/PostMessage.htm">SendMessage</a> und <a href="../commands/DllCall.htm">DllCall</a>.</p>
</div>

<div class="methodShort" id="Name">
<h2>Name</h2>
<p>Ermittelt oder setzt den Namen des Steuerelements.</p>
<pre class="Syntax">ErmittelterName := GuiCtrl.Name</pre>
<pre class="Syntax">GuiCtrl.Name := NeuerName</pre>
<p>Der Name eines Steuerelements kann in Verbindung mit <a href="Gui.htm#Control">Gui.Control</a> benutzt werden, um dessen <a href="GuiControl.htm">GuiControl</a>-Objekt abzurufen. Bei den meisten eingabefähigen Steuerelementen wird der Name auch von <a href="Gui.htm#Submit">Gui.Submit</a> benutzt.</p>
</div>

<div class="methodShort" id="ClassNN">
<h2>ClassNN</h2>
<p>Ermittelt das ClassNN des Steuerelements.</p>
<pre class="Syntax">ClassNN := GuiCtrl.ClassNN</pre>
</div>

<div class="methodShort" id="Gui">
<h2>Gui</h2>
<p>Ermittelt das <a href="Gui.htm">Gui-Objekt</a> des GUI-Fensters, wo das Steuerelement enthalten ist.</p>
<pre class="Syntax">GuiObj := GuiCtrl.Gui</pre>
</div>

<div class="methodShort" id="Opt">
<h2>Opt</h2>
<p>Ermöglicht das Hinzufügen oder Entfernen von Optionen und Styles des Steuerelements.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Optionen)
GuiCtrl.<span class="func">Options</span>(Optionen)</pre>
<dl>
  <dt>Optionen</dt><dd>Entweder <a href="../commands/GuiControls.htm">steuerelement-spezifische</a> oder <a href="Gui.htm#OtherOptions">allgemeine</a> Optionen und Styles.</dd>
</dl>
<p>Im folgenden Beispiel wird das Steuerelement <a href="Gui.htm#Disabled">deaktiviert</a> und jegliche Änderungen am <a href="Gui.htm#Background">Hintergrund</a> rückgängig gemacht:</p>
<pre>MeinEdit.Opt("+Disabled -Background")</pre>
<p>Im nächsten Beispiel wird der OK-Button zum neuen Standard-Button gemacht:</p>
<pre>OKButton.Opt("+Default")</pre>
<p>Zwar werden <a href="../misc/Styles.htm">Styles</a> und erweiterte Styles auch erkannt, allerdings können ein paar von denen nicht angewendet oder entfernt werden, nachdem ein Steuerelement erstellt wurde. ErrorLevel wird auf 0 gesetzt, wenn mindestens eine der angegebenen Änderungen erfolgreich durchgeführt wurde. Ansonsten wird es auf 1 gesetzt, um zu zeigen, dass keine einzige Änderung angewendet werden konnte. Auch wenn eine Änderung erfolgreich angewendet wurde, hat das Steuerelement immer noch die Wahl, sie zu ignorieren.</p>
</div>

<div class="methodShort" id="Move">
<h2>Move</h2>
<p>Verschiebt das Steuerelement und/oder ändert dessen Größe, und kann optional eine Neuzeichnung erzwingen. </p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(Pos <span class="optional">, Zeichnen := False</span>)</pre>
<dl>
  <dt>Pos</dt><dd><p>Eine oder mehrere folgende Optionsbuchstaben (jede Zahl muss dezimal sein, nicht hexadezimal):</p>
  <p><strong>Xn</strong>: Ersetze <strong>n</strong> mit der neuen X-Koordinate, die relativ zum GUI-Fenster's Clientbereich ist (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen).</p>
  <p><strong>Yn</strong>: Ersetze <strong>n</strong> mit der neuen Y-Koordinate, die relativ zum GUI-Fenster's Clientbereich ist (siehe oben).</p>
  <p><strong>Wn</strong>: Ersetze <strong>n</strong> mit der neuen Breite des Steuerelements.</p>
  <p><strong>Hn</strong>: Ersetze <strong>n</strong> mit der neuen Höhe des Steuerelements.</p></dd>
  <dt>Zeichnen</dt><dd>Wenn dieser Parameter True ist, wird die Region des GUI-Fensters neugezeichnet, auf dem sich das Steuerelement befindet. Zwar kann dies zu ungewolltem Flackern führen, wenn es schnell und mehrmals hintereinander geschieht, allerdings werden dadurch Artefakte beim Zeichnen von bestimmten Steuerelementarten wie <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a> unterbunden.</dd>
</dl>
<h4>Beispiele</h4>
<pre>MeinEdit.Move("x10 y20 w200 h100", true)
MeinEdit.Move("x" VarX+10 " y" VarY+5 " w" VarW*2 " h" VarH*1.5)</pre>
</div>

<div class="methodShort" id="Focus">
<h2>Focus</h2>
<p>Setzt den Tastaturfokus auf das Steuerelement.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>Hinweis: Um Effektiv zu sein, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="Choose">
<h2>Choose</h2>
<p>Setzt die Auswahl innerhalb eines ListBox-, DropDownList-, ComboBox- oder Tab-Steuerelements auf ein Element, das mit dem angegebenen Wert übereinstimmt.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Wert)</pre>
<dl>
  <dt>Wert</dt><dd>
    <p>Dieser Parameter muss für das erste Element eine 1 sein, für das Zweite eine 2, und so weiter.</p>
    <p>Wenn <em>Wert</em> eine Zeichenkette ist (oder sogar eine numerische Zeichenkette), wird ein Element markiert, dessen führender Teil mit <em>Wert</em> übereinstimmt. Die Suche unterscheidet nicht zwischen Groß- und Kleinschreibung. Enthält das Steuerelement beispielsweise das Element "UNIX-Text", würde das Wort unix (kleingeschrieben) genügen, um es zu markieren. Bei einer <a href="../commands/GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> werden alle übereinstimmenden Elemente markiert.</p>
    <p>Wenn <em>Wert</em> eine 0 oder leer ist, wird die aktuelle Markierung entfernt.</p></dd>
</dl>
<p>Das folgende Beispiel zeigt, wie <u>alle</u> Elemente innerhalb einer <a href="../commands/GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> markiert oder demarkiert werden können:</p>
<pre>Gui.Opt("+LastFound")  <em>; Verhindert, dass unten der Fenstertitel angegeben werden muss.</em>
<a href="../commands/PostMessage.htm">PostMessage</a> 0x185, 1, -1, ListBox.ClassNN  <em>; Markiert alle ListBox-Elemente. 0x185 ist LB_SETSEL.</em>
<a href="../commands/PostMessage.htm">PostMessage</a> 0x185, 0, -1, ListBox.ClassNN  <em>; Demarkiert alle Elemente.</em>
ListBox.Choose(0)  <em>; Demarkiert alle Elemente.</em></pre>
<p>Im Gegensatz zu <a href="../commands/Control.htm#Choose">Control Choose</a> kann diese Methode keine <a href="GuiOnEvent.htm#Change">Change</a>- oder <a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a>-Ereignisse auslösen.</p>
</div>

<div class="methodShort" id="UseTab">
<h2>UseTab</h2>
<p>Bewirkt, dass danach erstelle Steuerelemente mit dem angegebenen Tab eines Tab-Steuerelements verknüpft werden.</p>
<pre class="Syntax">GuiCtrl.<span class="func">UseTab</span>(<span class="optional">Wert, GenaueÜbereinstimmung := False</span>)</pre>
<dl>
  <dt>Wert</dt><dd>Dieser Parameter muss für den ersten Tab eine 1 sein, für den Zweiten eine 2, und so weiter. Wenn <em>Wert</em> kein Integer ist, wird ein Tab benutzt, dessen führender Teil mit <em>Wert</em> übereinstimmt. Die Suche unterscheidet nicht zwischen Groß- und Kleinschreibung. Enthält das Steuerelement beispielsweise den Tab "UNIX-Text", würde das Wort unix (kleingeschrieben) genügen, um es zu benutzen. Wenn <em>Wert</em> eine 0 ist, eine leere Zeichenkette ist oder fehlt, werden nachfolgende Steuerelemente außerhalb des Tab-Steuerelements platziert.</dd>
  <dt>GenaueÜbereinstimmung</dt><dd>Wenn dieser Parameter True ist, muss <em>Wert</em> eine exakte Übereinstimmung sein, unabhängig von Groß-/Kleinschreibung.</dd>
</dl>
</div>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>Erweitert die aktuelle Liste eines DropDownList-, ListBox-, ComboBox- oder Tab-Steuerelements mit den angegebenen Elementen.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(ArrayOderListe)</pre>
<dl>
  <dt>ArrayOderListe</dt><dd>Eine mit senkrechten Strichen getrennte Liste von Einträgen (z. B. <code>"Rot|Grün|Blau"</code>) oder ein Array mit Einträgen (z. B. <code>["Rot", "Grün", "Blau"]</code>), die an das Ende der Liste des Steuerelements angefügt werden sollen. Um die Liste stattdessen zu ersetzen (zu überschreiben), muss <a href="#Delete">GuiCtrl.Delete</a> zuvor benutzt werden. Wenn man die senkrechten Striche benutzt, besteht die Möglichkeit, einer der Einträge vorab auswählen zu lassen - dazu müssen zwei senkrechte Striche nach diesem Element erfolgen (z. B. <code>"Rot|Grün||Blau"</code>). Ansonsten kann man <a href="#Choose">GuiCtrl.Choose</a> benutzen. Das Trennzeichen zwischen den Feldern muss nicht zwingend ein senkrechter Strich sein. Zum Beispiel wäre das Trennzeichen mithilfe von <code>Gui.Opt("+<a href="../commands/GuiCreate.htm#Delimiter">Delimiter</a>`n")</code> ein Zeilenumbruchszeichen, und mithilfe von <code>Gui.Opt("+DelimiterTab")</code> ein Tabulatorzeichen (`t).</dd>
</dl>
<p><strong>Siehe auch:</strong> <a href="../commands/ListView.htm#Add">ListView.Add</a>, <a href="../commands/TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Delete">
<h2>Delete</h2>
<p>Löscht den angegebenen Eintrag oder alle Einträge eines ListBox-, DropDownList-, ComboBox- oder Tab-Steuerelements.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Wert</span>)</pre>
<dl>
  <dt>Wert</dt><dd>Dieser Parameter muss für das erste Element eine 1 sein, für das Zweite eine 2, und so weiter. Wenn dieser Parameter fehlt, werden alle Einträge gelöscht.</dd>
</dl>
<p>Bei Tab-Steuerelementen sollte man beachten, dass die Untersteuerelemente eines Tabs mit ihren ursprünglichen Tab-Nummern verbunden bleiben; das heißt, dass sie nie mit dem eigentlichen Anzeigenamen des Tabs verknüpft sind. Aus diesem Grund wird sich die Tab-Nummer, zu der die Unterelemente gehören, nicht ändern, wenn ein Tab umbenannt oder entfernt wird. Würde man beispielsweise den zweiten Tab von den drei Tabs "Rot|Grün|Blau" mithilfe von <code>MeinTab.Delete(2)</code> entfernen, wären die Untersteuerelemente, die ursprünglich zu "Grün" gehörten, nun mit "Blau" verbunden. Aufgrund dieses Verhaltens sollte generell nur Tabs entfernt werden, die am Ende der Liste vorkommen. Tabs, die auf diese Weise entfernt werden, können später wieder hinzugefügt werden, so dass sie ihre ursprünglichen Steuerelemente zurückbekommen können.</p>
<p><strong>Siehe auch:</strong> <a href="../commands/ListView.htm#Delete">ListView.Delete</a>, <a href="../commands/TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Value">
<h2>Value</h2>
<p>Ermittelt oder setzt die Inhalte eines Steuerelements.</p>
<pre class="Syntax">ErmittelterWert := GuiCtrl.Value</pre>
<pre class="Syntax">GuiCtrl.Value := NeuerWert</pre>
  <p>Hinweis: Wenn das Steuerelement keinen Wert akzeptiert, wird <em>ErmittelterWert</em> leer sein und das Zuweisen von <em>NeuerWert</em> einen Fehler auslösen. Ungültige Werte lösen eine Ausnahme aus.</p>
  <p>Folgende Steuerelementtypen akzeptieren einen Wert:</p>

<h4><a href="../commands/GuiControls.htm#Picture">Picture</a></h4>
<p><em>ErmittelterWert</em> ist der Dateiname des Bildes, das ursprünglich zum Erstellen des Steuerelements benutzt wurde. Dieser Name ändert sich auch dann nicht, wenn ein neuer Bilddateiname angegeben ist.</p>
<p><em>NeuerWert</em> ist der Dateiname (oder <a href="../misc/ImageHandles.htm">Handle</a>) eines neuen Bildes, das geladen werden soll (siehe <a href="../commands/GuiControls.htm#Picture">Picture</a>, welche Dateitypen unterstützt werden). Direkt vor dem Dateinamen können Null oder mehrere der folgenden Optionen angegeben werden: <code>*wN</code> (Breite N), <code>*hN</code> (Höhe N) und <code>*IconN</code> (Symbolgruppennummer N in einer DLL- oder EXE-Datei). Im folgenden Beispiel wird das Standardsymbol aus der zweiten Symbolgruppe geladen - mit einer Breite von 100 Pixel und einer automatischen Höhe via "Seitenverhältnis beibehalten": <code>MeinBild.Value("*icon2 *w100 *h-1 C:\Meine Anwendung.exe")</code>. Mit <code>*w0 *h0</code> kann die aktuelle Breite und Höhe des Bildes beibehalten werden. Fehlt sowohl <code>*w</code> als auch <code>*h</code>, passt sich das Bild an die Steuerelementgröße an. Lädt man ein Symbol aus einer ICO-Datei mit mehreren Symbolen, bestimmt die Angabe einer Breite und Höhe zudem, welches Symbol geladen werden soll. Hinweis: Zwischen der letzten Option und dem Dateinamen selbst sollte nur ein einziges Leer- oder Tabulatorzeichen verwendet werden; weitere Leer- und Tabulatorzeichen werden als Teil des Dateinamens angesehen.</p>

<h4><a href="../commands/GuiControls.htm#Text">Text</a></h4>
<p><em>ErmittelterWert</em> ist der Text/die Beschriftung des Steuerelements.</p>
<p><em>NeuerWert</em> ist der neue Text des Steuerelements. Da sich das Steuerelement nicht automatisch erweitert, sollte man <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> verwenden, wenn das Steuerelement breiter gemacht werden muss.</p>

<h4><a href="../commands/GuiControls.htm#Edit">Edit</a></h4>
<p><em>ErmittelterWert</em> ist der aktuelle Inhalt des Steuerelements. Bei mehrzeiligen Steuerelementen wird jeder Zeilenumbruch im Text ein reines LF-Zeichen (`n) sein, statt das traditionelle CR+LF (`r`n), welches von Nicht-GUI-Funktionen wie <a href="../commands/ControlGetText.htm">ControlGetText</a> und <a href="../commands/ControlSetText.htm">ControlSetText</a> benutzt wird.</p>
<p><em>NeuerWert</em> ist der neue Inhalt. Bei mehrzeiligen Steuerelementen wird jedes LF-Zeichen (`n) in <em>NeuerWert</em>, das kein CR-Zeichen (`r) davor hat, automatisch in CR+LF (`r`n) umgewandelt, um es richtig darzustellen. Normalerweise muss man sich darum nicht kümmern, weil <code>Gui.Submit</code> oder beim Abrufen des Wertes diese Umwandlung automatisch rückgängig gemacht wird, indem CR+LF mit LF (`n) ersetzt wird.</p>
  <p>Mit <a href="#Text">GuiCtrl.Text</a> kann der Text abgerufen oder gesetzt werden, ohne dass eine Übersetzung zwischen `n und `r`n erfolgt.</p>

<h4><a href="../commands/GuiControls.htm#Hotkey">Hotkey</a></h4>
<p><em>ErmittelterWert</em> ist eine Zeichenkette, die sich zusammensetzt aus Modifikatoren und Tastenname, sofern ein Hotkey im Steuerelement angegeben ist; ansonsten leer. Beispiele: <code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NeuerWert</em> ist eine Zeichenkette, die sich zusammensetzt aus Modifikatoren und Tastenname, oder ein leerer Wert, um das Steuerelement leer zu machen. Beispiele: <code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. Es werden nur die Modifikatortasten ^ (STRG), ! (ALT) und + (UMSCHALT) unterstützt. In der <a href="../KeyList.htm">Tastenliste</a> findest du alle verfügbaren Tastennamen.</p>

<h4><a href="../commands/GuiControls.htm#Checkbox">Checkbox</a> / <a href="../commands/GuiControls.htm#Radio">Radio</a></h4>
<p><em>ErmittelterWert</em> ist eine 1, wenn das Steuerelement markiert ist, eine 0, wenn es demarkiert ist, oder -1, wenn es eine graue Markierung hat.</p>
<p><em>NeuerWert</em> kann eine 0 sein, um das Steuerelement zu demarkieren, eine 1, um es zu markieren, oder -1, um eine graue Markierung zu setzen. Bei Radio-Buttons ist zu beachten, dass wenn einer markiert (aktiviert) ist und wenn er zu einer Gruppe von mehreren Radio-Buttons gehört, alle anderen Radio-Buttons in seiner Gruppe automatisch demarkiert werden.</p>
  <p>Mit <a href="#Text">GuiCtrl.Text</a> kann stattdessen der Text/die Beschriftung des Steuerelements abgerufen oder gesetzt werden.</p>

<h4><a href="../commands/GuiControls.htm#DateTime">DateTime</a> / <a href="../commands/GuiControls.htm#MonthCal">MonthCal</a></h4>
<p><em>ErmittelterWert</em> ist ein Zeitstempel im <a href="../commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
<p><em>NeuerWert</em> ist ein Zeitstempel im <a href="../commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Verwende <code>A_Now</code>, um den Zeitstempel von Heute zu setzen. Bei DateTime-Steuerelementen kann <em>NeuerWert</em> eine leere Zeichenkette sein, um das Steuerelement ohne Auswahl von Datum/Uhrzeit anzuzeigen (wenn es mit <a href="../commands/GuiControls.htm#ChooseNone">dieser Option</a> erstellt wurde). Bei MonthCal-Steuerelementen kann ein Bereich angegeben werden, wenn das Steuerelement eine <a href="../commands/GuiControls.htm#MonthCalMulti">Mehrfachauswahl</a> bereitstellt.</p>

<h4><a href="../commands/GuiControls.htm#UpDown">UpDown</a> / <a href="../commands/GuiControls.htm#Slider">Slider</a> / <a href="../commands/GuiControls.htm#Progress">Progress</a></h4>
<p><em>ErmittelterWert</em> ist die aktuelle Position des Steuerelements.</p>
<p><em>NeuerWert</em> ist die neue Position des Steuerelements, zum Beispiel <code>MeinSlider.Value := 10</code>. Ersetze <code>:=</code> mit <code>+=</code>, <code>-=</code>, <code>++</code> oder <code>--</code>, um Operationen an dem aktuellen Wert durchzuführen. Liegt die neue Position außerhalb des Steuerelementbereichs, wird das Steuerelement auf den nächsten gültigen Wert gesetzt.</p>

<h4><a href="../commands/GuiControls.htm#Tab">Tab</a> / <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a> / <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a> / <a href="../commands/GuiControls.htm#ListBox">ListBox</a></h4>
<p><em>ErmittelterWert</em> ist die Position des aktuell ausgewählten Elements/Tabs, oder 0, wenn keines ausgewählt ist. Wenn man Text in einer ComboBox eingibt, wird das erste Element ausgewählt, das mit dem Text übereinstimmt. Wenn kein einziges Element gefunden wird, ist das Ergebnis eine 0, selbst wenn Text im Steuerelement vorhanden ist. Bei einer <a href="../commands/GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> ist das Ergebnis ein Array mit Nummern (und das leer ist, wenn keine Elemente ausgewählt sind).</p>
<p><em>NeuerWert</em> ist die Position eines einzigen Elements/Tabs, das ausgewählt werden soll, oder 0, um die aktuelle Auswahl aufzuheben (das gilt auch für Tab-Steuerelemente). Um mehrere Elemente auszuwählen, kann <a href="#Choose">GuiCtrl.Choose</a> wiederholt aufgerufen werden.</p>
<p>Mit <a href="#Text">GuiCtrl.Text</a> kann statt der Position der Text des ausgewählten Elements abgerufen oder gesetzt werden.</p>

<h4><a href="../commands/GuiControls.htm#ActiveX">ActiveX</a></h4>
<p><em>ErmittelterWert</em> ist das ActiveX-Objekt. Wenn das Steuerelement beispielsweise mit dem Text <em>Shell.Explorer</em> erstellt wurde, wäre dies ein <a href="https://msdn.microsoft.com/library/aa752043">WebBrowser</a>-Objekt. Es wird jedes Mal das gleiche <a href="../commands/ComObject.htm">Wrapperobjekt</a> zurückgegeben.</p>
</div>

<div class="methodShort" id="Text">
<h2>Text</h2>
<p>Ermittelt oder setzt den Text/die Beschriftung des Steuerelements.</p>
<pre class="Syntax">ErmittelterText := GuiCtrl.Text</pre>
<pre class="Syntax">GuiCtrl.Text := NeuerText</pre>
<p>Hinweis: Wenn das Steuerelement keinen sichtbaren Beschriftungstext und keinen (einzigen) Textwert hat, bezieht sich diese Eigenschaft auf den versteckten Beschriftungstext des Steuerelements (wie bei <a href="../commands/ControlGetText.htm">ControlGetText</a>/<a href="../commands/ControlSetText.htm">ControlSetText</a>).</p>
<p><strong>Beschriftung/Anzeigetext</strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt die Beschriftung/den Anzeigetext von folgenden Steuerelementtypen: <a href="../commands/GuiControls.htm#Button">Button</a>, <a href="../commands/GuiControls.htm#Checkbox">Checkbox</a>, <a href="../commands/GuiControls.htm#Edit">Edit</a>, <a href="../commands/GuiControls.htm#GroupBox">GroupBox</a>, <a href="../commands/GuiControls.htm#Link">Link</a>, <a href="../commands/GuiControls.htm#Radio">Radio</a>, <a href="../commands/GuiControls.htm#Text">Text</a>. Da sich das Steuerelement nicht automatisch erweitert, sollte man <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> oder Ähnliches verwenden, wenn das Steuerelement breiter gemacht werden muss.</p>

<p><strong><a href="../commands/GuiControls.htm#DateTime">DateTime</a></strong>: Die <em>Text</em>-Eigenschaft ruft den formatierten Text ab, der im Steuerelement angezeigt wird. Es ist nicht möglich, dem Steuerelement eine formatierte Zeichenkette mit Datum/Uhrzeit zuzuweisen. Um die Datum/Uhrzeit-Anzeige zu ändern, muss man <a href="#Value">GuiCtrl.Value</a> einen Zeitstempel im <a href="../commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format zuweisen.</p>

<p><strong><a href="../commands/GuiControls.htm#Edit">Edit</a></strong>: Der Text wird, wie bei anderen Steuerelementen auch, so wie er ist abgerufen oder gesetzt; es erfolgt keine End-of-Line-Übersetzung. Mit <a href="#Value">GuiCtrl.Value</a> kann der Text eines mehrzeiligen Edit-Steuerelements abgerufen oder gesetzt werden, einschließlich der Übersetzung zwischen <code>`r`n</code> und <code>`n</code>.</p>

<p><strong><a href="../commands/GuiControls.htm#StatusBar">StatusBar</a></strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt nur den Text des ersten Bereiches (verwende <a href="../commands/GuiControls.htm#SB_SetText">SB.SetText</a> für eine höhere Flexibilität).</p>

<p><strong>Listentext</strong>: Die <em>Text</em>-Eigenschaft ermittelt oder setzt das aktuell ausgewählte Element/Tab für folgende Steuerelementtypen: <a href="../commands/GuiControls.htm#Tab">Tab</a>, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>, <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>.</p>
<p><em>NeuerText</em> sollte der vollständige Text des Elements/Tabs sein, das ausgewählt werden soll (Groß-/Kleinschreibung ist egal).</p>
<p>Bei einer ComboBox wird, wenn kein Element ausgewählt wurde, stattdessen der Text im Eingabefeld des Steuerelements abgerufen. Bei anderen Steuerelementen ist <em>ErmittelterText</em> leer. Wenn <em>NeuerText</em> leer ist, wird das aktuelle Element/Tab abgewählt.</p>
<p>Bei einer <a href="../commands/GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a> ist <em>ErmittelterText</em> ein Array. <em>NeuerText</em> darf kein Array sein, aber wenn mehrere Elemente übereinstimmen, werden sie alle ausgewählt. Um mehrere Elemente mit unterschiedlichem Text auszuwählen, kann <a href="#Choose">GuiCtrl.Choose</a> wiederholt aufgerufen werden.</p>
<p>Mit <a href="#Value">GuiCtrl.Value</a> kann ein Element stattdessen via Positionsnummer ausgewählt werden.</p>

</div>

<div class="methodShort" id="SetFont">
<h2>SetFont</h2>
<p>Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und/oder die Textfarbe des Steuerelements.</p>
<p>Hinweis: Wenn beide Parameter fehlen, wird die aktuell via <a href="Gui.htm#SetFont">Gui.SetFont</a> gesetzte Schriftart des GUI gesetzt. Ansonsten werden alle ausgelassenen Attribute von der vorherigen Schriftart des Steuerelements übernommen. Die Textfarbe wird nur geändert, wenn sie in den <em>Optionen</em> angegeben ist.</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Optionen, Schriftart</span>)</pre>
<p>Einzelheiten über beide Parameter findest du unter <a href="Gui.htm#SetFont">Gui.SetFont</a>.</p>
</div>

<div class="methodShort" id="Enabled">
<h2>Enabled</h2>
<p>Ermittelt den aktuellen Interaktionsstatus des Steuerelements, oder aktiviert oder deaktiviert ("ergraut") es.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Enabled</pre>
<pre class="Syntax">GuiCtrl.Enabled := NeuerStatus</pre>
<p>Bei Tab-Steuerelementen wird dieser Unterbefehl auch alle dazugehörigen Untersteuerelemente aktivieren oder deaktivieren. Beachte aber, das jedes untergeordnete Steuerelement, das explizit via <code>GuiCtrl.Enabled := false</code> deaktiviert wurde, diese Einstellung beibehalten wird, wenn dessen Tab-Steuerelement wieder aktiviert wird.</p>
</div>

<div class="methodShort" id="Visible">
<h2>Visible</h2>
<p>Ermittelt den aktuellen Sichtbarkeitsstatus des Steuerelements, oder zeigt oder versteckt es.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Visible</pre>
<pre class="Syntax">GuiCtrl.Visible := NeuerStatus</pre>
<p>Bei Tab-Steuerelementen wird dieser Unterbefehl auch alle dazugehörigen Untersteuerelemente verstecken oder sichtbar machen. Außerdem ist es möglich, die Tastenkombination des Steuerelements (unterstrichener Buchstabe) mit <code>GuiCtrl.Enabled := false</code> zu unterbinden.</p>
</div>

<div class="methodShort" id="Focused">
<h2>Focused</h2>
<p>Ermittelt den aktuellen Fokusstatus des Steuerelements.</p>
<pre class="Syntax">ErmittelterStatus := GuiCtrl.Focused</pre>
<p>Hinweis: Um Effektiv zu sein, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="Pos">
<h2>Pos</h2>
<p>Ermittelt die Position und Größe des Steuerelements.</p>
<pre class="Syntax">PosGrößeObj := GuiCtrl.Pos</pre>
<p>Die Position ist relativ zum Client-Bereich des GUI-Fensters, das der Bereich ohne Titelleiste, Menüleiste und Rahmen ist. Die Informationen werden in ein <a href="../Objects.htm">Objekt</a> gespeichert. Zum Beispiel:</p>
<pre>Wert := MeinEdit.Pos
MsgBox "Die X-Koordinate ist " Wert.x ". Die Y-Koordinate ist " Wert.y ". Die Breite ist " Wert.w ". Die Höhe ist " Wert.h "."
</pre>
</div>
</body>
</html>
