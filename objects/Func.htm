<!DOCTYPE HTML>
<html>
<head>
<title>Func-Objekt</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Func-Objekt</h1>

<p>Repräsentiert eine benutzerdefinierte oder built-interne Funktion, die vom Skript aufgerufen werden kann.</p>

<p>Informationen zu anderen Objekten, die wie Funktionen aufgerufen werden können, findest du unter <a href="Functor.htm">Funktionsobjekte</a>.</p>

<p>Ein Verweis auf ein Func-Objekt wird auch als <em>Funktionsverweis</em> bezeichnet. Um ein Funktionsverweis zu erhalten, verwendet die Func-Funktion zum Beispiel wie folgt:</p>
<pre><em>; Ermittelt einen Verweis auf die Funktion namens "StrLen".</em>
fn := Func("StrLen")

<em>; Zeigt Informationen über die Funktion an.</em>
MsgBox % fn.Name "() ist " (fn.IsBuiltIn ? "integriert." : "benutzerdefiniert.")</pre>
<p>Wenn <em>fn</em> ein Funktionsverweis ist, wird <code>Func(fn)</code> diesen zurückgeben. So könnte man <code>fn := Func(fn)</code> benutzen, um sicherzustellen, dass <em>fn</em> ein Funktionsverweis ist. Wenn <em>fn</em> weder ein gültiger Funktionsname noch ein Funktionsverweis ist, wird <em>Func</em> einen leeren Wert zurückgegeben.</p>

<div class="methodShort" id="Call"><h2>Call</h2>
<p>Ruft die Funktion auf.</p>
<pre class="Syntax">Func.<span class="func">Call</span>(<i>Parameter</i>)
%Func%(<i>Parameter</i>)</pre>
<p>Die zweite Form (ein <a href="../Functions.htm#DynCall">dynamischer Funktionsaufruf</a>) funktioniert auch mit Funktionsnamen (Zeichenketten) und anderen Arten von <a href="Functor.htm">Funktionsobjekt</a>.</p>
<p>Parameter und Rückgabewerte werden durch die Funktion definiert.</p>
</div>

<div class="methodShort" id="Bind"><h2>Bind</h2>
<p>Bindet Parameter an die Funktion und gibt ein <a href="Functor.htm#BoundFunc">BoundFunc-Objekt</a> zurück.</p>
<pre class="Syntax">BoundFunc := Func.<span class="func">Bind</span>(<i>Parameter</i>)</pre>
<p><i>Parameter</i> können beliebig viele Parameter sein.</p>
<p>Informationen und Beispiele findest du unter <a href="Functor.htm#BoundFunc">BoundFunc-Objekt</a>.</p>
</div>

<div class="methodShort" id="Name"><h2>Name</h2>
<p>Gibt den Funktionsnamen zurück.</p>
<pre class="Syntax">Func.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h2>IsBuiltIn</h2>
<p>Gibt <i>wahr</i> zurück, falls die Funktion eine Built-in-Funktion ist, ansonsten <i>falsch</i>.</p>
<pre class="Syntax">Func.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h2>IsVariadic</h2>
<p>Gibt <i>wahr</i> zurück, falls die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, ansonsten <i>falsch</i>.</p>
<pre class="Syntax">Func.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h2>MinParams</h2>
<p>Gibt die Anzahl der benötigten Parameter zurück.</p>
<pre class="Syntax">Func.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h2>MaxParams</h2>
<p>Gibt die Anzahl der offiziell deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer Built-in-Funktion zurück.</p>
<pre class="Syntax">Func.MaxParams</pre>
<p>Wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, dann kennzeichnet der Rückgabewert die maximale Anzahl an Parametern, die von der Funktion akzeptiert werden kann, ohne einen Überlauf zu riskieren.</p></div>

<div class="methodShort" id="IsByRef"><h2>IsByRef()</h2>
<p>Damit kann festgestellt werden, ob der Parameter ein ByRef ist.</p>
<pre class="Syntax">Func.<span class="func">IsByRef</span>(ParamIndex)</pre>
<table class="info">
  <tr><td style="width:15%">ParamIndex</td><td>Optional: Der 1-basierte Index eines Parameters. Wenn weggelassen, dann kennzeichnet der Rückgabewert, ob die Funktion überhaupt ByRef-Parameter hat.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Eine leere Zeichenkette, wenn die Funktion integriert oder <i>ParamIndex</i> ungültig ist, ansonsten kennzeichnet ein logischer Wert, ob der Parameter ein ByRef ist.</td></tr>
</table>
</div>

<div class="methodShort" id="IsOptional"><h2>IsOptional()</h2>
<p>Damit kann festgestellt werden, ob der Parameter optional ist.</p>
<pre class="Syntax">Func.<span class="func">IsOptional</span>(ParamIndex)</pre>
<table class="info">
  <tr><td style="width:15%">ParamIndex</td><td>Optional: Der 1-basierte Index eines Parameters. Wenn weggelassen, dann kennzeichnet der Rückgabewert, ob die Funktion überhaupt optionale Parameter hat.</td></tr>
  <tr><td><b>Rückgabe</b></td><td>Eine leere Zeichenkette, wenn <i>ParamIndex</i> ungültig ist, ansonsten kennzeichnet ein logischer Wert, ob der Parameter optional ist.</td></tr>
</table>
<p>Parameter müssen nicht offiziell deklariert werden, wenn die Funktion variadisch ist. Built-in-Funktionen werden unterstützt.</p></div>

</body>
</html>
