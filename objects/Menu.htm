<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Menu/MenuBar-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das Menu/MenuBar-Objekt stellt eine Schnittstelle für Menüs oder Menüleisten zur Verfügung, um Aktionen wie das Hinzufügen von Menüpunkten durchzuführen oder um Werte wie den Standard-Menüpunkt abzurufen oder zu setzen." />
<meta name="ahk:equiv-v1" content="commands/Menu.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Menu/MenuBar-Objekt</h1>
<p>Dient zum Ändern und Anzeigen von Menüs oder Menüleisten.</p>
<p>Menu-Objekte werden zum Definieren, Ändern und Anzeigen von Popupmenüs genutzt. <a href="../commands/MenuCreate.htm">MenuCreate</a>, <a href="../commands/MenuFromHandle.htm">MenuFromHandle</a> und <a href="../Variables.htm#TrayMenu">A_TrayMenu</a> geben ein Objekt dieses Typs zurück.</p>
<p>MenuBar-Objekte werden in Verbindung mit <a href="Gui.htm#MenuBar">Gui.MenuBar</a> zum Definieren und Ändern von Menüleisten genutzt. <a href="../commands/MenuFromHandle.htm">MenuFromHandle</a> gibt ein Objekt dieses Typs zurück, wenn der Handle einer Menüleiste übergeben wird.</p>

<p><strong>Eigenschaften:</strong></p>
<ul>
  <li><a href="#ClickCount">ClickCount</a>: Ermittelt oder setzt die Anzahl der Klicks, die erforderlich sind, um den Standard-Menüpunkt des Tray-Menüs auszulösen.</li>
  <li><a href="#Default">Default</a>: Ermittelt oder setzt den Standard-Menüpunkt.</li>
  <li><a href="#Handle">Handle</a>: Ermittelt den Win32-Menü-Handle eines Menüs.</li>
</ul>
<p><strong>Methoden:</strong></p>
<ul>
  <li><a href="#Add">Add</a>: Fügt einen Menüpunkt hinzu oder modifiziert ihn.</li>
  <li><a href="#Check">Check</a>: Setzt ein sichtbares Häkchen neben einen Menüpunkt.</li>
  <li><a href="#Delete">Delete</a>: Löscht einen Menüpunkt oder alle Menüpunkte.</li>
  <li><a href="#Disable">Disable</a>: Zeigt einen Menüpunkt in einer grauen Farbe an, um kenntlich zu machen, dass der Benutzer ihn nicht anklicken kann.</li>
  <li><a href="#Enable">Enable</a>: Erlaubt dem Benutzer, einen Menüpunkt wieder anzuklicken, falls er zuvor deaktiviert (ergraut) war.</li>
  <li><a href="#Insert">Insert</a>: Fügt einen neuen Menüpunkt vor einem bestimmten Menüpunkt ein.</li>
  <li><a href="#Rename">Rename</a>: Benennt einen Menüpunkt um.</li>
  <li><a href="#SetColor">SetColor</a>: Ändert die Hintergrundfarbe des Menüs.</li>
  <li><a href="#SetIcon">SetIcon</a>: Bestimmt ein Symbol, das neben einen Menüpunkt angezeigt werden soll.</li>
  <li><a href="#Show">Show</a>: Zeigt das Menü an.</li>
  <li><a href="#ToggleCheck">ToggleCheck</a>: Schaltet das Häkchen neben einem Menüpunkt um.</li>
  <li><a href="#ToggleEnable">ToggleEnable</a>: Aktiviert oder deaktiviert die Interaktion mit einem Menüpunkt.</li>
  <li><a href="#Uncheck">Uncheck</a>: Entfernt das Häkchen (falls vorhanden) von einem Menüpunkt.</li>
  <li><a href="#AddStandard">AddStandard</a>: Fügt die voreingestellten <a href="../Program.htm#tray-icon">Menüpunkte des Tray-Menüs</a> hinzu.</li>
</ul>
<p><strong>Allgemeines:</strong></p>
<ul>
  <li><a href="#MenuItemName">Menüpunktname</a></li>
  <li><a href="#Win32_Menus">Win32-Menüs</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Related">Siehe auch</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>Fügt einen Menüpunkt hinzu oder modifiziert ihn.</p>
<pre class="Syntax">Menu.<span class="func">Add</span>(<span class="optional">Menüpunktname, Callback-oder-Untermenü, Optionen</span>)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Text, der auf dem Menüpunkt angezeigt werden soll, oder die Position&amp; eines vorhandenen Menüpunkts, der modifiziert werden soll. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
  <dt>Callback-oder-Untermenü</dt><dd><p>Der Name einer Funktion oder eine Referenz zu einem <a href="Functor.htm">Funktionsobjekt</a>, das als neuer <a href="../misc/Threads.htm">Thread</a> aufgerufen werden soll, wenn der Menüpunkt ausgewählt wird; oder eine Referenz zu einem <strong>Menu</strong>-Objekt, das als Untermenü verwendet werden soll.</p>
  <p>Lässt man <em>Callback-oder-Untermenü</em> weg, wird <em>Menüpunktname</em> sowohl als Funktionsname als auch als Menüpunktname verwendet.</p>
  <p id="CallbackParams">Optional kann die Funktion wie folgt Parameter definieren:</p>
<pre class="Syntax"><i>FunkName</i>(PunktName, PunktPos, Menu)</pre></dd>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
  <p>Sofern vorhanden, muss <em>Optionen</em> eine Liste mit einer oder mehreren Optionen sein, die jeweils mit einem Leer- oder Tabulatorzeichen voneinander getrennt sind:</p>
<table class="info">
  <tr><td>P<em>n</em></td>
  <td>Ersetzen Sie <em>n</em> mit der <a href="../misc/Threads.htm">Thread-Priorität</a> des Menüpunktes, z. B. <code>P1</code>. Lässt man diese Option beim Hinzufügen eines Menüpunktes weg, wird standardmäßig eine Priorität von 0 verwendet. Lässt man diese Option beim Ändern eines Menüpunktes weg, bleibt die Priorität des Menüpunktes unverändert. Verwenden Sie eine dezimale (nicht hexadezimale) Zahl als Priorität.</td></tr>
  <tr><td>+Radio</td>
  <td>Verwendet zum Abhaken des Menüpunktes einen kleinen Kreis anstelle eines Häkchens.</td></tr>
  <tr><td>+Right</td>
  <td>Der Menüpunkt ist innerhalb der Menüleiste rechtsbündig. Diese Option funktioniert nur bei <a href="../objects/Gui.htm#MenuBar">Menüleisten</a>, nicht bei Popup-Menüs oder Untermenüs.</td></tr>
  <tr><td>+Break</td>
  <td>Der Menüpunkt beginnt eine neue Spalte in einem Popup-Menü.</td></tr>
  <tr><td>+BarBreak</td>
  <td>Das gleiche wie oben, aber mit Trennlinien zwischen den Spalten.</td></tr>
</table>
<p>Das Pluszeichen (+) ist optional und kann mit einem Minuszeichen (-) ersetzt werden, um die Option zu entfernen, wie z. B. <code>-Radio</code>. Optionen sind nicht Groß-/Kleinschreibung-sensitiv.</p>
<p>Wenn der <em>Callback-oder-Untermenü</em>-Parameter weggelassen wird, können die Optionen eines vorhandenen Menüpunktes geändert werden, ohne dessen Callback oder Untermenü zu beeinflussen.</p>
  </dd>
</dl>
<h3>Bemerkungen</h3>
<p>Diese Methode ist für mehrere Zwecke gedacht - sie kann einen Menüpunkt hinzufügen, einen Menüpunkt mit einem neuen Untermenü oder Callback aktualisieren, oder einen normalen Menüpunkt in ein Untermenü umwandeln (oder umgekehrt). Wenn <em>Menüpunktname</em> noch nicht existiert, wird er zum Menü hinzugefügt. Ansonsten wird <em>Menüpunktname</em> mit dem neu angegebenen <em>Callback-oder-Untermenü</em> und/oder <em>Optionen</em> aktualisiert.</p>
<p>Um eine Trennlinie in das Menü einzufügen, lässt man alle drei Parameter weg.</p>
<p><em>Add</em> fügt neue Menüpunkte immer am unteren Ende des Menüs hinzu, während <a href="#Insert">Insert</a> einen Menüpunkt vor einem bestehenden benutzerdefinierten Menüpunkt einfügt.</p>
</div>

<div class="methodShort" id="Check">
<h2>Check</h2>
<p>Setzt ein sichtbares Häkchen neben <em>Menüpunktname</em> (wenn noch keines da ist).</p>
<pre class="Syntax">Menu.<span class="func">Check</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="ClickCount">
<h2>ClickCount</h2>
<p>Ermittelt oder setzt die Anzahl der Klicks, die erforderlich sind, um den Standard-Menüpunkt des Tray-Menüs auszulösen.</p>
<pre class="Syntax">Menu.ClickCount := Anzahl</pre>
<dl>
  <dt>Anzahl</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Geben Sie eine 1 an, um den Standard-Menüpunkt des Tray-Menüs mit einem einzigen Klick auslösen zu lassen. Geben Sie eine 2 an, um das Standardverhalten wiederherzustellen (Doppelklick).</p></dd>
</dl>
<p>Zum Beispiel: <code>A_TrayMenu.ClickCount := 1</code></p>
</div>

<div class="methodShort" id="Delete">
<h2>Delete</h2>
<p>Löscht einen Menüpunkt oder alle benutzerdefinierten Menüpunkte.</p>
<pre class="Syntax">Menu.<span class="func">Delete</span>(<span class="optional">Menüpunktname</span>)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
<p>Lässt man <em>Menüpunktname</em> weg, werden alle Menüpunkte aus dem Menü gelöscht, um es komplett zu leeren. Ein leeres Menü bleibt weiterhin bestehen; andere Menüs, die dieses leere Menü als Untermenü verwenden, werden demzufolge solche Untermenüs beibehalten.</p>
<p>Um eine Trennlinie zu löschen, identifiziert man sie anhand ihrer Position im Menü. Verwenden Sie z. B. <code>MeinMenu.Delete("3&amp;")</code>, wenn dem Trennzeichen zwei Menüpunkte vorangestellt sind.</p>
<p>Wenn der <em>Standard</em>-Menüpunkt gelöscht wird, ist der Effekt das gleiche wie, als hätte man <code>Menu.Default := ""</code> gesetzt.</p>
</div>

<div class="methodShort" id="Default">
<h2>Default</h2>
<p>Ermittelt oder setzt den Standard-Menüpunkt.</p>
<pre class="Syntax">AktuellerStandard := Menu.Default</pre>
<dl>
  <dt>AktuellerStandard</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Name des Standard-Menüpunkts, oder eine leere Zeichenkette, wenn es keinen gibt.</p></dd>
</dl>
<pre class="Syntax">Menu.Default := Menüpunktname</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p>
  <p>Wenn <em>Menüpunktname</em> eine leere Zeichenkette ist, gibt es keinen Standard-Menüpunkt.</p></dd>
</dl>
<p>Wenn Sie den Standard-Menüpunkt setzen, wird er in fetter Schrift dargestellt (das Setzen des Standard-Menüpunkts in anderen Menüs, die nicht das Tray-Menü sind, ist rein kosmetischer Natur). Wenn der Benutzer das Tray-Symbol doppelt anklickt, wird der Standard-Menüpunkt gestartet (selbst wenn die Interaktion mit diesem Menüpunkt deaktiviert ist). Wenn es keinen Standard-Menüpunkt gibt, hat ein Doppelklick keine Wirkung.</p>
<p>Der Standard-Menüpunkt beim Tray-Menü ist zu Beginn <code>&amp;Open</code>, sofern vorhanden. Fügt man den <code>&amp;Open</code>-Menüpunkt zum Tray-Menü hinzu, indem man <a href="#AddStandard">AddStandard</a> aufruft oder <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> ändert, wird er auch zum Standard-Menüpunkt, sofern es noch keinen gab.</p>
<p>Wenn der Standard-Menüpunkt gelöscht wird, wird das Menü ohne ihn angezeigt.</p>
</div>

<div class="methodShort" id="Disable">
<h2>Disable</h2>
<p>Zeigt <em>Menüpunktname</em> in einer grauen Farbe an, um kenntlich zu machen, dass der Benutzer ihn nicht anklicken kann.</p>
<pre class="Syntax">Menu.<span class="func">Disable</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Enable">
<h2>Enable</h2>
<p>Erlaubt dem Benutzer, <em>Menüpunktname</em> wieder anzuklicken, falls er zuvor deaktiviert (ergraut) war.</p>
<pre class="Syntax">Menu.<span class="func">Enable</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Insert">
<h2>Insert</h2>
<p>Fügt einen neuen Menüpunkt vor einem bestimmten Menüpunkt ein.</p>
<pre class="Syntax">Menu.<span class="func">Insert</span>(<span class="optional">VorhandenerMenüpunktname, NeuerMenüpunktname, Callback-oder-Untermenü, Optionen</span>)</pre>
<dl>
  <dt>VorhandenerMenüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Name eines vorhandenen Menüpunkts, oder eine Position&amp; zwischen 1 und <a href="#Examples">der aktuellen Anzahl der benutzerdefinierten Menüpunkte</a> plus 1 (nach den gleichen Regeln wie <a href="#MenuItemName">Menüpunktname</a>). Menüpunkte kann man auch anfügen, indem man <em>VorhandenerMenüpunktname</em> weglässt.</p></dd>
  <dt>NeuerMenüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Text, der auf dem Menüpunkt angezeigt werden soll. Im Gegensatz zu <a href="#Add">Add</a> kann dieser Parameter keine Position sein.</p></dd>
</dl>
<p>Die übrigen Parameter verhalten sich wie bei der <a href="#Add">Add</a>-Methode, außer dass <em>Insert</em> einen neuen Menüpunkt erstellt, selbst wenn <em>NeuerMenüpunktname</em> mit dem Namen eines vorhandenen Menüpunkts übereinstimmen sollte.</p>
<p>Da <a href="#AddStandard">voreingestellte</a> Menüpunkte nicht gezählt werden (<code>"1&amp;"</code> bezieht sich immer auf den ersten <em>benutzerdefinierten</em> Menüpunkt), kann ein Menüpunkt nicht unmittelbar vor den voreingestellten Menüpunkten eingefügt werden.</p>
</div>

<div class="methodShort" id="Rename">
<h2>Rename</h2>
<p>Benennt <em>Menüpunktname</em> in <em>NeuerName</em> um.</p>
<pre class="Syntax">Menu.<span class="func">Rename</span>(Menüpunktname <span class="optional">, NeuerName</span>)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
  <dt>NeuerName</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der neue Name. Wenn dieser Parameter weggelassen wird oder leer ist, wird <em>Menüpunktname</em> in eine Trennlinie umgewandelt.</p></dd>
</dl>
<p>Das aktuelle Callback oder Untermenü des Menüpunkts bleibt unverändert.</p>
<p>Um eine Trennlinie in einen normalen Menüpunkt umzuwandeln, gibt man die Position&amp; der Trennlinie und einen nicht-leeren Namen in <em>NeuerName</em> an, und weist dann mit der <em>Add</em>-Methode dem Menüpunkt ein Callback oder Untermenü zu.</p>
</div>

<div class="methodShort" id="SetColor">
<h2>SetColor</h2>
<p>Setzt die Hintergrundfarbe des Menüs auf den angegebenen <em>Farbwert</em>.</p>
<pre class="Syntax">Menu.<span class="func">SetColor</span>(<span class="optional">Farbwert, Untermenüs := true</span>)</pre>
<dl>
  <dt>Farbwert</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Einer der 16 <a href="../misc/Colors.htm">HTML-Farbnamen</a>, ein hexadezimaler RGB-Farbwert als Zeichenkette (das 0x-Präfix ist optional), oder ein reiner numerischer RGB-Farbwert. Lassen Sie den <em>Farbwert</em>-Parameter leer (oder geben Sie eine leere Zeichenkette oder das Wort "Default" an), um die Standardfarbe des Menüs wiederherzustellen. Beispielwerte: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p></dd>
  <dt>Untermenüs</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
    <p>1 (true), wenn die Farbe auf alle Untermenüs dieses Menüs angewendet werden soll, ansonsten 0 (false). Standardwert ist 1 (true).</p></dd>
</dl>
</div>

<div class="methodShort" id="SetIcon">
<h2>SetIcon</h2>
<p>Bestimmt ein Symbol, das neben <em>Menüpunktname</em> angezeigt werden soll.</p>
<pre class="Syntax">Menu.<span class="func">SetIcon</span>(Menüpunktname, Dateiname <span class="optional">, Symbolnummer, Symbolbreite</span>)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>     <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
  <dt>Dateiname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Pfad eines Symbols oder einer Bilddatei. Eine Liste von unterstützten Formaten finden Sie unter <a href="../commands/GuiControls.htm#IconSupport">Picture</a>.</p>
  <p>Anstelle eines Dateinamens kann auch ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> verwendet werden. Zum Beispiel <code>"HICON:" handle</code>.</p>
  <p>Lassen Sie den <em>Dateiname</em>-Parameter leer (oder geben Sie eine leere Zeichenkette oder <code>"*"</code> an), um das aktuelle Symbol des Menüpunkts zu entfernen.</p></dd>
  <dt>Symbolnummer</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Um anstelle der ersten Symbolgruppe eine andere in der Datei zu nutzen, muss für <em>Symbolnummer</em> die entsprechende Nummer angegeben werden (lässt man diesen Parameter weg, wird standardmäßig 1 verwendet). Wenn <em>Symbolnummer</em> negativ ist, wird der absolute Wert dieser Nummer als Ressourcen-ID eines Symbols innerhalb einer ausführbaren Datei vermutet.</p></dd>
  <dt>Symbolbreite</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die gewünschte Breite des Symbols. Wenn die angegebene Symbolgruppe in <em>Symbolnummer</em> mehrere Symbolgrößen enthält, wird das Symbol auf die nächstliegende Größe skaliert. Im Beispiel-Abschnitt finden Sie Anwendungsbeispiele.</p></dd>
</dl>
<p>Derzeit ist es notwendig, die tatsächliche Größe anzugeben, wenn die Transparenz des Symbols in Windows Vista oder höher erhalten bleiben soll. Zum Beispiel:</p>
<pre>MeinMenu.SetIcon "Mein Menüpunkt", "Dateiname.png",, 0</pre>
<p>Bekannte Einschränkung: In Windows XP und höher werden Symbole auf GUI-Menüleisten falsch positioniert.</p>
<p>Anstelle eines Dateinamens kann auch ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> verwendet werden. Zum Beispiel <code>"HBITMAP:" handle</code>.</p>
</div>

<div class="methodShort" id="Show">
<h2>Show</h2>
<p>Zeigt das Menü an, dessen Menüpunkte mit Pfeiltasten, Tastenkürzel (unterstrichene Buchstaben) oder mit dem Mauszeiger ausgewählt werden können.</p>
<pre class="Syntax">Menu.<span class="func">Show</span>(<span class="optional">X, Y</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Koordinaten, wo das Menü angezeigt werden soll. Lässt man sowohl X als auch Y weg, wird das Menü bei der aktuellen Position des Mauszeigers angezeigt. Lässt man nur eine dieser Koordinaten weg, wird stattdessen die Position des Mauszeigers verwendet. X und Y sind standardmäßig relativ zum Clientbereich des aktiven Fensters. Mit <code><a href="../commands/CoordMode.htm">CoordMode</a> "Menu", <i>Modus</i></code> oder <code>A_CoordModeMenu := <i>Modus</i></code> kann dieses Standardverhalten überschrieben werden.</p></dd>
</dl>
<p>Alle Arten von Popupmenüs, inklusive Untermenüs und dem Tray-Menü, können angezeigt werden. Allerdings wird eine Ausnahme ausgelöst, wenn <em>Menu</em> ein MenuBar-Objekt ist.</p>
</div>

<div class="methodShort" id="ToggleCheck">
<h2>ToggleCheck</h2>
<p>Fügt ein Häkchen hinzu, wenn dort keines war; ansonsten wird es entfernt.</p>
<pre class="Syntax">Menu.<span class="func">ToggleCheck</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>     <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="ToggleEnable">
<h2>ToggleEnable</h2>
<p>Deaktiviert die Interaktion mit <em>Menüpunktname</em>; wenn sie bereits deaktiviert ist, wird sie wieder aktiviert.</p>
<pre class="Syntax">Menu.<span class="func">ToggleEnable</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>     <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Uncheck">
<h2>Uncheck</h2>
<p>Entfernt das Häkchen (falls vorhanden) von einem Menüpunkt.</p>
<pre class="Syntax">Menu.<span class="func">Uncheck</span>(Menüpunktname)</pre>
<dl>
  <dt>Menüpunktname</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>     <p>Name oder Position eines Menüpunkts. Siehe <a href="#MenuItemName">Menüpunktname</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="AddStandard">
<h2>AddStandard</h2>
<p>Fügt die voreingestellten <a href="../Program.htm#tray-icon">Menüpunkte des Tray-Menüs</a> hinzu.</p>
<pre class="Syntax">Menu.<span class="func">AddStandard</span>()</pre>
<p>Diese Methode kann in Verbindung mit einem Tray-Menü oder jedem anderen Menü verwendet werden.</p>
<p>Wenn Menüpunkte bereits vorhanden sind, werden die voreingestellten Menüpunkte danach eingefügt. Alle bereits im Menü vorhandenen voreingestellten Menüpunkte werden nicht dupliziert, aber nachträglich hinzugefügt, wenn sie fehlen sollten. Die folgende Tabelle zeigt die Namen und Positionen der voreingestellten Menüpunkte an, nachdem man AddStandard bei einem leeren Menü aufgerufen hat:</p>
<style>
.fake-menu {
  background-color: #f2f2f2;
  border: 1px solid #cccccc;
  color: black;
  line-height: 1.4;
}
.fake-menu td {
  padding: 0 .5em;
}
.fake-menu td {
  text-align: right;
}
.fake-menu td:first-child {
  text-align: left;
}
.fake-sep {
  border: 1px solid #d7d7d7;
  border-width: 1px 0 0;
}
</style>
<table class="fake-menu">
  <tr><td>&amp;Open</td><td>1</td><td>0</td></tr>
  <tr><td>&amp;Help</td><td>2</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>3</td><td></td></tr>
  <tr><td>&amp;Window Spy</td><td>4</td><td></td></tr>
  <tr><td>&amp;Reload This Script</td><td>5</td><td></td></tr>
  <tr><td>&amp;Edit This Script</td><td>6</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>7</td><td></td></tr>
  <tr><td>&amp;Suspend Hotkeys</td><td>8</td><td>1</td></tr>
  <tr><td>&amp;Pause Script</td><td>9</td><td>2</td></tr>
  <tr><td>E&amp;xit</td><td>10</td><td>3</td></tr>
</table>
<p>Kompilierte Skripte haben standardmäßig nur die letzten drei Menüpunkte. <code>&amp;Open</code> ist nur enthalten, wenn <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> eine 1 ist und AddStandard aufgerufen wurde (in diesem Fall addiert man eine 1 zu den in der dritten Spalte angegebenen Positionsnummern). Wenn das Tray-Menü voreingestellte Menüpunkte enthält, wird <code>&amp;Open</code> immer dann eingefügt oder entfernt, wenn <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> geändert wird. Bei anderen Menüs hat <code>&amp;Open</code> keinen Effekt, wenn <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> eine 0 ist.</p>
<p>Jeder voreingestellte Menüpunkt hat eine interne Menüpunkt-ID, die zu der Funktion gehört, die sie ausführt, kann aber ansonsten wie jeder andere Menüpunkt geändert oder gelöscht werden. AddStandard identifiziert vorhandene Menüpunkte anhand ihrer ID, nicht anhand ihrer Namen. Wenn mit der <a href="#Add">Add</a>-Methode die Callback-Funktion eines voreingestellten Menüpunkts geändert wird, bekommt der Menüpunkt eine neue eindeutige ID zugewiesen und wird nicht länger als voreingestellter Menüpunkt angesehen.</p>
<p>Fügt man den <code>&amp;Open</code>-Menüpunkt zum Tray-Menü hinzu, wird er zum Standard-Menüpunkt, sofern es noch keinen gab.</p>
</div>

<div class="methodShort" id="Handle">
<h2>Handle</h2>
<p>Gibt ein Handle eines <a href="#Win32_Menus">Win32-Menüs</a> (ein Handle vom Typ <code>HMENU</code>) zurück, und konstruiert es, falls nötig.</p>
<pre class="Syntax">Menu.Handle</pre>
<p>Das zurückgegebene Handle verliert seine Gültigkeit, wenn das Win32-Menü zerstört wird. Dies geschieht in der Regel, wenn das Menu-Objekt freigegeben wird. Hat man das Menü zerstört, kann es vorkommen, dass alle danach erstellten Menüs via Skript oder einem anderen Programm einen neuen Handle-Wert zugewiesen bekommen.</p>
</div>

<h2 id="MenuItemName">Menüpunktname</h2>
<p>Name oder Position eines Menüpunkts. Es gelten einige allgemeine Regeln für diesen Parameter, der bei vielen Unterbefehlen zu finden ist:</p>
<p>Um einen Buchstaben im Namen eines Menüpunktnamens zu unterstreichen, muss ein Und-Zeichen (&amp;) davor gesetzt werden. Sobald das Menü angezeigt wird, kann man so ein Menüpunkt durch Drücken der entsprechenden Taste aktivieren. Geben Sie zwei aufeinanderfolgende Und-Zeichen an, um ein direkt geschriebenes Und-Zeichen anzuzeigen. Zum Beispiel: <code>"Speichern &amp;&amp; Beenden"</code></p>
<p>Beim Verweisen auf einen vorhandenen Menüpunkt ist der Name zwar nicht Groß-/Kleinschreibung-sensitiv, aber jegliche Und-Zeichen müssen enthalten sein. Zum Beispiel: <code>"Ö&amp;ffnen"</code></p>
<p>Die Namen der Menüpunkte können bis zu 260 Zeichen lang sein.</p>
<p>Um einen vorhandenen Menüpunkt anhand seiner Position im Menü zu identifizieren, fügt man die Position des Menüpunkts ein, gefolgt von einem Und-Zeichen. Zum Beispiel wäre <code>"1&amp;"</code> der erste Menüpunkt.</p>

<h2 id="Win32_Menus">Win32-Menüs</h2>
<p>Windows stellt eine <a href="https://msdn.microsoft.com/de-de/library/ms646977">Reihe von Funktionen und Benachrichtigungen</a> zur Verfügung, um Menüs mit einheitlichem Aussehen und Verhalten zu erstellen, zu modifizieren und anzuzeigen. Wir bezeichnen ein Menü, das mit solchen Funktionen erstellt wurde, als <em>Win32-Menü</em>.</p>
<p>Während Menüpunkte modifiziert oder zu einem Menü hinzugefügt werden, werden ihre Namen und andere Eigenschaften in das Menu-Objekt gespeichert. Ein Win32-Menü wird erstellt, wenn das Menü oder sein übergeordnetes Menü zum ersten Mal mit einer GUI verbunden oder angezeigt wird. Es wird automatisch zerstört, wenn das Menu-Objekt gelöscht wird, oder anders gesagt, wenn dessen Referenzanzahl auf 0 ist.</p>
<p><a href="#Handle">Menu.Handle</a> gibt ein Handle eines Win32-Menüs (ein Handle vom Typ <code>HMENU</code>) zurück, und konstruiert es, falls nötig.</p>
<p>Jegliche Änderungen am Menü, die extern via Win32-Funktionen durchgeführt werden, spiegeln sich nicht im Menu-Objekt des Skripts wider, und gehen eventuell verloren, wenn ein Menüpunkt mit einer der internen Methoden geändert wird.</p>
<p>Jeder Menüpunkt bekommt eine ID zugewiesen, wenn er das erste Mal zum Menü hinzugefügt wird. Skripte können sich nicht auf einen Menüpunkt mit einer bestimmten ID verlassen, aber sie können die ID eines Menüpunktes via GetMenuItemID abrufen, wie es im <a href="#ExDllCall">fünften Beispiel</a> gezeigt wird. Diese ID kann nicht in Verbindung mit dem Menu-Objekt verwendet werden, sondern nur in Verbindung mit den <a href="https://msdn.microsoft.com/de-de/library/ms646977">Win32-Funktionen</a>.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Ein typisches Menü sieht wie folgt aus:</p>
<img src="../static/ctrl_menu.png" alt="Menu" style="border: 1px solid silver;" />
<p>Ein Menü, das komplett leer ist - z. B. via <code>MeinMenu.Delete()</code> - kann nicht angezeigt werden. Wenn das Tray-Menü leer ist, wird das Anklicken des Tray-Symbols keine Wirkung haben (in solchen Fällen ist es üblicherweise besser, <a href="../commands/_NoTrayIcon.htm">#NoTrayIcon</a> zu verwenden).</p>
<p>Wenn das Callback des Menüpunkts bereits läuft und der Benutzer diesen Menüpunkt wieder auswählt, wird ein neuer <a href="../misc/Threads.htm">Thread</a> erstellt, um das gleiche Callback nochmals auszuführen, und der vorherige Thread unterbrochen. Um solche Ereignisse stattdessen hinauszuzögern, setzt man <a href="../commands/Critical.htm">Critical</a> auf die erste Zeile des Callbacks (allerdings werden dadurch das auch andere Threads, wie z. B. das Drücken eines Hotkeys, hinausgezögert).</p>
<p>Jedes Mal, wenn eine Funktion über einen Menüpunkt aufgerufen wird, starten Einstellungen wie <a href="../commands/SendMode.htm">SendMode</a> mit ihren Standardwerten. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Beim Erstellen eines Menüs, dessen Inhalt nicht immer gleich ist, gibt es zum Beispiel die Vorgehensweise, alle Menüpunkte auf die gleiche Funktion verweisen und diese Funktion auf ihre <a href="#CallbackParams">Parameter</a> zurückgreifen zu lassen, um die zu ergreifenden Maßnahmen zu bestimmen. Alternativ kann ein <a href="Functor.htm">Funktionsobjekt</a>, ein <a href="../Functions.htm#closures">Closure</a> oder eine <a href="../Variables.htm#fat-arrow">Fat-Arrow-Funktion</a> genutzt werden, um einen oder mehrere Werte oder Variablen an die Callback-Funktion des Menüpunkts zu binden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Gui.htm">GUI</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="../commands/Thread.htm">Thread</a>, <a href="../commands/Critical.htm">Critical</a>, <a href="../commands/_NoTrayIcon.htm">#NoTrayIcon</a>, <a href="../commands/Gosub.htm">Gosub</a>, <a href="../Functions.htm">Funktionen</a>, <a href="../commands/Return.htm">Return</a>, <a href="../commands/SetTimer.htm">SetTimer</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>: Dieses Skript zeigt, wie ein neuer Menüpunkt an das Ende des Tray-Menüs eingefügt werden kann:</p>
<pre>A_TrayMenu.Add()  <em>; Erstellt eine Trennlinie.</em>
A_TrayMenu.Add("Menüpunkt1", "MenuHandler")  <em>; Erstellt einen neuen Menüpunkt.</em>
return

MenuHandler(PunktName, PunktPos, Menu) {
    MsgBox "Sie haben " PunktName " (Position " PunktPos ") ausgewählt."
}</pre>
</div>

<div class="ex" id="ExPopup">
<p><a href="#ExPopup">#2</a>: Dieses Skript zeigt, wie ein aufklappbares Menü erstellt werden kann, das angezeigt werden soll, wenn der Benutzer <kbd>Win</kbd>+<kbd>Z</kbd> drückt:</p>
<pre><em>; Erstellt ein aufklappbares Menü durch Hinzufügen von Menüpunkten.</em>
MeinMenü := MenuCreate()
MeinMenü.Add "Menüpunkt 1", "MenuHandler"
MeinMenü.Add "Menüpunkt 2", "MenuHandler"
MeinMenü.Add  <em>; Fügt eine Trennlinie ein.</em>

<em>; Erstellt ein weiteres Menü, das als Untermenü für das obige Menü dienen soll.</em>
Untermenü1 := MenuCreate()
Untermenü1.Add "Menüpunkt A", "MenuHandler"
Untermenü1.Add "Menüpunkt B", "MenuHandler"

<em>; Erstellt ein Untermenü im ersten Menü (mit einem nach rechts gerichteten Pfeil). Sobald der Benutzer dieses Untermenü auswählt, wird das zweite Menü angezeigt.</em>
MeinMenü.Add "Mein Untermenü", Untermenü1

MeinMenü.Add  <em>; Fügt eine Trennlinie unterhalb des Untermenüs ein.</em>
MeinMenü.Add "Menüpunkt 3", "MenuHandler"  <em>; Fügt einen weiteren Menüpunkt unterhalb des Untermenüs ein.</em>
return  <em>; Ende des automatischen Ausführungsbereichs.</em>

MenuHandler(Punkt, *) {
    MsgBox "Sie haben " Punkt " ausgewählt."
}

#z::MeinMenü.Show  <em>; Drücken Sie WIN+Z, um das Menü anzuzeigen.</em></pre>
</div>

<div class="ex" id="ExTray">
<p><a href="#ExTray">#3</a>: Dieses Skript zeigt, wie die Elemente des Menu-Objekts genutzt werden können:</p>
<pre>#SingleInstance
global tray := A_TrayMenu <em>; Für den praktischen Grund.</em>
tray.delete <em>; Löscht die voreingestellten Menüpunkte.</em>
tray.add <em>; Trennlinie</em>
tray.add "TestToggleCheck"
tray.add "TestToggleEnable"
tray.add "TestDefault"
tray.add "TestAddStandard"
tray.add "TestDelete"
tray.add "TestDeleteAll"
tray.add "TestRename"
tray.add "Test"
return

<em>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</em>

TestToggleCheck(*)
{
    tray.ToggleCheck "TestToggleCheck"
    tray.Enable "TestToggleEnable" <em>; Aktiviert auch den nächsten Test, da es die Deaktivierung von sich selbst nicht rückgängig machen kann.</em>
    tray.add "TestDelete" <em>; Das gleiche wie oben.</em>
}

TestToggleEnable(*)
{
    tray.ToggleEnable "TestToggleEnable"
}

TestDefault(*)
{
    if tray.default = "TestDefault"
        tray.default := ""
    else
        tray.default := "TestDefault"
}

TestAddStandard(*)
{
    tray.addStandard
}

TestDelete(*)
{
    tray.delete "TestDelete"
}

TestDeleteAll(*)
{
    tray.delete
    MsgBox "Das Skript wird eventuell jetzt beendet, da das Tray-Menü keine benutzerdefinierten Menüpunkte mehr enthält."
}

TestRename(*)
{
    static
    if NeuerName != "unbenannt"
    {
        AlterName := "TestRename"
        NeuerName := "unbenannt"
    }
    else
    {
        AlterName := "unbenannt"
        NeuerName := "TestRename"
    }
    tray.rename AlterName, NeuerName
}

Test(Punkt, *)
{
    MsgBox 'Sie haben "' Punkt '" ausgewählt.'
}</pre>
</div>

<div class="ex" id="ExIcon">
<p><a href="#ExIcon">#4</a>: Dieses Skript zeigt, wie Symbole in seinen Menüpunkten eingefügt werden können:</p>
<pre>Dateimenü := MenuCreate()
Dateimenü.Add("Skript-Symbol", "MenuHandler")
Dateimenü.Add("Sperren-Symbol", "MenuHandler")
Dateimenü.Add("Pause-Symbol", "MenuHandler")
Dateimenü.SetIcon("Skript-Symbol", A_AhkPath, 2) <em>; 2. Symbolgruppe aus der Datei</em>
Dateimenü.SetIcon("Sperren-Symbol", A_AhkPath, -206) <em>; Symbol mit Ressourcen-ID 206</em>
Dateimenü.SetIcon("Pause-Symbol", A_AhkPath, -207) <em>; Symbol mit Ressourcen-ID 207</em>
MeineMenüleiste := MenuBarCreate()
MeineMenüleiste.Add("&amp;Datei", Dateimenü)
Gui := GuiCreate()
Gui.MenuBar := MeineMenüleiste
Gui.Add("Button",, "Beendet dieses Beispiel").OnEvent("Click", (*) =&gt; WinClose())
Gui.Show

MenuHandler(*) {
    <em>; In diesem Beispiel machen die Menüpunkte nichts.</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a href="#ExDllCall">#5</a>: Anzahl der Menüpunkte und ID abrufen.</p>
<pre>
MeinMenü := MenuCreate()
MeinMenü.Add "Menüpunkt 1", "nix"
MeinMenü.Add "Menüpunkt 2", "nix"
MeinMenü.Add "Menüpunkt B", "nix"

<em>; Ermittelt die Anzahl von Menüpunkten in einem Menü.</em>
menüpunkt_anzahl := DllCall("GetMenuItemCount", "ptr", MeinMenü.Handle)

<em>; Ermittelt die ID des letzten Menüpunkts.</em>
letzte_id := DllCall("GetMenuItemID", "ptr", MeinMenü.Handle, "int", menüpunkt_anzahl-1)

MsgBox "MeinMenü hat " menüpunkt_anzahl " Menüpunkte, und sein letzter Menüpunkt hat die ID " letzte_id

nix(*) {
    <em>; Nichts tun.</em>
}
</pre>
</div>

</body>
</html>
