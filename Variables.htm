<!DOCTYPE HTML>
<html>
<head>
<title>Variablen und Ausdrücke</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke (Expressions)</a></li>
  <li><a href="#Operators">Operatoren innerhalb von Ausdrücken</a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher einer Variable</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p>Allgemeine Erläuterungen und Details zur Funktionsweise finden Sie unter <a href="Concepts.htm#variables">Variablen</a>.</p>
<p id="assigning"><strong>Speichern von Variablenwerten</strong>: Um eine Zeichenkette oder Zahl in eine Variable zu speichern, nutzt man den <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a> gefolgt von einer Zahl, einer in Anführungszeichen gesetzte Zeichenkette oder einem <a href="Language.htm#expressions">Ausdruck</a> beliebigen Typs. Zum Beispiel:</p>
<pre>MeineZahl := 123
MeineZeichenkette := "Das ist eine direkt geschriebene Zeichenkette."
KopieVonVar := Var</pre>
<p>Variablen, denen kein Wert zugewiesen wurde, enthalten standardmäßig eine leere Zeichenkette. Um also den Inhalt einer Variable zu löschen, muss man ihr einfach eine leere Zeichenkette zuweisen:</p>
<pre>MeineVar := ""</pre>
<p>Wenn eine Variable die <em>Ausgabevariable</em> einer Funktion ist, wird ihr indirekt ein Wert zugewiesen. Zum Beispiel:</p>
<pre><a href="commands/MouseGetPos.htm">MouseGetPos</a> <strong>x</strong>, <strong>y</strong></pre>
<p id="retrieving"><strong>Abrufen von Variablenwerten</strong>: Mit einer <a href="#concat">Verkettung</a> oder der <a href="commands/Format.htm">Format</a>-Funktion kann der Inhalt einer Variable in eine Zeichenkette eingefügt werden. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> "Der Wert von Var ist " . Var . "."
MsgBox "Der Wert in der Variable namens Var ist " Var "."
MsgBox Format("Var hat den Wert {1}.", Var)
</pre>
<p>Teilausdrücke können auf dieselbe Weise mit Zeichenketten kombiniert werden. Zum Beispiel:</p>
<pre>MsgBox("Die Summe von X und Y ist " . (X + Y))
</pre>
<p><strong>Vergleichen von Variablen</strong>: Bitte lesen Sie den folgenden Abschnitt, um zu erfahren, welche verschiedenen Arten von Vergleichen es gibt.</p>
<h2 id="Expressions">Ausdrücke (Expressions)</h2>
<p class="note">Eine strukturierte Übersicht und weitere Erläuterungen finden Sie unter <a href="Language.htm#expressions">Ausdrücke (Expressions)</a>.</p>
<p>Ausdrücke sind nützlich, um eine oder mehrere Operationen in Verbindung mit mehreren Variablen, direkt geschriebenen Zeichenketten und/oder direkt geschriebenen Zahlen durchzuführen.</p>
<p>Die Namen der Variablen dürfen innerhalb eines Ausdrucks nicht mit Prozentzeichen umschlossen werden (nur wenn es <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> und anderweitige <a href="#ref">Doppelverweise</a> sind). Direkt geschriebene Zeichenketten müssen demzufolge in Anführungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe &lt;&gt; "Blau")
    MsgBox "Die Einstellung ist zu hoch oder die Farbe ist falsch."</pre>
<p>Im obigen Beispiel wurde "Blau" in Anführungszeichen gesetzt, weil es eine direkt geschriebene Zeichenkette ist. Einfache Anführungszeichen (') und doppelte Anführungszeichen (") sind funktionsgemäß identisch, außer dass eine Zeichenkette, die von einfachen Anführungszeichen umschlossen ist, direkt geschriebene doppelte Anführungszeichen enthalten kann, und umgekehrt. Um ein <em>tatsächliches</em> Anführungszeichen innerhalb einer direkt geschriebenen Zeichenkette einzufügen, muss das Anführungszeichen entweder mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden oder die Zeichenkette von gegenteiligen Anführungszeichen umschlossen werden. Zum Beispiel:</p>
<pre>MsgBox "Sie sagte: <span class="red">`"</span>Ein Apfel pro Tag.<span class="red">`"</span>"
MsgBox <span class="red">'</span>Sie sagte: "Ein Apfel pro Tag."<span class="red">'</span></pre>
<p><strong>Leere Zeichenketten</strong>: Um eine leere Zeichenkette in einem Ausdruck anzugeben, verwendet man ein leeres Anführungszeichen-Paar. Zum Beispiel wäre die Anweisung <code>if (MeineVar &lt;&gt; "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist.</p>
<p><strong>Speichern eines Ausdruckswertes</strong>: Mit dem <a href="commands/SetExpression.htm">Operator ":="</a> kann der Wert bzw. das Ergebnis eines Ausdrucks in eine Variable gespeichert werden. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Logische Werte</strong>: Das Ergebnis eines Ausdrucks (z. B. einer IF-Anweisung) ist falsch (False), wenn es leer oder eine 0 ist, oder wahr (True), wenn ein anderes Ergebnis vorliegt. Zum Beispiel wäre die Anweisung <code>if ItemCount</code> nur dann falsch, wenn ItemCount leer oder 0 ist. Der Ausdruck <code>if not ItemCount</code> würde das gegenteilige Ergebnis liefern.</p>
<p>Operatoren wie NOT/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: 1 für True und 0 für False. Die Operatoren AND/OR geben immer einen der Eingabewerte zurück. Im folgenden Beispiel bekommt die <em>Done</em>-Variable eine 1 zugewiesen, wenn A_Index größer als 5 ist, oder der Wert von <em>Gefunden</em>, wenn dies nicht der Fall ist:</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>Wie oben angedeutet, kann eine Variable einen falschen Wert enthalten, indem man sie leer macht oder ihr eine 0 zuweist. Verwenden Sie dann die Kurzanweisung <code>if Done</code>, um zu überprüfen, ob die Done-Variable wahr oder falsch ist.</p>
<p><span id="True"></span><span id="False"></span>Innerhalb eines Ausdrucks werden die Schlüsselwörter <em>True</em> und <em>False</em> in 1 und 0 aufgelöst. Sie können verwendet werden, um ein Skript besser lesbar zu machen, z. B.:</p>
<pre>GroßKleinSensitiv := false
SucheFortsetzen := true</pre>
<p id="numbers"><strong>Integer (ganze Zahl) und Floating-Point (Gleitkommazahl)</strong>: Zahlen, die einen Dezimalpunkt enthalten oder in wissenschaftlicher Schreibweise geschrieben sind, werden innerhalb eines Ausdrucks als Gleitkommazahlen gewertet; alle anderen Zahlen werden als Integer behandelt. Bei den meisten Operatoren -- wie Addition und Multiplikation -- gilt: Wenn einer der Eingabewerte eine Gleitkommazahl ist, wird das Ergebnis auch eine Gleitkommazahl sein.</p>
<p>Integer können sowohl innerhalb als auch außerhalb von Ausdrücken im hexadezimalen oder dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel wäre <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. Optional können Gleitkommazahlen mithilfe der wissenschaftlichen Schreibweise angegeben werden, mit oder ohne Dezimalpunkt (z. B. <code>1e4</code> oder <code>-2.1E-4</code>).</p>
<p>Innerhalb von Ausdrücken werden direkt angegebene Zahlen ohne Anführungszeichen wie <code>128</code>, <code>0x7F</code> und <code>1.0</code> in reine Zahlen umgewandelt, bevor das Skript seine Ausführung beginnt. Das heißt, dass die Zahl-Zeichenkette-Konvertierung einen Wert erzeugen würde, der vom originalen direkt geschriebenen Wert abweicht. Zum Beispiel:</p>
<pre>MsgBox(0x7F)  <em>; Zeigt 128</em>
MsgBox(1.00)  <em>; Zeigt 1.0</em></pre>

<h2 id="Operators">Operatoren innerhalb von Ausdrücken</h2>
<p class="note">Allgemeine Informationen über Operatoren finden Sie unter <a href="Language.htm#operators">Operatoren</a>.</p>
<p>In einer mathematischen Operation werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte <strong>nicht</strong> als 0 gewertet, wenn nicht anders unten angegeben. Stattdessen wird eine Ausnahme ausgelöst. Wenn <a href="commands/Try.htm">Try</a> nicht verwendet wird, führt die unbehandelte Ausnahme standardmäßig zu einer Fehlermeldung.</p>

<h3 id="operators">Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr id="ref">
    <td style="text-align:center; white-space:nowrap"><strong>%Ausdr%</strong></td>
    <td>
      <p>Wertet den Teilausdruck <em>Ausdr</em> aus und benutzt seinen Wert als Namen oder Teilnamen einer Variable oder Funktionen. Dadurch kann das Skript auf eine Variable oder Funktion verweisen, deren Name nicht direkt im Skript vorkommt, aber durch Auswerten von <em>Ausdr</em> ermittelt werden kann, was typischerweise eine andere Variable ist. Prozentzeichen können wegen ihrer Mehrdeutigkeit nicht direkt in <em>Ausdr</em> benutzt werden, aber sie können innerhalb von runden Klammern ineinander verschachtelt werden. Ansonsten kann <em>Ausdr</em> ein beliebiger Ausdruck sein.</p>
      <p><code>%Ausdr%()</code> führt einen <a href="Functions.htm#DynCall">dynamischen Funktionsaufruf</a> aus.</p>
      <p><code>%Ausdr%</code> ruft dynamisch eine Variable via Name ab. Das <u>Ergebnis</u> des Teilausdrucks <em>Ausdr</em> muss der komplette oder teilweise vorhandene Name einer Variable sein, die abgerufen werden soll. Eventuell angrenzende <em>%Ausdr%</em>-Sequenzen und teilweise vorhandene <a href="Concepts.htm#names">Variablennamen</a> (ohne Leerzeichen oder sonstigen Zeichen dazwischen) werden kombiniert, um einen einzelnen Namen zu bilden.</p>
      <p>Wenn die Variable noch nicht existieren sollte, wird eine leere Variable erstellt. Eine <a href="commands/Throw.htm#Exception">Ausnahme</a> wird ausgelöst, wenn der Name <a href="Concepts.htm#names">ungültig</a> ist.</p>
      <p>Meistens wird das verwendet, um auf <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente zu verweisen, wie z. B:</p>
      <pre>Loop 4
    MsgBox("IP-Adresse " A_Index " ist " <a href="#IPAddress">A_IPAddress</a>%<a href="commands/Loop.htm">A_Index</a>%)</pre>
      <p>Obwohl diese Vorgehensweise historisch gesehen als "Doppel-Dereferenzierung" bekannt ist, ist dieser Begriff ungenau, wenn <em>Ausdr</em> keine Variable enthält (erste Derefenzierung), und wenn die resultierende Variable, die das Ziel einer Zuweisung ist, nicht dereferenziert wird (zweite Derefenzierung).</p>
    </td>
  </tr>
  <tr id="objdot">
    <td style="text-align:center"><strong>x.y</strong></td>
    <td><strong>Zugriff auf Objektelemente</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei muss <i>y</i> ein direkt geschriebener Name sein. Siehe <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>.</td>
  </tr>
  <tr id="new">
    <td style="text-align:center"><strong>new</strong></td>
    <td><code>new <i>Klasse</i></code> oder <code>new <i>Klasse</i>(<i>Params</i>)</code> erstellt ein neues von <em>Klasse</em> abgeleitetes Objekt. Zum Beispiel wäre <code>x := new y</code> generell das gleiche wie <code>x := {base: y}</code>. <em>Klasse</em> kann nahezu jeder Ausdruck sein, der ein Klassenobjekt erzeugt, und ist üblicherweise ein Klassenname wie <code>GlobaleKlasse</code> oder <code>GlobaleKlasse.Unterklasse</code>. Komplexere Fälle wie <code>new new (getClass())(params1)(params2)</code> werden ebenfalls unterstützt, aber es dürfen kein Leerzeichen zwischen dem Klassenausdruck und der Parameterliste vorkommen. Weitere Informationen finden Sie unter <a href="Objects.htm#Custom_Objects">Benutzerdefinierte Objekte</a>.</td>
  </tr>
  <tr id="IncDec">
    <td style="text-align:center"><strong>++<br>
    
    --</strong></td>
    <td>
      <p><strong>Vorherige und nachherige Inkrementierung/Dekrementierung</strong>. Erhöht oder verringert eine Zahlenvariable um 1. Der Operator kann entweder vor oder nach dem Namen einer Variable erfolgen. Erfolgt der Operator <em>vor</em> dem Namen, wird die Operation sofort durchgeführt und ihr Ergebnis für die nächste Operation verwendet. Zum Beispiel würde <code>Var := ++X</code> die X-Variable sofort um 1 erhöhen und ihr Wert in <em>Var</em> speichern. Erfolgt der Operator <em>nach</em> dem Namen einer Variable, wird die Operation <em>erst</em> durchgeführt, wenn die Variable für die nächste Operation verwendet wurde. Zum Beispiel würde <code>Var := X++</code> die X-Variable erst um 1 erhöhen, wenn der aktuelle Wert von X in <em>Var</em> gespeichert wurde.</p>
    </td>
  </tr>
  <tr id="pow">
    <td style="text-align:center"><strong>**</strong></td>
    <td>
      <p><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Ist der Exponent negativ, wird das Ergebnis in eine Gleitkommazahl umgewandelt, auch dann, wenn die Basis und der Exponent Integer sind. Da dieser Operator eine höhere Priorität hat als ein unäres Minuszeichen, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um also eine direkt geschriebene negative Zahl zu potenzieren, muss sie in runden Klammern gesetzt werden, z. B <code>(-2)**2</code> .</p>
      <p class="note"><strong>Hinweis</strong>: Eine negative Basis in Verbindung mit einem gebrochenen Exponenten wie <code>(-2)**0.5</code> wird nicht unterstützt; Beim Versuch, dies zu tun, wird eine Ausnahme ausgelöst. Schreibweisen wie <code>(-2)**2</code> und <code>(-2)**2.0</code> werden aber unterstützt.</p>
    </td>
  </tr>
  <tr id="unary">
    <td style="text-align:center"><strong>-<br>
    
    !<br>
    
    ~<br>
    
    &amp;</strong></td>
    <td>
      <p><strong>Einstelliges Minuszeichen (-)</strong>: Invertiert das Vorzeichen des Operanden.</p>
      <p><strong>Einstelliges Pluszeichen (+)</strong>: <code>+N</code> ist das gleiche wie <code>-(-N)</code>. Dieser Operator hat keinen Effekt, wenn er auf eine reine Zahl angewendet wird, aber er ist nützlich, um numerische Zeichenketten in reine Zahlen zu konvertieren.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn der Operand leer oder 0 ist, wird das Ergebnis nach Anwenden des logischen NICHTs eine 1 sein, also "wahr". Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das Synonym zu <strong>!</strong>, allerdings hat <strong>!</strong> eine höhere Priorität. Aufeinanderfolgende unäre Operatoren wie <code><strong>!!</strong>Var</code> sind erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dieser Operator invertiert jedes Bit seines Operanden. Handelt es sich bei den Operanden um eine Gleitkommazahl, wird er vor der Berechnung auf Integer-Größe gekürzt. Bei Verwendung von vorzeichenbehafteten 64-Bit-Integern ergibt ein positiver Eingabewert immer ein negatives Ergebnis und umgekehrt. Zum Beispiel wird <code>~0xf0f</code> zu -0xf10 (-3856) ausgewertet, was das binäre Äquivalent zu 0xfffffffffffff0f0 ist. Wenn ein vorzeichenloser 32-Bit-Wert beabsichtigt ist, kann das Ergebnis mit <code><i>Ergebnis</i> &amp; 0xffffffff</code> gekürzt werden.</p>
      <p id="amp"><strong>Adresse (&amp;)</strong>: <code>&amp;MeineVar</code> ruft die Adresse des Inhalts von <em>MeineVar</em> im Speicher ab, wobei <em>MeineVar</em> eine benutzerdefinierte Variable ist. Der Inhalt von <em>MeineVar</em> kann eine Zeichenkette, ein 64-Bit-Integer, eine 64-Bit-Gleitkommazahl oder ein Objekt sein. Dieser Operator wird häufig in Verbindung mit <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> genutzt.</p>
      <p>Der Adressoperator kann in Verbindung mit anderen Zeichenketten genutzt werden, wie z. B. <code>&amp;"Zeichenkette"</code>, <code>&amp;(x . y)</code> oder <code>&amp;A_LoopField</code>, allerdings gelten folgende Einschränkungen:</p>
      <ul>
        <li>Der adressierte Speicher sollte niemals verändert werden, z. B. wenn man ihn an einen DllCall-Ausgabeparameter übergibt.</li>
        <li>Eine Adresse, die von einem temporären Wert stammt (auch die Rückgabewerte von internen Variablen), darf nur solange als gültig angesehen werden, bis die Auswertung des Ausdrucks oder die <a href="Language.htm#function-call-statements">Funktionsaufrufanweisung</a> abgeschlossen ist. Danach wird der Speicher eventuell für etwas anderes benutzt.</li>
      </ul>
    </td>
  </tr>
  <tr id="MulDiv">
    <td style="text-align:center"><strong>*<br>
    
    /<br>
    
    //
    
    </strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind; ansonsten ist es eine Gleitkommazahl.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Das Sternchensymbol (*) kann auch in <a href="Functions.htm#VariadicCall">variadischen Funktionsaufrufen</a> genutzt werden.</p>
      <p id="divide"><strong>Echtes Dividieren (/)</strong>: Die echte Division wird immer eine Gleitkommazahl liefern, sogar wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>3/2</code> gleich 1.5 statt 1, und <code>4/2</code> gleich 2.0 statt 2.</p>
      <p id="FloorDivide"><strong>Floor-Dividieren (//)</strong>: Der Doppelschrägstrich-Operator greift auf die hoch-performante Integer-Division zurück, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>5//3</code> gleich 1 und <code>5//-3</code> gleich -1. Wenn einer der beiden Eingabewerte eine Gleitkommazahl ist, wird die Gleitkomma-Division erfolgen und das Ergebnis auf den nächstmöglichen links befindlichen Integer gekürzt. Zum Beispiel wäre <code>5//3.0</code> gleich 1.0 und <code>5.0//-3</code> gleich -2.0. Obwohl das Ergebnis dieser Gleitkomma-Division ein Integer ist, wird es in nachfolgenden Operationen als Gleitkommazahl behandelt. Um mehr über Modulo zu erfahren, siehe <a href="commands/Math.htm#Mod">Mod</a>.</p>
    <p>Die Operatoren <a href="#AssignOp">*=</a> und <a href="#AssignOp">/=</a> sind eine Kurzschreibweise zum Multiplizieren oder Dividieren eines Variablenwertes mit einem anderen Wert. <code>Var *= 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var * 2</code> (obwohl die erste Methode performanter ist).</p>
    <p>Eine Division durch Null bewirkt, dass eine Ausnahme ausgelöst wird.</p></td>
  </tr>
  <tr id="AddSub">
    <td style="text-align:center"><strong>+<br>
    
    -</strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Die Operatoren <a href="#AssignOp"><strong>+=</strong></a> und <a href="#AssignOp"><strong>-=</strong></a> sind eine Kurzschreibweise zum Erhöhen oder Verringern eines Variablenwertes. <code>Var += 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var + 2</code> (obwohl die erste Methode performanter ist). Desweiteren kann eine Variable mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> schrittweise um 1 erhöht oder verringert werden.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Wenn das Plus- oder Minuszeichen keinen Wert (oder Teilausdruck, der einen Wert zurückgibt) davor hat, wird es stattdessen als <a href="#unary">unärer Operator</a> interpretiert.</p>
    </td>
  </tr>
  <tr id="bitshift">
    <td style="text-align:center"><strong>&lt;&lt;<br>
    
    &gt;&gt;</strong></td>
    <td><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong> und <strong>nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Jeder Eingabewert im Gleitkommaformat wird vor der Berechnung zu einem Integer gekürzt. Die bitweise Verschiebung nach links (<strong>&lt;&lt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" multiplizieren. Die bitweise Verschiebung nach rechts (<strong>&gt;&gt;</strong>) wäre das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" dividieren und dann das Ergebnis auf den nächstmöglichen links befindlichen Integer runden; zum Beispiel wäre <code>-3&gt;&gt;1</code> gleich -2.</td>
  </tr>
  <tr id="bitwise">
    <td style="text-align:center"><strong>&amp;<br>
      
      ^<br>
      
      |
    
    </strong></td>
    <td>
      <p><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität. Jeder Eingabewert im Gleitkommaformat wird vor der Berechnung zu einem Integer gekürzt.</p>
      <p>Siehe auch: <a href="#unary">Bitweises NICHT (~)</a></p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Wenn das Und-Zeichen keinen Wert (oder Teilausdruck, der einen Wert zurückgibt) davor hat, wird es stattdessen als <a href="#unary">Adressoperator</a> interpretiert.</p>
    </td>
  </tr>
  <tr id="concat">
    <td style="text-align:center"><strong>.</strong></td>
    <td>
      <p><strong>Verkettung</strong>. Ein Punkt mit mindestens einem Leer- oder Tabulatorzeichen auf jeder Seite dient dazu, zwei Elemente zu einer einzigen Zeichenkette zu kombinieren. Sie können diesen Punkt auch weglassen, um dasselbe Ergebnis zu erzielen (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das rechts befindliche Element ein ++ oder -- davor hat). Fehlt der Punkt, müssen die Elemente, die zusammengeführt werden sollen, mit mindestens einem Leerzeichen getrennt werden.</p>
      <pre>Var := "Die Farbe ist " <strong>.</strong> GefundeneFarbe  <em>; Explizite Verkettung</em>
Var := "Die Farbe ist " GefundeneFarbe    <em>; Auto-Verkettung</em>
</pre>
      <p>Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
      <p>Eine Zeile, die mit einem Punkt (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p>
      <p>Es wird immer die komplette <a href="commands/StrLen.htm">Länge</a> von jedem Eingabewert benutzt, sogar wenn binäre Nullen enthalten sind. <code>Chr(0x2010) Chr(0x0000) Chr(0x4030)</code> würde beispielsweise die folgende Zeichenkette in Bytes erzeugen (wegen der UTF-16-LE-Codierung): 0x10, 0x20, 0, 0, 0x30, 0x40. Das Ergebnis hat einen zusätzlichen Null-Terminator (binäre Null), der beim Messen der Länge nicht miteinbezogen wird.</p>
      <p><strong>Andere Einsatzmöglichkeiten</strong>: Wenn ein Punkt ohne vorangestelltem Leer- oder Tabulatorzeichen angegeben ist, wird es entweder als <a href="#numbers">Gleitkommazahl</a> oder <a href="#objdot">Objektzugriff</a> interpretiert. Zum Beispiel ist <code>1.1</code> oder <code>(.5)</code> eine Zahl, <code>A_Args.Length()</code> ein Methodenaufruf und <code>meinArray.1</code> das gleiche wie <code>meinArray[1]</code>.</p>
    </td>
  </tr>
  <tr id="regex">
    <td style="text-align:center"><strong>~=</strong></td>
    <td>Kurzschreibweise für <a href="commands/RegExMatch.htm">RegExMatch</a>. <code>"abc123" ~= "\d"</code> würde beispielsweise eine 4 liefern (die Position des ersten numerischen Zeichens).</td>
  </tr>
  <tr id="compare">
    <td style="text-align:center"><strong>&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    
    &gt;= &lt;=</strong></td>
    <td>
      <p><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn einer der beiden Eingabewerte nicht-numerisch ist (oder wenn beide Eingabewerte Zeichenketten sind), werden sie alphabetisch verglichen. Zum Beispiel wäre 2 &lt; "10" <em>True</em>, während "2" &lt; "10" <em>False</em> ist. Der Vergleich unterscheidet nur zwischen Groß- und Kleinschreibung, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> aktiviert ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></p>
      <p>Diese Operatoren vergleichen die Zeichenketten nur bis zur ersten binären Null.</p>
    </td>
  </tr>
  <tr id="equal">
    <td style="text-align:center"><strong>=<br>
      
      ==<br>
    
    &lt;&gt; !=</strong></td>
    <td>
      <p><strong>Gleich (=)</strong>, <strong>Groß-/Kleinschreibung-sensitiv gleich (==)</strong> und <strong>ungleich (&lt;&gt; oder !=)</strong>. Die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> sind funktional identisch. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich, wenn beide Eingabewerte numerisch sind. Wenn dies nicht der Fall ist, wird <strong>==</strong> immer Groß-/Kleinschreibung-sensitiv sein und <strong>=</strong> immer nicht-Groß-/Kleinschreibung-sensitiv sein (die Methode der Nicht-Sensitivität ist abhängig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Die Operatoren <strong>&lt;&gt;</strong> und <strong>!=</strong> berücksichtigen hingegen <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</p>
      <p>Mit dem <strong>==</strong>-Operator können Zeichenketten verglichen werden, die binäre Nullen enthalten. Alle anderen Vergleichsoperatoren, außer <strong>~=</strong>, vergleichen Zeichenketten nur bis zur ersten binären Null.</p>
    </td>
  </tr>
  <tr>
    <td align="center"><strong>IS</strong><br><strong>IN</strong><br><strong>CONTAINS</strong></td>
    <td id="is">
      <p><code><i>Wert</i> <strong>is</strong> <i>Typ</i></code>: Gibt wahr zurück (1), wenn <em>Wert</em> der angegebene <em>Typ</em> ist, oder ansonsten falsch (0). Einzelheiten finden Sie unter <a href="commands/is.htm"><em>Wert</em> is <em>Typ</em></a>.</p>
      <p><code id="in"><strong>in</strong></code> und <code id="contains"><strong>contains</strong></code> sind für die zukünftige Verwendung reserviert.</p>
    </td>
  </tr>
  <tr id="not">
    <td style="text-align:center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von seiner geringeren Priorität ist dieser Operator funktional identisch zum <strong>!</strong>-Operator. <code>not (x = 3 or y = 3)</code> wäre zum Beispiel das gleiche wie <code><strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr id="and">
    <td style="text-align:center"><strong>AND<br>
    
    &amp;&amp;</strong></td>
    <td><p>Beide Operatoren sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>.</p>
      <p>Wenn das x in dem Ausdruck <code>x and y</code> <a href="#Boolean">wahr</a> ist, wird y zurückgegeben. Ansonsten wird x zurückgegeben und y überhaupt nicht ausgewertet - es wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet, um die Performance zu verbessern. Obwohl das Ergebnis nicht auf eine logische 0 oder 1 begrenzt ist, kann es, wie jeder anderer Ausdruck auch, als <a href="#Boolean">logischer</a> Wert interpretiert werden. Das Ergebnis ist nur dann wahr, wenn beide Eingabewerte wahr sind.</p>
      <p>Eine Zeile, die mit AND/OR/&amp;&amp;/|| (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p>
      </td>
  </tr>
  <tr id="or">
    <td style="text-align:center"><strong>OR<br>
    
    ||</strong></td>
    <td><p>Beide Operatoren sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>.</p>
      <p>In dem Ausdruck <em>x or y</em> ist y das Ergebnis, wenn x <a href="#Boolean">False</a> ist. Ansonsten wird x zurückgegeben und y überhaupt nicht ausgewertet - es wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet, um die Performance zu verbessern. Obwohl das Ergebnis nicht auf eine logische 0 oder 1 begrenzt ist, kann es, wie jeder anderer Ausdruck auch, als <a href="#Boolean">logischer</a> Wert interpretiert werden. Tatsächlich kann das Ergebnis nur True sein, wenn einer der beiden Eingabewerte auch True ist.</p></td>
  </tr>
  <tr id="ternary">
    <td style="text-align:center"><strong>?:</strong></td>
    <td><p><strong>Ternärer Operator</strong>. Dieser Operator ist eine Kurzschreibweise zum Durchführen einer <a href="commands/IfExpression.htm">if-else-Anweisung</a>. Der Operator wertet die Bedingung auf der linken Seite aus, um festzustellen, welche der beiden Verzweigungen als Endergebnis dienen soll. <code>Var := x&gt;y ? 2 : 3</code> würde beispielsweise eine 2 in <em>Var</em> speichern, falls x größer als y ist; ansonsten wird eine 3 gespeichert. Zur Verbesserung der Performance wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</p></td>
  </tr>
  <tr id="AssignOp">
    <td style="text-align:center"><strong>:=<br>
        
        +=<br>
        
        -=<br>
        
        *=<br>
        
        /=<br>
        
        //=<br>
        
        .=<br>
        
        |=<br>
        
        &amp;=<br>
        
        ^=<br>
        
        &gt;&gt;=<br>
        
        &lt;&lt;=</strong>
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in die gleiche Variable. Der einfachste Zuweisungsoperator ist der <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, der verwendet wird, um das Ergebnis eines Ausdrucks in eine Variable zu speichern. Eine Beschreibung der anderen Operatoren finden Sie in den entsprechenden Einträgen dieser Tabelle. <code>Var //= 2</code> führt beispielsweise eine <a href="#FloorDivide">Floor-Division</a> durch, um <em>Var</em> durch 2 zu teilen, und speichert dann das Ergebnis wieder in <em>Var</em>. Ein weiteres Beispiel ist <code>Var <strong>.=</strong> "abc"</code>, das die Kurzschreibweise für <code>Var := Var <strong>.</strong> "abc"</code> wäre.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Eine Zeile wie <code>Var1 := Var2 := 0</code> würde also erst eine 0 in <em>Var2</em> speichern und dann <em>Var2</em> in <em>Var1</em> speichern.</p>
    <p>Verwendet man eine Zuweisung im Eingabewert eines anderen Operators, wird die Variable selbst als Eingabewert genommen. Der Ausdruck <code>(Var += 2) &gt; 50</code> wäre beispielsweise wahr, wenn der gerade eben erhöhte Wert in <em>Var</em> größer als 50 ist. Eine auf diese Weise verwendete Zuweisung kann auch via Verweis (<a href="Functions.htm#ByRef">ByRef</a>) übergeben werden, oder ihre <a href="#amp">Adresse</a> zurückgeben; zum Beispiel: <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren erhöht sich automatisch, wenn dadurch ein Syntaxfehler verhindert oder ein besseres Verhalten bereitgestellt werden kann. Zum Beispiel: <code>not x := y</code> würde als <code>not (x := y)</code> ausgewertet werden. <code>++Var := X</code> würde als <code>++(Var := X)</code> ausgewertet werden; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> würde als <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet werden.</p>
    </td>
  </tr>
  <tr id="fat-arrow">
    <td><strong>() =&gt;</strong> <em>Ausdr</em></td>
    <td>
      <p><strong>Fat-Arrow-Funktion</strong>. Definiert eine einfache <a href="Functions.htm">Funktion</a> und gibt ein <a href="objects/Func.htm">Func</a>- oder <a href="Functions.htm#closures">Closure</a>-Objekt zurück. Schreiben Sie die <a href="Functions.htm#param">Parameterliste</a> der Funktion (optional mit einem Funktionsnamen davor) links neben den Operator. Wenn die Funktion aufgerufen wird (über den zurückgegebenen Verweis), wertet sie den Teilausdruck <em>Ausdr</em> aus und gibt das Ergebnis zurück.</p>
      <p>Die folgenden zwei Beispiele sind funktionsgemäß identisch:</p>
      <pre>sumfn := Sum(a, b) =&gt; a + b</pre>
      <pre>Sum(a, b) {
    return a + b
}
sumfn := Func("Sum")</pre>
      <p>In beiden Fällen wird die Funktion zum Zeitpunkt des Skriptstarts <strong>bedingungslos</strong> definiert, allerdings wird der Funktionsverweis nur in <em>sumfn</em> gespeichert, wenn die Zuweisung ausgewertet wird.</p>
      <p>Wenn der Funktionsname fehlt und die Parameterliste nur aus einem einzigen Parameternamen besteht, können die runden Klammern weggelassen werden. Das folgende Beispiel definiert eine anonyme Funktion mit einem Parameter <code>a</code> und speichert ihren Verweis in die Variable <code>double</code>:</p>
      <pre>double := a =&gt; a * 2</pre>
      <p>Das Auflösen von Variablenverweisen in <em>Ausdr</em> erfolgt wie bei der entsprechenden Vollfunktionsdefinition. Zum Beispiel könnte <em>Ausdr</em> auf die lokalen Variablen einer äußeren Funktion verweisen (wie in jeder <a href="Functions.htm#nested">verschachtelten Funktion</a>), woraufhin ein neues <a href="Functions.htm#closures">Closure</a> erzeugt wird, das jedes Mal seinen Wert zurückgibt, wenn der Fat-Arrow-Ausdruck ausgewertet wird. Die Funktion ist <a href="Functions.htm#AssumeLocal">Assume-Local</a>, wenn sie innerhalb einer anderen Funktion ist, ansonsten ist sie <a href="Functions.htm#AssumeGlobal">Assume-Global</a>.</p>
      <p>Gibt man der Funktion einen Namen, kann sie rekursiv oder von anderen verschachtelten Funktionen aufgerufen werden, ohne dass in der Funktion selbst ein Verweis zum <a href="Functions.htm#closures">Closure</a> gespeichert werden muss (und dadurch ein problematischer <a href="Objects.htm#Circular_References">Zirkelbezug</a> entsteht). So ein Name kann auch beim Debuggen helfen, vor allem in Bezug auf <a href="objects/Func.htm#Name">Func.Name</a> oder wenn der Name im Aufrufstapel des Debuggers angezeigt wird.</p>
    </td>
    
  </tr>
  <tr id="comma">
    <td style="text-align:center"><strong>,</strong></td>
    <td><p><strong>Komma (Mehrfachanweisung)</strong>. Kommas können genutzt werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Diese Vorgehensweise wird häufig angewendet, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, MeineFunk()</code>. Solche Anweisungen werden von links nach rechts ausgeführt.</p>
      <p class="note"><strong>Hinweis</strong>: Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Komma-Performance</a>.</p>
      <p>Das Komma wird auch benutzt, um die Parameter eines Funktionsaufrufs oder einer Ablaufsteuerungsanweisung voneinander zu trennen. Um eine Mehrfachanweisung in eine Parameterliste einzufügen, umschließt man sie mit einem zusätzlichen Paar von runden Klammern. <code>MeineFn((x, y))</code> beispielsweise wertet x und y aus, aber übergibt nur y als einzigen Parameter von MeineFn.</p>
    </td>
  </tr>
</table>
<p>Die folgenden Arten von Teilausdrücken überschreiben die Priorität bzw. die Reihenfolge der Auswertung:</p>
<table class="info">
  <tr>
    <td style="text-align:center"><strong>(</strong><em>Ausdruck</em><strong>)</strong></td>
    <td><p>Ein beliebiger in Klammern gesetzter Teilausdruck. <code>(3 + 2) * 2</code> beispielsweise würde <code>3 + 2</code> zuerst auswerten.</p></td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>Mod<br>
        
        Round<br>
    
    Abs</strong></p></td>
    <td><strong>Funktionsaufruf</strong>. Der Name einer Funktion muss unmittelbar danach mit einer runden Startklammer beginnen, ohne Leer- oder Tabulatorzeichen dazwischen. Einzelheiten finden Sie unter <a href="Functions.htm">Funktionen</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center; white-space:nowrap"><p><strong>%</strong><em>func</em><strong>%()</strong></p></td>
    <td>Siehe <a href="Functions.htm#DynCall">Dynamisches Aufrufen einer Funktion</a>.</td>
  </tr>
  <tr>
    <td style="text-align:center">Fn(<strong><em>Parameter</em>*</strong>)</td>
    <td><p><a href="Functions.htm#VariadicCall">Variadischer Funktionsaufruf</a>. <em>Parameter</em> ist ein Array (Objekt), das Parameterwerte enthält.</p></td>
  </tr>
  <tr id="square-brackets">
    <td style="text-align:center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><strong>Zugriff auf Objektelemente</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei muss <i>y</i> eine Parameterliste sein, oder ein Ausdruck, der einen Methodennamen zurückgibt.</p>
      <p><strong>Direkte Array-Schreibweise</strong>. Wenn vor der eckigen Startklammer kein Wert (oder Teilausdruck, der einen Wert zurückgibt) angegeben ist, wird sie stattdessen als Beginn eines direkt geschriebenen Arrays interpretiert. <code>[a, b, c]</code> ist beispielsweise das gleiche wie <code>Array(a, b, c)</code> (a, b und c sind Variablen).</p>
      <p>Siehe <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objekt-Syntax</a>, um mehr zu erfahren.</p>
    </td>
  </tr>
  <tr id="curly-braces">
    <td style="text-align:center"><strong>{a: b, c: d}</strong></td>
    <td><p><strong>Direkte Objekt-Schreibweise</strong>. Erstellt ein Objekt oder assoziatives Array. <code>x := {a: b}</code> ist beispielsweise das gleiche wie <code>x := Object("a", b)</code> oder <code>x := Object(), x.a := b</code>. Siehe <a href="Objects.htm#Usage_Associative_Arrays">Assoziative Arrays</a>, um mehr zu erfahren.</p></td>
  </tr>
</table>
<br>
<p id="CommaPerf"><strong>Performance</strong>: Ausdrücke, die mit einem Komma getrennt werden, sind performanter als einzeln geschriebene Ausdrücke, besonders wenn es darum geht, eine Variable in eine andere Variable zu speichern (z. B. <code>x := y, a := b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck zusammengefasst werden, desto höher ist die Performance; zum Beispiel könnte man ein Geschwindigkeitszuwachs von 35 % erreichen, wenn man fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombiniert.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und normal abrufbar.</p>
<p class="note">Allgemeine Informationen finden Sie unter <a href="Concepts.htm#built-in-variables">Interne Variablen</a>.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skript-Eigenschaften: <a href="#Args">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skript-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#ListLines">A_ListLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Inaktive Zeit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>, <a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>, <a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#EventInfo">A_EventInfo</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr id="Space">
    <td>A_Space</td>
    <td>Enthält ein einzelnes Leerzeichen.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Enthält ein einzelnes Tabulatorzeichen.</td>
  </tr>
</table>
<h3 id="prop">Skript-Eigenschaften</h3>
<table class="info">
  <tr id="Args">
    <td>A_Args</td>
    <td><strong>Liest/Schreibt</strong> einen <a href="Objects.htm#Usage_Simple_Arrays">Array</a> mit Befehlszeilenparametern. Weitere Informationen finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td><p><strong>Liest/Schreibt</strong> das aktuelle Arbeitsverzeichnis, von wo aus das Skript standardmäßig auf Dateien zugreift. Der letzte umgekehrte Schrägstrich ist nicht enthalten, es sein denn, es ist das Stammverzeichnis. Zwei Beispiele: <code>C:\</code> und <code>C:\Meine Dokumente</code>.</p>
    <p>Alternativ kann mit <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> das Arbeitsverzeichnis geändert werden.</p>
    <p>Das Arbeitsverzeichnis des Skripts ist standardmäßig immer A_ScriptDir, egal wie das Skript gestartet wurde.</p></td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir</td>
    <td>Das anfängliche Arbeitsverzeichnis richtet sich danach, wie das Skript gestartet wurde. Startet man das Skript beispielsweise über eine Verknüpfung (z. B. via Startmenü), wird sein initiales Arbeitsverzeichnis durch das Feld "Ausführen in" im Eigenschaftsfenster dieser Verknüpfung bestimmt.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfad des Verzeichnisses, wo das aktuelle Skript zu finden ist. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td><strong>Lesen/Schreiben:</strong> Der Standardtitel für MsgBox, InputBox, FileSelect, DirSelect und GuiCreate. Wenn dieser Variable keinen Wert zugewiesen wird, gilt standardmäßig der Dateiname des aktuellen Skripts, ohne Pfad, z. B. MeinSkript.ahk.</td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>Der vollständige Pfad des aktuellen Skripts, z. B. C:\Meine Dokumente\MeinSkript.ahk</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd</td>
    <td>Die Eindeutige ID (HWND/Handle) des versteckten Skript-<a href="Program.htm#main-window">Hauptfensters</a>.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder die Zeile aus einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer stimmt mit der angezeigten Zeilennummer in <a href="commands/ListLines.htm">ListLines</a> überein; diese Variable ist zum Beispiel nützlich, um einen Fehler zu melden: <code>MsgBox "Eine Zeile konnte nicht in die Log-Datei geschrieben werden (Zeilennummer " A_LineNumber ")"</code>.</p>
    <p>Da beim <a href="Scripts.htm#ahk2exe">Kompilieren eines Skripts</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zusammengefügt werden, sind die Zeilen eventuell anders nummeriert als im nicht-kompilierten Modus.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>Der vollständige Pfad der Datei, auf der sich <a href="#LineNumber">A_LineNumber</a> bezieht, und prinzipiell das gleiche ist wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, es sei denn, die Zeile gehört zu einer <a href="commands/_Include.htm">#Include-Datei</a> eines nicht-kompilierten Skripts.</td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc</td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeineFunktion. Siehe auch: <a href="commands/IsFunc.htm">IsFunc</a></td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel</td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeinLabel. Diese Variable wird jedes Mal aktualisiert, wenn das Skript <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. Sie wird auch aktualisiert, wenn ein Label automatisch durch <a href="commands/SetTimer.htm">Timer</a>, <a href="objects/GuiOnEvent.htm#Threads">GUI-Threads</a>, <a href="objects/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a> aufgerufen wird. A_ThisLabel wird jedoch nicht aktualisiert, wenn die Skriptausführung in eines der oben genannten Label "hineinfällt"; in diesem Fall behält A_ThisLabel ihren vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="commands/IsLabel.htm">IsLabel</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>Enthält die Version des AutoHotkey-Programms, mit dem das Skript ausgeführt wird, z. B. 1.0.22. In einem <a href="Scripts.htm#ahk2exe">kompilierten Skript</a> wird die Version des AutoHotkey-Programms gemeldet, mit der das Skript ursprünglich kompiliert worden ist. Aufgrund der Struktur der Versionsnummer kann ein Skript mithilfe von "&gt;" oder "&gt;=" überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist. Zum Beispiel: <code>if (A_AhkVersion &gt;= "1.0.25.07")</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td><p>Bei nicht-kompilierten Skripten: Der vollständige Pfad der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
    <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a>: Das gleiche wie oben, allerdings wird das AutoHotkey-Verzeichnis mithilfe des Registry-Eintrags <em>HKLM\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt. Wenn dieser Eintrag nicht gefunden wird, ist A_AhkPath leer.</p></td>
  </tr><!--tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td>Contains 1 if strings are Unicode (16-bit) and an empty string (which is considered <a href="#Boolean">false</a>) if strings are ANSI (8-bit). The format of strings depends on the version of AutoHotkey.exe which is used to run the script, or if it is compiled, which bin file was used to compile it.</td>
  </tr-->
  
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält eine 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>Das aktuelle 4-stellige Jahr (z. B. 2004). A_Year enthält denselben Wert.</p>
      <p class="note"><strong>Hinweis</strong>: Um die Zeit oder das Datum in einem Format darzustellen, das Ihrem Gebietsschema oder Ihrer Sprache entspricht, verwendet man <code><a href="commands/FormatTime.htm">FormatTime</a>()</code> (Zeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>(, "LongDate")</code> (ermittelt ein Datum im langen Format).</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle zweistellige Monat (01-12). A_Mon enthält denselben Wert.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle zweistellige Tag des Monats (01-31). A_MDay enthält denselben Wert.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle einstellige Wochentag (1-7). 1 ist Sonntag in allen Gebietsschemen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert enthält keine führenden Nullen, z. B. wird 9 abgerufen, nicht 009. Das folgende Beispiel zeigt, wie ein Wert mit führenden Nullen abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>(, "YDay0")</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr + Wochennummer (z. B. 200453) gemäß ISO 8601. Mit <a href="commands/SubStr.htm">SubStr</a> kann das Jahr von der Woche getrennt werden. Genaue Definition von A_YWeek: Wenn die Woche mit dem 1. Januar mindestens vier Tage im neuen Jahr hat, ist sie Woche 1. Ansonsten ist sie die letzte Woche des vorherigen Jahres, und die nachfolgende Woche die erste Woche des neuen Jahres.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format mit den Indikatoren AM bzw. PM abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>(, "h:mm:ss tt")</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle zweistellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle dreistellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die führenden Nullen entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
      <p class="note"><strong>Hinweis</strong>: Mit <a href="commands/DateAdd.htm">DateAdd</a> und <a href="commands/DateDiff.htm">DateDiff</a> können beliebige Datum- und Zeitwerte berechnet werden. Mit <a href="commands/FormatTime.htm">FormatTime</a> können außerdem beliebige Datum- und Zeitwerte in einem Format dargestellt werden, das Ihrem Gebietsschema oder Ihrer Sprache entspricht.</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die Coordinated Universal Time (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Ruft die Zeit in Millisekunden ab, die seit dem Systemstart verstrichen ist. Wenn man A_TickCount in eine Variable speichert und später mit dem neuesten A_TickCount-Wert subtrahiert, erhält man einen Wert, der eine verstrichene Zeit repräsentiert. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep 1000
Laufzeit := A_TickCount - Startzeit
MsgBox Laufzeit " Millisekunden sind verstrichen."</pre>
<p>Schauen Sie sich <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a> an, wenn Sie eine höhere Genauigkeit als die 10 ms von A_TickCount benötigen.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skript-Einstellungen</h3>
<table class="info">
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält eine 1, wenn das Skript via <a href="commands/Suspend.htm">Suspend</a> gesperrt wurde, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused</td>
    <td>Enthält eine 1, wenn der <a href="misc/Threads.htm">Thread</a>, der sich direkt unter dem aktuellen Thread befindet, <a href="commands/Pause.htm">pausiert</a> wurde. Ansonsten enthält sie eine 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical</td>
    <td>Enthält eine 0, wenn <a href="commands/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschaltet ist. Ansonsten enthält sie einen Integer-Wert größer als 0, der die aktuell gesetzte <a href="commands/Critical.htm#Interval">Meldungsüberprüfungsfrequenz</a> von Critical repräsentiert. Der aktuelle Status von Critical kann mithilfe von <code>Alt_IsCritical := A_IsCritical</code> gespeichert und später mit <code>A_IsCritical := Alt_IsCritical</code> wiederhergestellt werden.</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines</td>
    <td><strong>Liest/Schreibt</strong> eine 1, wenn <a href="commands/ListLines.htm">ListLines</a> eingeschaltet ist. Ansonsten enthält sie eine 0.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Übereinstimmungsgeschwindigkeit (fast oder slow) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (On or Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (On, Off, oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><strong>Liest/Schreibt</strong> die Standardcodierung für verschiedene Funktionen; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (Event, Input, Play oder InputThenPlay) von <a href="commands/SendMode.htm">SendMode</a>.</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle <a href="commands/SendLevel.htm">SendLevel</a>-Einstellung (ein Integer zwischen 0 und 100).</td>
  </tr>
  <tr id="StoreCapslockMode">
    <td>A_StoreCapsLockMode</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (On oder Off) von <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    
    A_KeyDuration</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (immer dezimal, niemals hexadezimal).</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    
    A_KeyDurationPlay</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus (immer dezimal, niemals hexadezimal).</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Verzögerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (immer dezimal, nicht hexadezimal).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Verzögerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a>.</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    
    A_MouseDelayPlay</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Verzögerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (immer dezimal, nicht hexadezimal). A_MouseDelay ist für den traditionellen SendEvent-Modus, und A_MouseDelayPlay für <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>.</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    
    A_CoordModePixel<br>
    
    A_CoordModeMouse<br>
    
    A_CoordModeCaret<br>
    
    A_CoordModeMenu</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Modus (Window, Client oder Screen) von <a href="commands/CoordMode.htm">CoordMode</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><strong>Liest/Schreibt</strong> die aktuelle Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="TrayMenu">
    <td>A_TrayMenu</td>
    <td><p>Gibt ein <a href="objects/Menu.htm">Menu-Objekt</a> zurück, das genutzt werden kann, um das Tray-Menü zu ändern oder anzuzeigen.</p></td>
  </tr>
  <tr id="AllowMainWindow">
    <td>A_AllowMainWindow</td>
    <td><p><strong>Liest/Schreibt</strong> eine 1, wenn das Hauptfenster des Skripts über das Tray-Symbol geöffnet werden kann, oder 0, wenn nicht.</p>
    <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a> wird diese Variable standardmäßig auf 0 gesetzt, kann aber durch Zuweisung eines Wertes überschrieben werden. Setzt man diese Variable auf 1, werden außerdem die Menüpunkte im View-Menü des Hauptfensters, wie z. B. "Lines most recently executed", das den Quellcode des Skripts und andere Informationen anzeigt, aktiviert.</p>
    <p>Die folgenden Funktionen können immer das Hauptfenster anzeigen, sofern sie beim Ausführen des Skripts erreicht werden: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/ListVars.htm">ListVars</a>, <a href="commands/ListHotkeys.htm">ListHotkeys</a>, und <a href="commands/KeyHistory.htm">KeyHistory</a>.</p>
    <p>Wenn das Skript nicht kompiliert ist, enthält diese Variable immer eine 1; jegliche Versuche, sie zu ändern, werden ignoriert.</p></td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td><strong>Liest/Schreibt</strong> eine 1, wenn das <a href="Program.htm#tray-icon">Tray-Symbol</a> gerade versteckt ist, oder 0, wenn nicht. Um das Symbol zu verstecken, nutzt man die <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive oder setzt diese Variable auf False.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td><p><strong>Liest/Schreibt</strong> den ToolTip-Text des <a href="Program.htm#tray-icon">Tray-Symbols</a>; dieser wird angezeigt, wenn man die Maus darüber fährt. Wenn diese Variable leer ist, wird stattdessen der Name des Skripts angezeigt.</p>
    <p>Um einen Tooltip mehrzeilig zu machen, trennt man jede Zeile mit einem Zeilenumbruchszeichen (`n), z. B. <code>"Zeile1`nZeile2"</code>. Nur die ersten 127 Zeichen werden angezeigt, außerdem wird der Text beim ersten Tabulatorzeichen, falls vorhanden, gekürzt.</p></td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Enthält den vollständigen Pfad der Symboldatei, die man via <a href="commands/TraySetIcon.htm">TraySetIcon</a> für das <a href="Program.htm#tray-icon">Tray-Symbol</a> definiert hat. Ansonsten ist diese Variable leer.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten enthält diese Variable die Nummer des A_IconFile-Symbols (üblicherweise 1).</td>
  </tr>
</table>
<h3>Inaktive Zeit des Benutzers</h3>
<table class="info">
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit der letzten Eingabe (Tastatur, Maus usw.) verstrichen ist. Diese Variable ist nützlich, um herauszufinden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Skripten (z. B. die <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Funktion) werden diesen Wert wieder auf 0 setzen. Da dieser Wert tendenziell um 10 erhöht wird, ist es ratsam, ihn nicht zu überprüfen, ob er mit einem anderen Wert exakt übereinstimmt. Überprüfen Sie stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel:
<pre>if A_TimeIdle &gt; 600000
    MsgBox "Die letzte Eingabeaktivität erfolgte vor ca. 10 Minuten."</pre></td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>Ähnlich wie oben, allerdings werden künstliche Tastatureingaben und/oder Mausklicks ignoriert, wenn der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert ist; das heißt, dass diese Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks fälschlicherweise die Aktivität des Benutzers vortäuschen. Wenn kein einziger Hook installiert ist, enthält diese Variable denselben Wert wie A_TimeIdle. Wenn nur ein Hook installiert ist, wird A_TimeIdlePhysical nur von dieser Art von physischer Eingabe beeinflusst (die Eingabe des anderen/nicht-installierten Hooks, hat sowohl physisch als auch künstlich keine Auswirkung).</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard</td>
    <td>Wenn der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Tastatureingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse</td>
    <td>Wenn der <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Mauseingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
</table>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey unterbrochen wird, deshalb ist es ratsam, diesen Wert sofort in eine andere Variable zu speichern, wenn der originale Wert später noch in einer Subroutine benötigt wird.</p>
      <p>Wenn ein Hotkey zum ersten Mal erstellt wird -- entweder mit der <a href="commands/Hotkey.htm">Hotkey-Funktion</a> oder einem <a href="Hotkeys.htm">Doppelpunkt-Label</a> -- wird seine aktuelle Taste und die aktuelle Reihenfolge seiner Modifikatorzeichen verwendet, um einen permanenten Namen für diesen Hotkey zu bestimmen, der für alle <a href="commands/_If.htm#variant">Varianten</a> des Hotkeys gelten wird.</p>
      <p>Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das gleiche wie oben, aber für den vorherigen Hotkey. Wenn es diesen Hotkey nicht gibt, wird die Variable leer gemacht.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td>Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde, oder leer, wenn kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Damit diese Variable genutzt werden kann, muss der <a href="commands/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit dem Drücken von A_ThisHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Ruft die Zeit in Millisekunden ab, die seit dem Drücken von A_PriorHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Das <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen notwendig war (wegen der *-Option), wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr id="ComSpec">
    <td>A_ComSpec</td>
    <td>Enthält, wie die ComSpec-Umgebungsvariable auch, den Pfadnamen des Befehlszeileninterpreters (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft in Verbindung mit <a href="commands/Run.htm">Run/RunWait</a> genutzt.</td>
  </tr>
  <tr id="Temp">
    <td>A_Temp</td>
    <td>Der vollständige Pfadname des Ordners, der zum Speichern von temporären Dateien auserkoren wurde (z. B. C:\DOCUME~1\&lt;Benutzername&gt;\LOCALS~1\Temp). Folgende Standorte werden der Reihenfolge nach durchsucht, um den Pfadnamen zu ermitteln: 1) <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td>
    <p>Die Versionsnummer des Betriebssystems im Format "<em>Haupt</em>.<em>Neben</em>.<em>Build</em>". Windows 7 SP1 ist beispielsweise 6.1.7601.</p>
    <p>Beachten Sie, dass das Betriebssystem eine andere Versionsnummer meldet bzw. dass A_OSVersion einen anderen Wert enthält, wenn der Kompatibilitätsmodus im Eigenschaftsfenster der AutoHotkey-Datei oder des kompilierten Skripts eingeschaltet ist.</p>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td>Enthält 1 (wahr), wenn das Betriebssystem eine 64-Bit-Version ist, oder 0 (falsch), wenn es eine 32-Bit-Version ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td>Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder eine 4 oder eine 8, abhängig davon, ob die verwendete AutoHotkey-Datei eine 32-Bit- oder 64-Bit-Datei ist.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">vierstelliger Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles</td>
    <td>
      <p>Der Programme-Ordner (z. B. <code>C:\Programme</code> oder <code>C:\Programme (x86)</code>). Die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <code>ProgramFiles</code> enthält in der Regel denselben Wert.</p>
      <p>Bei <a href="#Is64bitOS">64-Bit-Systemen</a> (nicht bei 32-Bit-Systemen) muss folgendes beachtet werden:</p>
      <ul>
        <li>Wenn die EXE-Datei, mit der das Skript ausgeführt wird, eine 32-Bit-Datei ist, enthält A_ProgramFiles den Pfadnamen des Ordners "Program Files (x86)".</li>
        <li>Bei 32-Bit-Prozessen kann die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <code>ProgramW6432</code> abgerufen werden, um den Pfadnamen des 64-Bit-Ordners "Program Files" zu erhalten. Ab Windows 7 kann diese Umgebungsvariable auch bei 64-Bit-Prozessen abgerufen werden.</li>
        <li>Die Umgebungsvariable <code>ProgramFiles(x86)</code> enthält den Pfadnamen des 32-Bit-Ordners "Program Files (x86)".</li>
      </ul>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData</td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten des aktuellen Benutzers. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon</td>
    <td>Der vollständige Pfad des Ordners mit anwendungsspezifischen Daten aller Benutzer.</td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Desktop-Dateien aller Benutzer.</td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>Der vollständige Pfad des Ordners mit den Startmenü-Dateien aller Benutzer.</td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>Der vollständige Pfad des Programmordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>Der vollständige Pfad des Autostart-Ordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>Der vollständige Pfad des Ordners "Eigene Dokumente" des aktuellen Benutzers. Wenn der Ordner das Stammverzeichnis eines Laufwerks ist, ist das letzte Zeichen in dieser Variable im Gegensatz zu anderen ähnlichen Variablen kein umgekehrter Schrägstrich. Zum Beispiel würde sie M: statt M:\ enthalten.</td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer Administratorrechte hat, enthält diese Variable eine 1. Ansonsten enthält sie eine 0.</p>
    <p id="RequireAdmin">Damit das Skript sich selbst neu starten kann, um Administratorrechte zu erhalten (oder um dem Benutzer mitzuteilen, dass das Skript Administratorrechte benötigt), benutzt man <a href="commands/Run.htm#RunAs">Run *RunAs</a>. Beachten Sie aber, dass ein mit Adminrechten gestartetes Skript dazu führt, dass alle Programme, die das Skript startet, auch Adminrechte haben werden. Eine mögliche Alternative finden Sie in <a href="FAQ.htm#uac">der FAQ</a>.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Anzeigegeräts in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von anderen Anzeigegeräten abgerufen werden.</p>
      <p>Das folgende Beispiel zeigt, wie die Breite und Höhe des gesamten Desktops ermittelt werden kann (selbst wenn er sich über mehrere Anzeigegeräte erstrecken sollte):</p>
<pre>
VirtuelleBreite := <a href="commands/SysGet.htm">SysGet</a>(78)
VirtuelleHöhe := <a href="commands/SysGet.htm">SysGet</a>(79)
</pre>
    <p>Mit <a href="commands/SysGet.htm">SysGet</a> kann zudem der Arbeitsbereich eines Anzeigegeräts ermittelt werden. Dieser Bereich ist in der Regel kleiner als der Gesamtbereich des Anzeigegeräts, weil die Taskleiste und andere registrierte Desktopsymbolleisten nicht berücksichtigt werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI</td>
    <td>Die Anzahl der Pixel pro logischem Zoll entlang der Bildschirmbreite. Bei einem System mit mehreren Anzeigegeräten ist dieser Wert bei jedem Anzeigegerät gleich. Bei den meisten Systemen ist dieser Wert eine 96; abhängig von der Textgrößeneinstellung (DPI) des Systems. Siehe auch GUI's <a href="objects/Gui.htm#DPIScale">-DPIScale</a>-Option.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4</td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable kann eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben nach Size sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
      </ul>
<p>Hinweis: Jeder <a href="misc/Threads.htm">Thread</a> verwaltet seinen eigenen Wert für A_EventInfo (im Gegensatz zu Variablen wie A_ThisHotkey). Das heißt beispielsweise, dass auch dann noch die ursprünglichen/richtigen Werte in diesen Variablen enthalten sind, wenn ein Thread zwischendurch von einem anderen Thread unterbrochen werden musste.</p>
      <p><strong>Lesen/Schreiben:</strong> A_EventInfo kann auch vom Skript gesetzt werden, aber akzeptiert werden nur vorzeichenlose Integer innerhalb eines Pointer-Bereichs (32-Bit oder 64-Bit, je nach Version von AutoHotkey).</p></td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td><strong>Liest/Schreibt</strong> den Inhalt der system-internen Zwischenablage. Siehe <a href="misc/Clipboard.htm">Clipboard</a> für mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td><strong>Liest nur</strong> den gesamten Inhalt der Zwischenablage (einschließlich Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td><strong>Liest/Schreibt</strong> <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td><p><strong>Lesen/Schreiben:</strong> Diese Variable ist üblicherweise das Ergebnis der Systemfunktion GetLastError(), nachdem das Skript bestimmte Funktionen aufgerufen hat, oder das HRESULT des letzten Aufrufs eines COM-Objekts. Weitere Informationen finden Sie unter <a href="commands/DllCall.htm#LastError">DllCall</a> oder <a href="commands/Run.htm#LastError">Run/RunWait</a>.</p>
    <p>Das Speichern eines Wertes in A_LastError bewirkt zudem, dass die Systemfunktion SetLastError() aufgerufen wird.</p></td>
  </tr>
  <tr id="TrueFalse">
    <td>True<br />False</td>
    <td><p>Enthalten 1 und 0. Sie können verwendet werden, um ein Skript besser lesbar zu machen. Siehe <a href="Concepts.htm#boolean">Logische (boolesche) Werte</a>, um mehr zu erfahren.</p>
    </td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr id="Index">
    <td>A_Index</td>
    <td><strong>Liest/Schreibt</strong> den aktuellen Schleifendurchlauf (ein 64-Bit-Integer). Wenn das Skript beispielsweise den Schleifenkörper zum ersten Mal ausführt, enthält diese Variable eine 1. Weitere Informationen finden Sie unter <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopFiles.htm">Dateimuster-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopReg.htm">Registry-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopRead.htm">Datei-lesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="cap">Kapazität und Speicher einer Variable</h2>
<ul>
  <li>Wenn eine Zeichenkette in eine Variable gespeichert wird, die ihre Länge überschreitet, wird ihr zugewiesener Systemspeicher automatisch erweitert.</li>
  <li>Um den Speicher einer großen Variable freizugeben, weist man ihr nichts zu (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm unterstützt mehrere Millionen Variablen, ohne dass es signifikant an Performance einbüßt.</li>
  <li>Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen in der Regel 15-stellige Gleitkommawerte. Integer können vorzeichenbehaftete 64-Bit-Werte sein, die einen Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) abdecken. Integer-Konstanten außerhalb dieses Bereichs werden gekürzt. Ähnlich verhält es sich mit arithmetischen Operationen bei Integern, die bei einem Überlauf umgekehrt werden (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
