<!DOCTYPE HTML>
<html>
<head>
<title>Kontextabhängige Hilfe in einem beliebigen Editor - von Rajat</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Kontextabhängige Hilfe in einem beliebigen Editor - von Rajat</h1>

<p>Damit kann mit <kbd>Strg</kbd>+<kbd>2</kbd> (oder ein anderer Hotkey) die Hilfe-Dateiseite für die markierte AutoHotkey-Funktion oder Schlüsselwort angezeigt werden. Wenn nichts markiert ist, dann wird der Funktionsname vom Anfang der aktuellen Zeile extrahiert.
</p>
<p><a href="ContextSensitiveHelp.ahk">Dieses Skript herunterladen</a>  |  <a href="index.htm">Andere Beispiel-Skripte</a>  |  <a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>; Der unten genannte Hotkey nutzt die Zwischenablage, um die Kompatibilität mit
; den meisten Editoren zu gewährleisten (da ControlGet nicht immer
; funktioniert). Danach wird der originale Inhalt der Zwischenablage wieder-
; hergestellt, jedoch als Klartext, was immer noch besser als gar nichts ist.</em>

$^2::
<em>; Die folgenden Werte sind nur während des Hotkey-Threads wirksam.
; Deshalb ist es nicht notwendig, deren ursprüngliche Werte wiederherzustellen,
; weil das automatisch geschieht, sobald der Thread endet:</em>
SetWinDelay 10
SetKeyDelay 0

C_ClipboardPrev := Clipboard
Clipboard := ""
<em>; Verwendet das hervorgehobene Wort, falls vorhanden (da der Benutzer
; manchmal etwas absichtlich hervorhebt, das keine Funktion ist):</em>
Send "^c"
ClipWait 0.1
if ErrorLevel
{
    <em>; Die gesamte Zeile abrufen, weil Editoren die Cursor-Navigationstasten unterschiedlich behandeln:</em>
    Send "{home}+{end}^c"
    ClipWait 0.2
    if ErrorLevel  <em>; Selten, daher kein Fehler melden.</em>
    {
        Clipboard := C_ClipboardPrev
        return
    }
}
C_Cmd := Trim(Clipboard)  <em>; Tabulator- &amp; Leerzeichen davor oder danach entfernen.</em>
Clipboard := C_ClipboardPrev  <em>; Die vorherige Zwischenablage wiederherstellen.</em>
Loop Parse, C_Cmd, "`s"  <em>; Das erste Leerzeichen kennzeichnet das Ende der Funktion.</em>
{
    C_Cmd := A_LoopField
    break <em>; d.h. wir benötigen nur einen Durchlauf.</em>
}
if !WinExist("Hilfe für AutoHotkey")
{
    <em>; Den Standort von AutoHotkey ermitteln:</em>
    ahk_dir := RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey", "InstallDir")
    if ErrorLevel  <em>; Nichts gefunden, so in anderen häufigen Standorten nachschauen.</em>
    {
        if A_AhkPath
            SplitPath A_AhkPath,, ahk_dir
        else if FileExist("..\..\AutoHotkey.chm")
            ahk_dir := "..\.."
        else if FileExist(A_ProgramFiles "\AutoHotkey\AutoHotkey.chm")
            ahk_dir := A_ProgramFiles "\AutoHotkey"
        else
        {
            MsgBox "AutoHotkey-Ordner konnte nicht gefunden werden."
            return
        }
    }
    Run ahk_dir "\AutoHotkey.chm"
    WinWait "Hilfe für AutoHotkey"
}
<em>; Der obere Befehl bestimmt das "zuletzt gefundene" Fenster, das unten verwendet wird:</em>
WinActivate
WinWaitActive
C_Cmd := StrReplace(C_Cmd, "#", "{#}")
Send "!n{home}+{end}" C_Cmd "{enter}"
return
</pre>
</body>
</html>
