<!DOCTYPE HTML>
<html lang="de">
<head>
<title>WinLIRC-Client - Skriptbeispiel | AutoHotkey v2</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<meta name="description" content="Dieser Open-Source-WinLIRC-Client kann Tastendrücke, Mausklicks und sonstige Aktionen durchführen, während die Knöpfe auf der Fernbedingung gedrückt werden.">
</head>
<body>

<h1>WinLIRC-Client</h1>

<p>Dieses Skript empfängt Benachrichtigungen von <a href="http://winlirc.sourceforge.net">WinLIRC</a>, sobald eine Taste der Fernbedienung gedrückt wird. Außerdem kann damit Winamp, Windows Media Player und so weiter automatisiert werden. Es ist einfach zu konfigurieren. Wenn zum Beispiel WinLIRC eine Schaltfläche namens "VolUp" auf der Fernbedienung erkennt, dann wird ein Label namens VolUp erstellt und die Funktion <code>SoundSet "+5"</code> darunter verwendet, um die Lautstärke der Soundkarte um 5 % zu erhöhen.
</p>
<p><a href="WinLIRC.ahk">Dieses Skript herunterladen</a>  |  <a href="index.htm">Andere Beispiel-Skripte</a>  |  <a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>; Hier die Schritte, um dieses Skript zu verwenden:
; 1) Konfiguriere WinLIRC, damit es deine Fernbedienung inklusive Knöpfe erkennt.
;    WinLIRC findest du unter <a href="http://winlirc.sourceforge.net">http://winlirc.sourceforge.net</a>
; 2) Passe ggf. den WinLIRC-Pfad, die Adresse und den Port im CONFIG-Bereich unten an.
; 3) Starte dieses Skript. Es wird bei Bedarf den WinLIRC-Server starten.
; 4) Drücke einige Knöpfe auf der Fernbedienung. Es erscheint ein
;    kleines Fenster, das den Namen jedes gedrückten Knopfs zeigt.
; 5) Konfiguriere deine Knöpfe, um Tastendrücke und Mausklicks an
;    Fenstern wie Winamp, Media Player und so weiter zu senden. Siehe die Beispiele unten.</em>

<em>; ÄNDERUNGEN
; 19. Juli 2016:
; - Code für Kompatibilität mit AHK v2 überarbeitet
; 2. März 2007:
; - Zuverlässigkeit mithilfe von "Critical" in ReceiveData() verbessert.
; 5. Oktober 2005:
; - Winsock-Warnmeldung "10054" beim Herunterfahren/Abmelden des Systems beseitigt.
; - Option "DelayBetweenButtonRepeats" hinzugefügt, um die Wiederholungsgeschwindigkeit zu drosseln.</em>

<em>; --------------------------------------------------------------
; KONFIGURATIONSBEREICH: Nehmen Sie hier Ihre Einstellungen vor.
; --------------------------------------------------------------
; Einige Fernbedienungen wiederholen schnell das Signal, während
; eine Taste gedrückt gehalten wird. Das macht es schwierig, die Fernbedienung dazu zu bringen,
; nur ein Signal zu senden. Die folgende Einstellung löst dieses Problem, indem wiederholende Signale
; ignoriert werden, bis die angegebene Zeit erreicht ist. 200 ist meistens gut genug.  Setzen Sie den Wert
; auf 0, um dieses Feature zu deaktivieren.</em>
DelayBetweenButtonRepeats := 200

<em>; Geben Sie den Pfadnamen von WinLIRC an, z. B. C:\WinLIRC\winlirc.exe</em>
WinLIRC_Path := A_ProgramFiles "\WinLIRC\winlirc.exe"

<em>; Geben Sie die Adresse und den Port von WinLIRC an. Häufig wird 127.0.0.1 (localhost) und 8765 verwendet.</em>
WinLIRC_Address := "127.0.0.1"
WinLIRC_Port := "8765"

<em>; Ändert nicht die folgenden zwei Zeilen. Überspringt sie einfach.</em>
Gosub WinLIRC_Init
return

<em>; ------------------------------------------
; WEISEN SIE IHRER FERNBEDIENUNG AKTIONEN ZU
; ------------------------------------------
; Konfiguriert die unten genannten Tasten der Fernbedienung. Verwendet die Tastennamen
; von WinLIRC, die in der WinLIRC-Konfigurationsdatei (.cf file) gefunden
; werden können -- oder drückt eine beliebige Taste auf der Fernbedienung,
; um die Tastennamen in einem kleinen Fenster kurz anzuzeigen.
; 
; Hier dazu einige Beispiele. Sie können je nach Belieben überarbeitet und
; gelöscht werden.</em>

VolUp:
SoundSet "+5"  <em>; Master-Lautstärke um 5 % erhöhen.</em>
return

VolDown:
SoundSet "-5"  <em>; Master-Lautstärke um 5 % verringern.</em>
return

ChUp:
if WinGetClass("A") ~= "^(Winamp v1\.x|Winamp PE)$"  <em>; Winamp ist aktiv.</em>
    Send "{right}"  <em>; NACH-RECHTS-Tastendruck senden.</em>
else  <em>; Irgendein anderes Fenster ist aktiv.</em>
    Send "{WheelUp}"  <em>; Das Mausrad eine Rasterung nach oben drehen.</em>
return

ChDown:
if WinGetClass("A") ~= "^(Winamp v1\.x|Winamp PE)$"  <em>; Winamp ist aktiv.</em>
    Send "{left}"  <em>; NACH-LINKS-Tastendruck senden.</em>
else  <em>; Irgendein anderes Fenster ist aktiv.</em>
    Send "{WheelDown}"  <em>; Das Mausrad eine Rasterung nach unten drehen.</em>
return

Menu:
if WinExist("Unbenannt - Editor")
{
    WinActivate
}
else
{
    Run "Notepad"
    WinWait "Unbenannt - Editor"
    WinActivate
}
Send "Hier einige an Notepad gesendete Tastendrücke.{Enter}"
return

<em>; Die oben genannten Beispiele geben einen Eindruck davon, wie häufige Aufgaben durchgeführt werden.
; Um die Grundlagen von AutoHotkey zu erlernen, schauen Sie sich das Schnellstart-Tutorial an:
; <a href="https://www.autohotkey.com/docs/Tutorial.htm">http://www.autohotkey.com/docs/Tutorial.htm</a></em>

<em>; -------------------------------
; ENDE DES KONFIGURATIONSBEREICHS
; -------------------------------
; Hier danach keine Änderungen durchführen, es sei denn,
; die allgemeine Funktionalität des Skripts soll geändert werden.</em>

WinLIRC_Init:
OnExit("ExitSub")  <em>; Um die Verbindung zu beenden.</em>

<em>; WinLIRC starten, falls noch nicht getan:</em>
if not ProcessExist("winlirc.exe")  <em>; Keine PID für WinLIRC gefunden.</em>
{
    if !FileExist(WinLIRC_Path)
    {
        MsgBox "Die Datei '" WinLIRC_Path "' ist nicht vorhanden. Bitte diesen Skript bearbeiten, um den Standort festzulegen."
        ExitApp
    }
    Run WinLIRC_Path
    Sleep 200  <em>; Gibt WinLIRC Zeit, zu starten (wahrscheinlich nie notwendig, nur zur Sicherheit).</em>
}

<em>; Mit WinLIRC verbinden (oder beliebiger Server-Typ für diese Angelegenheit):</em>
socket := ConnectToAddress(WinLIRC_Address, WinLIRC_Port)
if socket = -1  <em>; Verbindung fehlgeschlagen (der Grund wird bereits angezeigt).</em>
    ExitApp

<em>; Das Hauptfenster vom Skript finden:</em>
ErrorLevel := ProcessExist()  <em>; Dadurch enthält ErrorLevel die PID des Skripts (wird auf diese Weise durchgeführt, um kompilierte Skripte zu unterstützen).</em>
DetectHiddenWindows True
ScriptMainWindowId := WinExist("ahk_class AutoHotkey ahk_pid " ErrorLevel)
DetectHiddenWindows False

<em>; Sobald das Betriebssystem dem Skript meldet, dass eingehende Daten darauf warten,
; empfangen zu werden, wird eine Funktion ausgeführt, um die Daten zu lesen:</em>
NotificationMsg := 0x5555  <em>; Eine beliebige Meldungsnummer, aber größer als 0x1000.</em>
OnMessage(NotificationMsg, "ReceiveData")

<em>; Die Verbindung einstellen, um das Skript via Meldung zu benachrichtigen, sobald neue Daten eingetroffen sind.
; Dadurch wird verhindert, dass die Verbindung abgefragt werden muss, daher verringert sich der Ressourcenverbrauch.</em>
FD_READ := 1     <em>; Wird empfangen, falls lesbare Daten verfügbar sind.</em>
FD_CLOSE := 32   <em>; Wird empfangen, falls die Verbindung unterbrochen wurde.</em>
if DllCall("Ws2_32\WSAAsyncSelect", "UInt", socket, "UInt", ScriptMainWindowId, "UInt", NotificationMsg, "Int", FD_READ|FD_CLOSE)
{
    MsgBox "WSAAsyncSelect() meldet Winsock-Fehler " DllCall("Ws2_32\WSAGetLastError")
    ExitApp
}
return



ConnectToAddress(IPAddress, Port)
<em>; Damit können die meisten TCP-Server angesteuert werden, nicht nur WinLIRC.
; Gibt bei Misserfolg eine -1 (INVALID_SOCKET) und bei Erfolg die Sockel-ID zurück.</em>
{
    wsaData := BufferAlloc(400)
    result := DllCall("Ws2_32\WSAStartup", "UShort", 0x0002, "Ptr", wsaData) <em>; Winsock 2.0 (0x0002) anfordern</em>
    <em>; Da WSAStartup() wahrscheinlich die erste aufgerufene Winsock-Funktion des Skripts ist,</em>
    <em>; wird ErrorLevel überprüft, ob Winsock 2.0 verfügbar ist:</em>
    if ErrorLevel
    {
        MsgBox "WSAStartup() konnte aufgrund des Fehlers " ErrorLevel " nicht aufgerufen werden. Es wird Winsock 2.0 oder höher benötigt."
        return -1
    }
    if result  <em>; Ungleich 0, das heißt Misserfolg (die meisten Winsock-Funktionen geben bei Erfolg eine 0 zurück).</em>
    {
        MsgBox "WSAStartup() meldet Winsock-Fehler " DllCall("Ws2_32\WSAGetLastError")
        return -1
    }

    AF_INET := 2
    SOCK_STREAM := 1
    IPPROTO_TCP := 6
    socket := DllCall("Ws2_32\socket", "Int", AF_INET, "Int", SOCK_STREAM, "Int", IPPROTO_TCP)
    if socket = -1
    {
        MsgBox "socket() meldet Winsock-Fehler " DllCall("Ws2_32\WSAGetLastError")
        return -1
    }

    <em>; Für die Verbindung vorbereiten:</em>
    SizeOfSocketAddress := 16
    SocketAddress := BufferAlloc(SizeOfSocketAddress, 0)
    NumPut( "UShort", 2  <em>; sin_family</em>
          , "UShort", DllCall("Ws2_32\htons", "UShort", Port)  <em>; sin_port</em>
          , "UInt", DllCall("Ws2_32\inet_addr", "AStr", IPAddress)  <em>; sin_addr.s_addr</em>
          , SocketAddress)

    <em>; Verbindungsversuch:</em>
    if DllCall("Ws2_32\connect", "UInt", socket, "Ptr", SocketAddress, "Int", SizeOfSocketAddress)
    {
        MsgBox "connect() meldet Winsock-Fehler " DllCall("Ws2_32\WSAGetLastError") . ". Läuft WinLIRC überhaupt?"
        return -1
    }
    return socket  <em>; Meldet Erfolg, indem eine gültige Sockel-ID anstelle von -1 zurückgegeben wird.</em>
}



ReceiveData(wParam, lParam, *)
<em>; Durch OnMessage wird diese Funktion automatisch aufgerufen, wann immer neue Daten
; bei der Verbindung eintreffen.  Sie liest die Daten aus WinLIRC und führt entsprechende Aktionen abhängig
; vom Inhalt durch.</em>
{
    Critical  <em>; Verhindert, dass die Meldung von einer anderen Meldung verworfen wird, da der Thread bereits ausgeführt wird.</em>
    socket := wParam
    ReceivedDataSize := 4096  <em>; Hoher Wert, falls viele Daten aufgrund von Verzögerungen beim Verarbeiten früherer Daten gepuffert werden.</em>

    ReceivedData := BufferAlloc(ReceivedDataSize, 0)
    ReceivedDataLength := DllCall("Ws2_32\recv", "UInt", socket, "Ptr", ReceivedData, "Int", ReceivedDataSize, "Int", 0)
    if ReceivedDataLength = 0  <em>; Die Verbindung wurde ordnungsgemäß unterbrochen, vielleicht weil WinLIRC beendet wurde.</em>
        ExitApp  <em>; Die OnExit-Subroutine wird für uns WSACleanup() aufrufen.</em>
    if ReceivedDataLength = -1
    {
        WinsockError := DllCall("Ws2_32\WSAGetLastError")
        if WinsockError = 10035  <em>; WSAEWOULDBLOCK, das heißt "keine zu lesenden Daten mehr".</em>
            return 1
        if WinsockError != 10054 <em>; WSAECONNRESET, das passieren kann, wenn WinLIRC durch das Herunterfahren/Abmelden des Systems geschlossen wird.</em>
            <em>; Da das ein unerwarteter Fehler ist, muss er gemeldet werden.  Außerdem beenden, um eine Endlosschleife zu verhindern.</em>
            MsgBox "recv() meldet Winsock-Fehler " WinsockError
        ExitApp  <em>; Die OnExit-Subroutine wird für uns WSACleanup() aufrufen.</em>
    }
    <em>; Ansonsten die empfangenen Daten bearbeiten. Tests zeigen, dass es möglich ist, mehr als eine Zeile gleichzeitig zu erhalten</em>
    <em>; (selbst beim expliziten Senden eines IR-Signals), wodurch die folgende Methode richtig behandelt wird.</em>
    <em>; Empfangene Daten von WinLIRC sehen z. B. wie folgt aus (siehe Dokumentation zu WinLIRC für Details):</em>
    <em>; 0000000000eab154 00 NameTaste NameFernbedienung</em>
    Loop Parse, StrGet(ReceivedData, "CP0"), "`n", "`r"
    {
        if A_LoopField ~= "^(|BEGIN|SIGHUP|END)$"  <em>; Leere Zeilen und Startmeldungen von WinLIRC ignorieren.</em>
            continue
        ButtonName := ""  <em>; Leer machen, falls weniger als 3 Felder unten gefunden werden.</em>
        Loop Parse, A_LoopField, "`s"  <em>; Tastenname extrahieren, der sich im dritten Feld befindet.</em>
            if A_Index = 3
                ButtonName := A_LoopField
        global DelayBetweenButtonRepeats  <em>; Globale Variablen deklarieren, damit sie für diese Funktion verfügbar sind.</em>
        static PrevButtonName, PrevButtonTime := 0, RepeatCount := 0  <em>; Diese Variablen merken sich ihre Werte zwischen den Aufrufen.</em>
        if (ButtonName != PrevButtonName || A_TickCount - PrevButtonTime &gt; DelayBetweenButtonRepeats)
        {
            if IsLabel(ButtonName)  <em>; Es ist eine Subroutine vorhanden, die sich auf diese Taste bezieht.</em>
                Gosub(ButtonName)  <em>; Die Subroutine starten.</em>
            else <em>; Falls keine entsprechende Subroutine vorhanden ist, kurz anzeigen, welche Taste gedrückt wurde.</em>
            {
                if (ButtonName == PrevButtonName)
                    RepeatCount += 1
                else
                    RepeatCount := 1
                ToolTip "Taste von WinLIRC, " ButtonName " (" RepeatCount ")"
                SetTimer () =&gt; ToolTip(), -3000  <em>; Dadurch können mehr Signale beim Anzeigen des Fensters verarbeitet werden.</em>
            }
            PrevButtonName := ButtonName
            PrevButtonTime := A_TickCount
        }
    }
    return 1  <em>; Dem Programm melden, dass die Meldung nicht weiter verarbeitet werden muss.</em>
}



ExitSub(*)  <em>; Diese Funktion wird automatisch aufgerufen, falls das Skript aus irgendeinem Grund beendet wird.</em>
{
    <em>; MSDN: "Sockets, die beim Aufruf von WSACleanup geöffnet waren, werden zurück-
    ; gesetzt und bzgl. des reservierten Speichers automatisch freigegeben, als ob
; closesocket aufgerufen wurde."</em>
    DllCall("Ws2_32\WSACleanup")
    ExitApp
}
</pre>
</body>
</html>
