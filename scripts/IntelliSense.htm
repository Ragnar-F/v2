<!DOCTYPE HTML>
<html>
<head>
<title>IntelliSense -- von Rajat (benötigt XP/2k/NT)</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>IntelliSense -- von Rajat (benötigt XP/2k/NT)</h1>

<p>Dieses Skript überwacht die Benutzereingaben beim Bearbeiten eines AutoHotkey-Skripts. Sobald ein Befehl gefolgt von einem Komma oder eines Leerzeichens eingegeben wird, dann wird als Hilfe die Parameterliste des Befehls angezeigt. Darüber hinaus kann STRG+F1 (oder ein anderer Hotkey) gedrückt werden, um die Befehlsseite in der Hilfe-Datei anzuzeigen. Um die Parameterliste zu schließen, drückt man Escape oder Enter.
</p>
<p><a href="IntelliSense.ahk">Dieses Skript herunterladen</a>  |  <a href="index.htm">Andere Beispiel-Skripte</a>  |  <a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>; KONFIGURATIONSBEREICH: Passt das Skript mit den folgenden Variablen an.</em>

<em>; Der unten genannte Hotkey wird gedrückt, um die aktuelle Befehlsseite in der
; Hilfedatei anzuzeigen:</em>
I_HelpHotkey := "^F1"

<em>; Die nachfolgende Zeichenkette muss irgendwo im Titel des aktiven Fensters vorkommen,
; damit IntelliSense bei der Benutzereingabe wirksam wird.  Macht sie leer,
; damit IntelliSense alle Fenster bearbeitet.  Wenn sie Pad enthält,
; dann werden Editoren wie Metapad, Notepad und Textpad bearbeitet.  Falls .ahk vorhanden ist,
; dann ist IntelliSense nur wirksam, wenn eine .ahk-Datei im Editor offen ist.</em>
I_Editor := "pad"

<em>; Wenn der Wunsch besteht, ein anderes Symbol für dieses Skript zu verwenden,
; damit es sich von anderen Skripten unterscheidet, gebt unten den Dateinamen an
; (leer lassen, wenn nicht gewünscht). Zum Beispiel: E:\stuff\Pics\icons\GeoIcons\Information.ico</em>
I_Icon := ""

<em>; ENDE DES KONFIGURATIONSBEREICHS (Hier danach keine Änderungen durchführen,
; es sei denn, die allgemeine Funktionalität des Skripts soll geändert werden).</em>

SetKeyDelay 0
#SingleInstance

if I_HelpHotkey &lt;&gt; ""
    Hotkey I_HelpHotkey, "I_HelpHotkey"

<em>; Infobereichssymbol ändern (falls ein Symbol im Konfigurationsbereich angegeben wurde):</em>
if I_Icon &lt;&gt; ""
    if FileExist(I_Icon)
        Menu "Tray", "Icon", I_Icon

<em>; Standort von AutoHotkey ermitteln:</em>
ahk_dir := RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey", "InstallDir")
if ErrorLevel  <em>; Nichts gefunden, so in anderen häufigen Standorten nachschauen.</em>
{
    if A_AhkPath
        SplitPath A_AhkPath,, ahk_dir
    else if FileExist("..\..\AutoHotkey.chm")
        ahk_dir := "..\.."
    else if FileExist(A_ProgramFiles "\AutoHotkey\AutoHotkey.chm")
        ahk_dir := A_ProgramFiles "\AutoHotkey"
    else
    {
        MsgBox "AutoHotkey-Ordner konnte nicht gefunden werden."
        ExitApp
    }
}

ahk_help_file := ahk_dir "\AutoHotkey.chm"

<em>; Befehlssyntax lesen:</em>
Loop Read, ahk_dir "\Extras\Editors\Syntax\Commands.txt"
{
    I_FullCmd := A_LoopReadLine

    <em>; Anweisungen haben ein erstes Leerzeichen anstelle eines ersten Kommas.</em>
    <em>; So wird je nachdem verwendet, was zuerst als Endzeichen im Befehlsnamen vorkommt:</em>
    I_cPos := InStr(I_FullCmd, ",")
    I_sPos := InStr(I_FullCmd, "`s")
    if (!I_cPos or (I_cPos &gt; I_sPos and I_sPos))
        I_EndPos := I_sPos
    else
        I_EndPos := I_cPos

    if I_EndPos
        I_CurrCmd := SubStr(I_FullCmd, 1, I_EndPos - 1)
    else  <em>; Eine Anweisung/ein Befehl ohne Parameter.</em>
        I_CurrCmd := A_LoopReadLine
    
    I_CurrCmd := StrReplace(I_CurrCmd, "[")
    I_CurrCmd := StrReplace(I_CurrCmd, "`s")
    I_FullCmd := StrReplace(I_FullCmd, "``n", "`n")
    I_FullCmd := StrReplace(I_FullCmd, "``t", "`t")
    
    <em>; Arrays mit Befehlsnamen und vollständige Befehlssyntax erstellen:</em>
    I_Cmd%A_Index% := I_CurrCmd
    I_FullCmd%A_Index% := I_FullCmd
}

<em>; Input-Befehl verwenden, um die eingegebenen Befehle des Benutzers zu überwachen:</em>
Loop
{
    <em>; Editor-Fenster überprüfen:</em>
    if !InStr(WinGetTitle("A"), I_Editor)
    {
        ToolTip
        Sleep 500
        Continue
    }
    
    <em>; Alle Tasten bis zur Endtaste abrufen:</em>
    I_Word := Input("V", "{Enter}{Escape}{Space},")
    I_EndKey := ErrorLevel
    
    <em>; ToolTip wird in folgenden Fällen versteckt:</em>
    if I_EndKey = "EndKey:Enter" or I_EndKey = "EndKey:Escape"
    {
        ToolTip
        Continue
    }

    <em>; Nochmals Editor-Fenster überprüfen!</em>
    if !InStr(WinGetTitle("A"), I_Editor)
    {
        ToolTip
        Continue
    }

    <em>; Jede vorhandene Einrückung ersetzen:</em>
    I_Word := StrReplace(I_Word, "`s")
    I_Word := StrReplace(I_Word, "`t")
    if I_Word = ""
        Continue
    
    <em>; Kommentierte Zeile untersuchen:</em>
    I_Check := SubStr(I_Word, 1, 1)
    if (I_Check = ";" or I_Word = "If")  <em>; "If" ist scheinbar ein wenig störend, um dafür den ToolTip anzuzeigen.</em>
        Continue

    <em>; Wort stimmt mit Befehl überein:</em>
    I_Index := ""
    Loop
    {
        <em>; Es hilft der Performance, wenn dynamische Variablen nur einmal aufgelöst werden.
        ; Darüber hinaus wird der eingefügte Wert in I_ThisCmd auch von der
        ; I_HelpHotkey-Subroutine verwendet:</em>
        I_ThisCmd := I_Cmd%A_Index%
        if I_ThisCmd = ""
            break
        if (I_Word = I_ThisCmd)
        {
            I_Index := A_Index
            I_HelpOn := I_ThisCmd
            break
        }
    }
    
    <em>; Falls keine Übereinstimmung erfolgt, dann Benutzereingabe weiter überwachen:</em>
    if I_Index = ""
        Continue
    
    <em>; Übereinstimmende Befehle anzeigen, um den Benutzer zu führen:</em>
    I_ThisFullCmd := I_FullCmd%I_Index%
    ToolTip I_ThisFullCmd, A_CaretX, A_CaretY + 20
}



I_HelpHotkey:
if !InStr(WinGetTitle("A"), I_Editor)
  return

ToolTip  <em>; Syntaxhelfer deaktivieren, da er zurzeit nicht benötigt wird.</em>

SetTitleMatchMode 1  <em>; Falls es 3 ist. Diese Einstellung gilt nur für diesen Thread.</em>
if !WinExist("Hilfe für AutoHotkey")
{
    if !FileExist(ahk_help_file)
    {
        MsgBox "Hilfe-Datei konnte nicht gefunden werden: " ahk_help_file
        return
    }
    Run ahk_help_file
    WinWait "Hilfe für AutoHotkey"
}

if I_ThisCmd = ""  <em>; Stattdessen wird die aktuellste Benutzereingabe verwendet.</em>
    I_ThisCmd := I_Word

<em>; Die obere Funktion bestimmt das "zuletzt gefundene" Fenster, das unten verwendet wird:</em>
WinActivate
WinWaitActive
I_ThisCmd := StrReplace(I_ThisCmd, "#", "{#}")  <em>; Führende # ersetzen, falls vorhanden.</em>
Send "!n{home}+{end}" I_HelpOn "{enter}"
return
</pre>
</body>
</html>
