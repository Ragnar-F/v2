<!DOCTYPE HTML>
<html>
<head>
<title>Einfacher Zugriff auf Lieblingsordner -- von Savage</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Einfacher Zugriff auf Lieblingsordner -- von Savage</h1>

<p>Wenn die mittlere Maustaste gedrückt wird, während bestimmte Fenstertypen aktiv sind, dann zeigt dieses Skript ein Menü mit den Lieblingsordnern an. Nachdem ein Ordner ausgewählt wurde, wechselt das Skript innerhalb des aktiven Fensters sofort auf diesen Ordner. Die folgenden Fenstertypen werden unterstützt: 1) Standard-Dialogfenster zum Öffnen oder Speichern von Dateien; 2) Explorer-Fenster; 3) Konsolenfenster (Eingabeaufforderung). Das Menü kann optional auch für nicht unterstützte Fenstertypen angezeigt werden - in diesem Fall wird der ausgewählte Ordner in einem neuen Explorer-Fenster geöffnet.
</p>
<p><a href="FavoriteFolders.ahk">Dieses Skript herunterladen</a>  |  <a href="index.htm">Andere Beispiel-Skripte</a>  |  <a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>; KONFIGURATION: HOTKEY AUSWÄHLEN
; Wenn die aktuelle Maus mehr als 3 Tasten hat, dann kann
; XButton1 (die 4.) oder XButton2 (die 5.) anstelle von MButton ausprobiert werden.
; Modifizierte Maustasten (wie ^MButton) oder
; ein Tastatur-Hotkey können auch verwendet werden.  Im Falle von MButton sollte das Tilde-Zeichen (~) als Präfix
; verwendet werden, damit die normale Funktionalität von MButton nicht verloren geht,
; sobald andere Fenstertypen wie ein Browser angeklickt werden.  Das Vorhandensein
; eines Tilde-Zeichens hindert das Skript daran, das Menü für
; nicht unterstützte Fenstertypen anzuzeigen.  Das heißt, wenn kein Tilde-Zeichen vorhanden ist,
; zeigt der Hotkey das Menü immer an; und nach dem Auswählen
; eines Lieblingsordners, während ein nicht unterstützter Fenstertyp aktiv ist,
; wird ein neues Explorer-Fenster geöffnet, um den Inhalt des Ordners
; anzuzeigen.</em>
f_Hotkey := "~MButton"

<em>; KONFIGURATION: LIEBLINGSORDNER AUSWÄHLEN
; Aktualisiert den unteren Sonderkommentarbereich, um die Lieblingsordner
; auszuwählen.  Geben Sie den Namen des Menüpunkts, ein Semikolon
; und den aktuellen Pfadnamen des Lieblingsordners an.
; Verwenden Sie eine leere Zeile, um eine Trennlinie zu erzeugen.</em>

<em>/*
MENÜELEMENTE &lt;-- Diese Zeichenkette nicht ändern.
Desktop      ; %USERPROFILE%\Desktop
Favoriten    ; %USERPROFILE%\Favorites
Dokumente    ; %USERPROFILE%\Documents

Programme; %PROGRAMFILES%
*/</em>


<em>; ENDE DER KONFIGURATION
; Hier danach keine Änderungen durchführen, es sei denn, die allgemeine
; Funktionalität des Skripts soll geändert werden.</em>

#SingleInstance  <em>; Notwendig, da der Hotkey dynamisch erstellt wird.</em>

Hotkey f_Hotkey, "f_DisplayMenu"
if SubStr(f_Hotkey, 1, 1) = "~"  <em>; Menü nur für bestimmte Fenstertypen anzeigen.</em>
    f_AlwaysShowMenu := false
else
    f_AlwaysShowMenu := true

<em>; Wird verwendet, um zuverlässig festzustellen, ob das Skript kompiliert ist:</em>
SplitPath A_ScriptName,,, f_FileExt
if f_FileExt = "Exe"  <em>; Menüpunkte von einer externen Datei lesen..</em>
    f_FavoritesFile := A_ScriptDir "\Favorites.ini"
else  <em>; Menüpunkte direkt von diesem Skript lesen.</em>
    f_FavoritesFile := A_ScriptFullPath

<em>;----Konfigurationsdatei lesen.</em>
f_AtStartingPos := false
f_Paths := []
f_Menu := MenuCreate()
Loop Read, f_FavoritesFile
{
    if f_FileExt &lt;&gt; "Exe"
    {
        <em>; Da die Menüpunkte direkt von diesem Skript gelesen werden,
        ; werden alle Zeilen übersprungen, bis die Startzeile
        ; erreicht wird.</em>
        if !f_AtStartingPos
        {
            if InStr(A_LoopReadLine, "MENÜELEMENTE")
                f_AtStartingPos := true
            continue  <em>; Neuen Schleifendurchlauf starten.</em>
        }
        <em>; Ansonsten kennzeichnet das schließende Kommentarsymbol das Ende der Liste.</em>
        if A_LoopReadLine = "*/"
            break  <em>; Schleife unterbrechen</em>
    }
    <em>; Menütrennlinien müssen auch mitgezählt werden, damit die Kompatibilität
    ; mit ItemPos gewährleistet wird:</em>
    f_MenuItemCount++
    if !A_LoopReadLine  <em>; Leer kennzeichnet eine Trennlinie.</em>
        f_Menu.Add()
    else
    {
        f_line := StrSplit(A_LoopReadLine, ";", "`s`t")
        <em>; Referenzen auf Variablen innerhalb jeden Feldes auflösen, und
        ; ein neues Array-Element mit dem Ordnerpfad erstellen:</em>
        f_Paths.Push(f_line[2])
        f_Menu.Add(f_line[1], "f_OpenFavorite")
    }
}
return  <em>;----Ende des automatischen Ausführungsbereichs.


;----Ausgewählten Lieblingsordner öffnen</em>
f_OpenFavorite(ItemName, ItemPos)
{
    global
    
    <em>; Array-Element abfangen, das dem ausgewählten Menüpunkt entspricht:</em>
    f_path := f_Paths[ItemPos]
    if f_path = ""
        return
    if f_class = "#32770"    <em>; Es ist ein Dialogfenster.</em>
    {
        <em>; Aktiviert das Fenster, sodass nachfolgende Klicks auch außerhalb des Dialogfensters
        ; funktionieren, falls der Benutzer die mittlere Maustaste drückt:</em>
        WinActivate "ahk_id " f_window_id
        <em>; Ermittelt jeden Dateinamen, der bereits im Feld vorhanden ist,
        ; sodass er wiederhergestellt werden kann, nachdem zum neuen Ordner gewechselt wurde:</em>
        f_text := ControlGetText("Edit1", "ahk_id " f_window_id)
        ControlSetText f_path, "Edit1", "ahk_id " f_window_id
        ControlFocus "Edit1", "ahk_id " f_window_id
        ControlSend "{Enter}", "Edit1", "ahk_id " f_window_id
        Sleep 100  <em>; Bei einigen Dialogfenstern oder in einigen Fällen wird zusätzliche Zeit benötigt.</em>
        ControlSetText f_text, "Edit1", "ahk_id " f_window_id
        return
    }
    else if f_class  ~= "ExploreWClass|CabinetWClass"  <em>; Ordner im Explorer wechseln.</em>
    {
        if StrSplit(A_OSVersion, ".")[1] &gt;= 6  <em>; Windows Vista oder höher.</em>
            ControlClick "ToolbarWindow323", "ahk_id " f_window_id,,,, "NA x1 y1"
        ControlFocus "Edit1", "ahk_id " f_window_id
        ControlSetText f_path, "Edit1", "ahk_id " f_window_id
        <em>; Tekl hat Folgendes berichtet: "Wenn ich auf den Ordner L:\folder wechseln will,
        ; zeigt mir die Adressleiste http://www.L:\folder.com. Um das zu umgehen,
        ; habe ich {right} vor {Enter} eingefügt":</em>
        ControlSend "{Right}{Enter}", "Edit1", "ahk_id " f_window_id
        return
    }
    else if f_class = "ConsoleWindowClass" <em>; CD im Konsolenfenster verwenden, um auf das Verzeichnis zu springen.</em>
    {
         WinActivate "ahk_id " f_window_id <em>; Weil es durch mclick manchmal deaktiviert wird.</em>
        SetKeyDelay 0  <em>; Nur während des Hotkey-Threads wirksam.</em>
        if InStr(f_path, ":")  <em>; Es enthält einen Laufwerksbuchstaben</em>
        {
            f_path_drive := SubStr(f_path, 1, 1)
            Send f_path_drive ":{enter}"
        }
        Send "cd " f_path "{Enter}"
        return
    }
    <em>; Da oben keine Rückgabe erfolgt, gilt eins der folgenden Angaben:
    ; 1) Es ist ein nicht unterstützter Fenstertyp, aber f_AlwaysShowMenu ist y (ja).</em>
    Run "explorer " f_path  <em>; Könnte ohne Anführungszeichen mit mehr Systemen funktionieren.</em>
}


<em>;----Das Menü anzeigen</em>
f_DisplayMenu:
<em>; Diese ersten paar Variablen werden hier bestimmt und von f_OpenFavorite verwendet:</em>
f_window_id := WinGetID("A")
f_class := WinGetClass("ahk_id " f_window_id)
if f_AlwaysShowMenu = false  <em>; Das Menü sollte nur selektiv angezeigt werden.</em>
{
    if !(f_class ~= "#32770|ExploreWClass|CabinetWClass|ConsoleWindowClass")
        return <em>; Wenn anderer Fenstertyp, dann Menü nicht anzeigen.</em>
}
<em>; Ansonsten sollte das Menü für diesen Fenstertyp präsentiert werden:</em>
f_Menu.Show()
return
</pre>
</body>
</html>
