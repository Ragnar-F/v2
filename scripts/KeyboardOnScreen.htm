<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Bildschirmtastatur - Skriptbeispiel | AutoHotkey v2</title>
<meta name="description" content="Das Bildschirmtastatur-Skript erstellt eine virtuelle Tastatur am unteren Rand Ihres Bildschirms, das die gedrückten Tasten in Echtzeit anzeigt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Bildschirmtastatur <span class="headnote">Basierend auf dem v1-Skript von Jon</span></h1>

<p>Dieses Skript erstellt eine nachgebildete Tastatur am unteren Rand des Bildschirms, das die gedrückten Tasten in Echtzeit anzeigt. Das hat mir geholfen, Eingaben zu machen, ohne dabei auf die Tastatur zu schauen. Die Größe der Bildschirmtastatur kann im oberen Bereich des Skripts angepasst werden. Außerdem kann die Tastatur angezeigt oder versteckt werden, wenn das Tray-Symbol doppelt angeklickt wird.
</p>
<p><a href="KeyboardOnScreen.ahk">Dieses Skript herunterladen</a>  |  <a href="index.htm">Andere Beispiel-Skripte</a>  |  <a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>;---- Konfigurationsbereich: Die Größe der Bildschirmtastatur und
; andere Optionen anpassen.</em>

<em>; Beim Verändern der Schriftgröße wird die gesamte Bildschirmtastatur
; größer oder kleiner:</em>
k_FontSize := 10
k_FontName := "Verdana"  <em>; Kann leer sein, um die Standardschriftart des Systems zu verwenden.</em>
k_FontStyle := "Bold"    <em>; Alternatives Beispiel: Italic Underline</em>

<em>; Namen der Tray-Menüpunkte:</em>
k_MenuItemHide := "&amp;Bildschirmtastatur verstecken"
k_MenuItemShow := "&amp;Bildschirmtastatur anzeigen"

<em>; Um die Tastatur auf einen nicht-primären Anzeigegerät anzuzeigen, verwendet man
; eine Zahl wie z. B. 2 für die folgende Variable. Lasst sie leer, um das
; primäre Anzeigegerät zu verwenden:</em>
k_Monitor := ""

<em>;---- Ende des Konfigurationsbereichs. Hier danach keine Änderungen durchführen,
; es sei denn, die allgemeine Funktionalität des Skripts soll geändert werden.</em>

<em>;---- Ein GUI-Fenster für die Bildschirmtastatur erstellen:</em>
Gui := GuiCreate("-Caption +ToolWindow +AlwaysOnTop +Disabled")
Gui.SetFont("s" k_FontSize " " k_FontStyle, k_FontName)
Gui.MarginY := 0, Gui.MarginX := 0

<em>;---- Tray-Menü ändern:</em>
A_TrayMenu.Delete
A_TrayMenu.Add k_MenuItemHide, () =&gt; k_ShowHide(Gui, k_MenuItemHide, k_MenuItemShow)
A_TrayMenu.Add "&amp;Exit", () =&gt; ExitApp()
A_TrayMenu.Default := k_MenuItemHide

<em>;---- Fügt für jede Taste eine Schaltfläche hinzu:</em>

<em>; ; Das Tastaturlayout:</em>
k_Layout := [
    ["^", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "ß", "´", "Backspace:3"],
    ["Tab:3", "Q", "W", "E", "R", "T", "Z", "U", "I", "O", "P", "Ü", "+", "#"],
    ["CapsLock:3", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Ö", "Ä", "Enter:2"],
    ["LShift:3", "Z", "X", "C", "V", "B", "N", "M", ",", ".", "-", "Shift:3"],
    ["LCtrl:2", "LWin:2", "LAlt:2", "Space:2", "RAlt:2", "RWin:2", "AppsKey:2", "RCtrl:2"]
]

<em>; Durchläuft die Tasten des Tastaturlayouts:</em>
for n, k_Row in k_Layout
    for i, k_Key in k_Row
    {
        k_KeyWidthMultiplier := 1
        <em>; Ermittelt den benutzerdefinierten Multiplikator für die Tastenbreite:</em>
        if RegExMatch(k_Key, "(.+):(\d)", m)
        {
            k_Key := m[1]
            k_KeyWidthMultiplier := m[2]
        }
        <em>; Ermittelt den lokalisierten Tastennamen:</em>
        k_KeyNameText := GetKeyNameText(k_Key, 0, 1)
        <em>; Windows-Tastennamen beginnen mit links oder rechts, also ersetzen:</em>
        if (k_Key = "LWin" || k_Key = "RWin")
            k_KeyNameText := "Win"
         <em>; Tastenname kürzen:</em>
        if (StrLen(k_Key) &gt; 1)
            k_KeyNameText := Trim(SubStr(k_KeyNameText, 1, 5))
        else
            k_KeyNameText := k_Key
        <em>; In Großbuchstaben umwandeln:</em>
        k_KeyNameText := StrUpper(k_KeyNameText)
        <em>; Objektmaße anhand der ausgewählten Schriftgröße berechnen:</em>
        k_KeyHeight := k_FontSize * 3
        opt := "h" k_KeyHeight " w" k_KeyHeight * k_KeyWidthMultiplier " -Wrap x+m" 
        if (i = 1)
            opt .= " y+m xm"
        <em>; Fügt die Schaltfläche hinzu:</em>
        Btn := Gui.Add("Button", opt, k_KeyNameText)
        <em>; Bei Tastendruck die entsprechende Schaltfläche auf dem Bildschirm drücken:</em>
        Hotkey("~*" k_Key, Func("k_KeyPress").bind(Btn))
    }

<em>;---- Tastatur am unteren Rand des Bildschirms positionieren (unter Berücksichtigung
; der Position der Taskleiste):</em>
Gui.Show("Hide") <em>; Notwendig, um die berechnete Breite und Höhe des Fensters zu erhalten.
; X-Position des Fensters berechnen:</em>
MonitorGetWorkArea(k_Monitor, WL,, WR, WB)
k_xPos := (WR - WL - Gui.Pos.W) / 2 <em>; Position berechnen, um sie horizontal zu zentrieren.
; Das Folgende wird durchgeführt, falls sich das Fenster nicht auf dem primären Anzeigegerät befindet
; oder wenn die Taskleiste auf der linken Seite des Bildschirms verankert ist:</em>
k_xPos += WL
<em>; Y-Position des Fensters berechnen:</em>
k_yPos := WB - Gui.Pos.H

<em>;---- Fenster anzeigen:</em>
Gui.Show("x" k_xPos " y" k_yPos " NA")

<em>;---- Funktionsdefinitionen:</em>
k_KeyPress(BtnCtrl)
{ 
    BtnCtrl.Opt("Default") <em>; Die zuletzt gedrückte Taste hervorheben.</em>
    ControlClick(, "ahk_id " BtnCtrl.Hwnd,,,, "D")
    KeyWait(SubStr(A_ThisHotkey, 3))
    ControlClick(, "ahk_id " BtnCtrl.Hwnd,,,, "U")
}

k_ShowHide(GuiObj, HideText, ShowText)
{
    static isVisible := true
    if isVisible
    {
        GuiObj.Hide
        A_TrayMenu.Rename HideText, ShowText
        isVisible := false
    }
    else
    {
        GuiObj.Show
        A_TrayMenu.Rename ShowText, HideText
        isVisible := true
    }
}

GetKeyNameText(Key, Extended := false, DoNotCare := false)
{
   Params := (GetKeySC(Key) &lt;&lt; 16) | (Extended &lt;&lt; 24) | (DoNotCare &lt;&lt; 25)
   VarSetCapacity(KeyNameText, 64, 0)
   DllCall("User32.dll\GetKeyNameText", "Int", Params, "Str", KeyNameText, "Int", 32)
   return KeyNameText
}</pre>
</body>
</html>
