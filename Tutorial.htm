<!DOCTYPE html>
<html lang="de">
	<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"><!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		
		<meta name="author" content="tidbit" />
		<meta name="description" content="Ein AutoHotkey-Tutorial, geschrieben von tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, anfänger guide"/>
		<title>AutoHotkey Anfänger-Tutorial</title>
		<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>AutoHotkey Anfänger-Tutorial <span style="opacity:0.4">von tidbit</span></h1>
			<div id="toc" class="section">
				<h3>Inhaltsverzeichnis</h3>
				<ol>
					<li><a href="#s1" class="toci">Die Grundlagen</a>
						<ol>
							<li><a href="#s11" class="toci">AutoHotkey herunterladen</a></li>
							<li><a href="#s12" class="toci">Wie erstellt man ein Skript</a></li>
							<li><a href="#s13" class="toci">Befehle kann man nicht zusammenführen</a></li>
							<li><a href="#s14" class="toci">Sonstige grundlegende Informationen</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">Hotkeys &amp; Hotstrings</a>
						<ol>
							<li><a href="#s21" class="toci">Tasten und Symbole</a></li>
							<li><a href="#s22" class="toci">Fenster-spezifisch</a></li>
							<li><a href="#s23" class="toci">Mehrere Hotkeys pro Datei</a></li>
							<li><a href="#s24" class="toci">Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">Senden von Tastatureingaben</a>
						<ol>
							<li><a href="#s31" class="toci">Spiele</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">Starten von Programmen &amp; Webseiten</a></li>
					<li><a href="#s5" class="toci">Befehle vs. Funktionen()</a>
						<ol>
							<li><a href="#s51" class="toci">Code-Blöcke</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">Variablen</a>
						<ol>
							<li><a href="#s61" class="toci">Wann und wo Prozentzeichen verwendet werden</a></li>
							<li><a href="#s62" class="toci">Abrufen von Benutzereingaben</a></li>
							<li><a href="#s63" class="toci">Weitere Beispiele</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">Objekte</a>
						<ol>
							<li><a href="#s71" class="toci">Erstellen von Objekten</a></li>
							<li><a href="#s72" class="toci">Verwenden von Objekten</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">Andere hilfreiche Goodies</a>
						<ol>
							<li><a href="#s81" class="toci">Die mysteriösen eckigen Klammern</a></li>
							<li><a href="#s82" class="toci">Herausfinden deiner AHK-Version</a></li>
							<li><a href="#s83" class="toci">Trial-and-Error-Prinzip</a></li>
							<li><a href="#s84" class="toci">Einrückung</a></li>
							<li><a href="#s85" class="toci">Um Hilfe bitten</a></li>
							<li><a href="#s86" class="toci">Andere Links</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - Die Grundlagen</h2>
					<p class="note">
						Bevor wir mit unserer Reise beginnen, will ich dir folgende Ratschläge geben. Über das ganze Tutorial hinweg wirst du auf viel Text und Code treffen. Um AutoHotkey optimal zu lernen, ist es ratsam, den Text zu lesen und die Beispielcodes <b>auszuprobieren</b>. Erst danach solltest du versuchen, die Codes zu analysieren.
						<br />Die meisten Beispiele auf dieser Seite kannst du kopieren und in deinem Texteditor einfügen.
						<br />Wenn du einen Abschnitt nicht auf Anhieb verstehst, empfehle ich dir, ihn nochmal durchzulesen.
					</p>

					<h3 id="s11">a. AutoHotkey herunterladen und installieren</h3>

					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.write('<p class="note">' + translate.tutLocalMessage + '</p>');
					</script>
					<p>
						Bevor du überhaupt etwas mit AutoHotkey (AHK) machen kannst, musst du es herunterladen. Danach musst du AHK eventuell installieren, je nachdem, welche Version du heruntergeladen hast. In diesem Guide verwenden wir den Installer, da er am einfachsten zu bedienen ist.
					</p>

					<p class="warning">Zurzeit gibt es keinen Installer für AutoHotkey v2. Der einfachste Weg es zu nutzen wäre es, die <a href="https://autohotkey.com/v2/">Binärdaten herunterzuladen</a>, die unteren Installationsschritte zu befolgen und im Installationsordner AutoHotkey.exe mit den heruntergeladenen Binärdaten zu ersetzen.
					</p>

					<h3>Anleitung:</h3>
					<ol>
						<li>Öffne die Hauptseite von AutoHotkey. <a href="https://autohotkey.com/">https://autohotkey.com/</a>
						</li>
						<li>Klicke auf Download. <a href="https://autohotkey.com/download/ahk-install.exe">https://autohotkey.com/download/ahk-install.exe</a>
						</li>
						<li>
							Während der Installation von AutoHotkey wirst du gefragt, ob UNICODE oder ANSI installiert werden soll. Ich würde dir UNICODE empfehlen. Es unterstützt nicht-englische Buchstaben und Zahlen (Zeichen). Setze die Installation fort, bis du eine Schaltfläche  siehst, mit der AutoHotkey schließlich installiert werden kann.
						</li>
						<li>Sobald das erledigt ist, großartig! Weiter zu Abschnitt b.</li>
					</ol>
					<p class="note">Video-Anleitung (englisch):<br />
						
						Frankie's "Install and Hello World"<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>
					</p>

					<h3 id="s12">b. Wie erstellt man ein Skript</h3>
					<p>
						Die folgende Anleitung zeigt, wie man AutoHotkey dazu bringen kann, etwas zu tun. AutoHotkey ist keine Zauberei - wir alle wünschten, es wäre so, ist es aber nicht. Also müssen wir AutoHotkey sagen, was zu tun ist. Diesen Vorgang nennt man "Scripting".
					</p>

					<h3>Anleitung:</h3>
					<ul>
						<li>1. Mache einen Rechtsklick auf deinem Desktop.</li>
						<li>2. Finde "Neu" im Menü.</li>
						<li>3. Klicke auf "AutoHotkey Script" innerhalb des "Neu"-Menüs.</li>
						<li>4. Gebe dem Skript einen neuen Namen. Hinweis: Der Name muss mit .ahk enden. Zum Beispiel: MeinSkript.ahk</li>
						<li>5. Finde die neu erstellte Datei auf deinem Desktop und mache einen Rechtsklick darauf.</li>
						<li>6. Klicke auf "Edit Script".</li>
						<li>7. Ein Fenster, vermutlich der Texteditor, sollte sich geöffnet haben. Wenn ja, ERFOLG!
						<hr />
						<p>
							Nun, da du ein Skript erstellt hast, müssen wir noch etwas in die Datei einfügen. Eine Liste aller internen Befehle, Funktionen und Variablen findest du in <a href="#s5">Abschnitt 5</a>.<br />
						</p>
						<p>
							Hier ein sehr einfaches Skript mit einem Hotkey, das, sobald man den Hotkey drückt, Text mithilfe der <a href="commands/Send.htm">Send</a>-Funktion schreiben kann.
						</p>

<pre>
^j::
   Send "Mein erstes Skript"
Return
</pre>
						<p>
							Später werden wir tiefer in die Materie einsteigen. Bis dahin erkläre ich dir, was der obige Code macht.<br />

							- Die erste Zeile. <code>^j::</code> ist der Hotkey. <code>^</code> symbolisiert <span class="key">STRG</span>, <code>j</code> ist die Taste <span class="key">j</span>. Alles <b>links</b> neben <code>::</code> sind die Tasten, die du drücken musst.<br />

							- Die zweite Zeile. <code>Send "Mein erstes Skript"</code> ist der Vorgang zum SENDEN von Tastatureingaben. <code>SEND</code> ist die Funktion. Alles, was nach dem Leerzeichen erfolgt und in Anführungszeichen gesetzt ist, wird geschrieben.<br />

							- Die dritte Zeile. <code>Return</code>. Return wird dein bester Freund. Es STOPPT dein Code an dieser Stelle und ignoriert nachfolgende Zeilen. Dadurch können viele Probleme verhindert werden, besonders wenn du damit anfängst, eine Menge Dinge in deinem Skript einzufügen.
						</p>
						<hr />
						</li><li>8. Speichere die Datei.</li>
						<li>9. Mache einen Doppelklick auf die Datei bzw. auf das Symbol im Desktop, um das Skript zu starten. Öffne den Texteditor (oder wo auch immer du etwas schreiben kannst) und drücke <span class="key">STRG</span> und <span class="key">J</span>.</li>
						<li>10. Hip Hip Hurra! Dein erstes Skript ist fertig. Hole dir ein paar Snacks als Belohnung und komme zurück, um den Rest dieses Tutorials zu lesen.</li>
					</ul>

					<p class="note">
						Video-Anleitung (englisch):<br />
						
						Frankie's "Install and Hello World"<br /><a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>

					</p>
					<h3 id="s13">c. Befehle kann man nicht zusammenführen</h3>
					<p>
						Beim Erstellen deines Codes hast du vielleicht schon den Drang verspürt, mehrere Befehle auf eine Zeile oder sogar ineinander zu setzen - lasse es. In <a href="#s5">Abschnitt 5</a> werden wir darüber sprechen, warum es nicht wie erwartet funktioniert und was du stattdessen tun kannst.
					</p>

					<h3 id="s14">d. Sonstige grundlegende Informationen</h3>
					<div>
						So findest du die englische Hilfedatei auf deinem Computer:<br />
						<p>Downloads für v2.0-a076 und höher enthalten eine Hilfedatei. Zurzeit gibt es keinen Installer für AutoHotkey v2, daher findest du die Hilfedatei an dem Ort, wo du sie hingetan hast.</p>
						<p>Suche nach <b>AutoHotkey.chm</b> oder einer Datei, die AutoHotkey heißt und ein gelbes Fragezeichen hat.</p><!-- There are a few ways to do this, I'll assume you have it installed to the default locations.<br /><br />
						Method 1:
						<ol>
							<li>Find the Start menu or Start Orb on your screen, usually in the lower left.</li>
							<li>Click <b>Programs</b> or <b>All Programs</b>.</li>
							<li>Find <b>AutoHotkey</b> in the list.</li>
							<li>You should then see <b>AutoHotkey Help File</b>. Click it.</li>
							<li>Done!</li>
						</ol>
						Method 2:
						<ol>
							<li>Go to your desktop.</li>
							<li>Find <b>My Computer</b> or <b>Computer</b>. Open it.</li>
							<li>Go into your harddrive that contains <b>AutoHotkey</b>. Probably <b>C:\</b> drive.</li>
							<li>Search within all <b>Program Files</b> folders for <b>AutoHotkey</b>.</li>
							<li>Look for <b>AutoHotkey.chm</b> or a file that says AutoHotkey and has a yellow question mark on it.</li>
							<li>Done!</li>
						</ol>
					</div> -->
						
					<p class="note">
						Online-Links:<br />
						<a href="https://ahkde.github.io/v2/docs/">Dokumentation</a><br />
						<a href="https://ahkde.github.io/v2/docs/commands/">Funktionsliste</a><br />
						<a href="https://ahkde.github.io/v2/docs/Functions.htm#BuiltIn">Verwendung von Funktionen</a><br />
						<a href="https://ahkde.github.io/v2/docs/Variables.htm">Variablen</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

					<p>
						Was ist ein Hotkey? Ein Hotkey ist eine Taste, die sich heiß anfühlt. ... kleiner Scherz. Ein Hotkey ist eine Taste oder Tastenkombination, die der Benutzer auf der Tastatur drücken kann, um einige Aktionen auszulösen.<br />
						Was ist ein Hotstring? Hotstrings werden hauptsächlich verwendet, um Abkürzungen bei Eingabe zu erweitern (Auto-Ersetzen); sie können auch verwendet werden, um eine geskriptete Aktion zu starten.
					</p>

					<p>Hier ein Hotkey:</p>

<pre>
^j::
   Send "Mein erstes Skript"
Return
</pre>

					<p>Hier ein Hotstring:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>Der Unterschied zwischen den beiden Beispielen besteht darin, dass der Hotkey durch Drücken von <span class="key">STRG+J</span> ausgelöst werden kann, während der Hotstring dein geschriebenes "ftw" in "Free the whales" umwandelt.</p>
					<p>
						<i>"Also, wie genau kann ein Hotkey erstellt werden?"</i> Gute Frage. Ein Hotkey erstellt man mithilfe von zwei Doppelpunkten. Die Taste oder Tastenkombination kommt auf die <b>linke</b> Seite von <code>::</code>. Der Inhalt muss darunter stehen, gefolgt von einem <code>Return</code>.<br />
					</p>
					<p class="note">Hinweis: Es gibt Ausnahmen, aber diese neigen häufig dazu, Verwirrung zu stiften. Daher werden sie erst einmal im Tutorial nicht erwähnt.</p>
<pre>
esc::
   MsgBox "Escape!!!!"
Return
</pre>
					<p>Ein Hotstring hat auf jeder Seite des Textes, der ersetzt werden soll, jeweils zwei Doppelpunkte. Der Text, der deinen geschriebenen Text ersetzen soll, muss auf der <b>rechten</b> Seite des zweiten Doppelpunktpaares erfolgen.</p>
					<p>Hotstrings können, wie bereits erwähnt, auch geskriptete Aktionen starten. Eine ausgefallene Bezeichnung für <i>"tue so ziemlich alles"</i>. Das gleiche gilt für Hotkeys.</p>
<pre>
::bzw::
MsgBox "Du hast 'bzw' eingegeben."
Return
</pre>

					<p>
						Außerdem solltest du wissen, dass jeder Hotkey, Hotstring, Label und andere Dinge, über die wir noch nicht geredet haben, viele Codezeilen enthalten kann.
					</p>

<pre>
^j::
   MsgBox "Wow!"
   MsgBox "Das sind"
   Run "notepad.exe"
   winactivate "Unbenannt - Editor"
   WinWaitActive "Unbenannt - Editor"
   send "7 Zeilen{!}{enter}"
   sendinput "innerhalb des STRG{+}J-Hotkeys"
Return
</pre>

					<h3 id="s21">a. Tasten und ihre mysteriösen Symbole</h3>

					<div>
						Du fragst dich vielleicht: <i>"Woher soll ich denn wissen, dass das Zirkumflex (^) die STRG-Taste symbolisiert?!"</i>. Nun, gute Frage. Wenn sie erfahren möchten, was ^ und andere Symbole bedeuten, sollten Sie einen Blick auf diese Tabelle werfen:<br />
						<table class="info">
							<tr><th>Symbol</th><th>Beschreibung</th></tr>
							<tr><td><strong>#</strong></td><td>WIN-Taste (Windows-Logo-Taste)</td></tr>
							<tr><td><strong>!</strong></td><td>ALT-Taste</td></tr>
							<tr><td><strong>^</strong></td><td>STRG-Taste</td></tr>
							<tr><td><strong>+</strong></td><td>UMSCHALT-Taste</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									Mit einem Und-Zeichen können zwei beliebige Tasten oder Maustasten zu einem benutzerdefinierten Hotkey kombiniert werden.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(Die vollständige Liste der Symbole findest du auf der <a href="Hotkeys.htm">Hotkey</a>-Seite)
							</strong>
						</p>
					</div>
					<p>
						Desweiteren findest du hier eine Liste von allen / der meisten Hotkey-Namen, die auf der <b>linken</b> Seite des Doppelpunktpaares verwendet werden können:<br /><a href="KeyList.htm">KeyList.htm</a>
					</p>
					<p>
						Mithilfe von <b>&amp;</b> kann eine benutzerdefinierte Kombination aus zwei (und nur zwei) Tasten (außer Joystick-Tasten) definiert werden. Im folgenden Beispiel kann der Hotkey nur ausgelöst werden, wenn du <span class="key">Numpad0</span> gedrückt hältst und dann die zweite Taste drückst:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox "Sie haben Numpad1 gedrückt, während Sie Numpad0 gedrückt hielten."
Return

Numpad0 &amp; Numpad2::
	Run "Notepad"
Return
</pre>

					<p>
						Du fragst dich bestimmt jetzt, ob Hotstrings auch irgendwelche coole Modifikatoren haben. Ja, das haben sie!<br />
						Hotstring-Modifikatoren werden in dem ersten Doppelpunktpaar eingefügt. Zum Beispiel:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						Weitere Hotkey- und Hotstring-Modifikatoren, Informationen und Beispiele findest du unter:<br />
						<a href="Hotkeys.htm">Hotkeys</a><br />
						<a href="Hotstrings.htm">Hotstrings</a>
					</p>
					<h3 id="s22">b. Fenster-spezifische Hotkeys/Hotstrings</h3>

					<p>Manchmal möchtest du vielleicht, dass ein Hotkey oder Hotstring nur in einem bestimmten Fenster funktioniert (oder deaktiviert ist). Um dies zu tun, müssen Sie auf Befehle zurückgreifen, die ein #-Zeichen davor haben.</p>
					<p>#IfWinActive<br />
					
					#IfWinExist</p>
					<p>
						Diese speziellen Befehle (auch "Direktiven" genannt) erstellen kontextabhängige Hotkeys und Hotstrings. Gebe einfach einen Fenstertitel an. In einigen Fällen kann es jedoch sinnvoll sein, ein HWND, eine Gruppe oder eine Klasse anzugeben. Diese Dinge erfordern fortgeschrittenes Wissen und werden auf der folgenden Seite ausführlicher behandelt: <a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Unbenannt - Editor
#space::
   MsgBox "Sie haben WIN+LEERTASTE im Texteditor gedrückt."
Return
#IfWinActive
</pre>
					<p>Um die Kontextabhängigkeit auszuschalten, gibt man eine beliebige #IfWin-Direktive an und lässt ihre Parameter weg. Zum Beispiel:</p>
<pre>
<em>; Texteditor</em>
#IfWinActive unbenannt - Editor
!q::
   MsgBox "Sie haben ALT+Q im Texteditor gedrückt."
Return
#IfWinActive

<em>; Jedes andere Fenster, das nicht "Unbenannt - Editor" ist</em>
!q::
   MsgBox "Sie haben ALT+Q in einem beliebigen Fenster gedrückt."
Return
</pre>
					<p>Wenn alle #IfWin-Direktiven ausgeschaltet sind (oder nie in einem Skript verwendet werden), können Hotkeys und Hotstrings in allen Fenstern ausgelöst werden.</p><br />
					<p>Die #IfWin-Direktiven sind von der Position abhängig: sie beeinflussen nur Hotkeys und Hotstrings, die sich im Skript physisch darunter befinden.</p>

<pre>
<em>; Texteditor</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox "Sie haben WIN+LEERTASTE im Texteditor gedrückt."
Return
::msg::Sie haben msg in den Texteditor geschrieben
#IfWinActive

<em>; MSPaint</em>
#IfWinActive unbenannt - Paint
#space::
   MsgBox "Sie haben WIN+LEERTASTE in MSPaint gedrückt!"
Return
::msg::Sie haben msg in MSPaint eingegeben!
#IfWinActive
</pre>
					<p class="note">Weitere Informationen und ähnliche Funktionen findest du unter:<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. Mehrere Hotkeys/Hotstrings pro Datei</h3>			   
					<p>Aus irgendeinem Grund bereitet dies bei einigen Leuten Kopfzerbrechen. Also werde ich es klarstellen: AutoHotkey bietet dir die Möglichkeit, <i>so viele</i> Hotkeys und Hotstrings in einer Datei zu haben, wie du willst. Ob es nun 1 oder 3253 sind (oder mehr).</p>
<pre>
#i::
   run "http://www.google.com/"
Return

^p::
   run "notepad.exe"
Return

~j::
   send "ack"
Return

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>Der obige Code ist durchaus akzeptabel. Mehrere Hotkeys, mehrere Hotstrings. Alle in einer großen glücklichen Skript-Datei.</p>


					<h3 id="s24">d. Beispiele</h3>
<pre>::bzw::beziehungsweise                      <em>; Ersetzt "bzw" mit "beziehungsweise", sobald du ein <a href="commands/_Hotstring.htm">Endungszeichen</a> drückst.</em>
:*:bzw::beziehungsweise                     <em>; Ersetzt "bzw" mit "beziehungsweise", ohne dass ein Endungszeichen notwendig ist.</em>

^n::                                        <em>; STRG+N-Hotkey</em>
   run "notepad.exe"                       <em>; Startet das Programm notepad.exe, sobald du STRG+N drückst.</em>
Return                                     <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgelöst.</em>

^b::                                        <em>; STRG+B-Hotkey</em>
   send "{ctrl down}c{ctrl up}"             <em>; Kopiert den markierten Text. ^c könnte man auch verwenden, allerdings ist diese Methode sicherer.</em>
   SendInput "[b]{ctrl down}v{ctrl up}[/b]" <em>; Umschließt den markierten Text mit BBCode-Bold-Tags (Forum).</em>
Return                                      <em>; Dies endet den Hotkey. Der Code darunter wird nicht ausgelöst.</em>
</pre><!-- PAGE 2 --><!-- PAGE 2 --><!-- PAGE 2 -->

					
					
					
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - Senden von Tastatureingaben</h2>
					<p>
						Du hast dich also entschieden, Tasten in einem Programm auszulösen bzw. zu schreiben. Das können wir machen. Verwende die <a href="commands/Send.htm">Send</a>-Funktion. Diese Funktion sendet Tastatureingaben, um das Schreiben oder Drücken von Tasten zu simulieren.<br /><br />
						Bevor wir uns den Dingen zuwenden, solltest du folgende Probleme in Erfahrung bringen, auf die einige Leute häufig stoßen:<br />
						So wie Hotkeys auch, hat Send spezielle Tasten. <a href="commands/Send.htm">Sehr, sehr viele davon.</a><br />
						Hier die 4 bekanntesten Symbole:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: Sendet die ALT-Taste. Zum Beispiel würde <em>Send Das ist ein Text!a</em> die Tasten "Das ist ein Text" senden und dann ALT+A drücken. <strong>Hinweis</strong>: !A hat in einigen Programmen einen anderen Effekt als !a. Das liegt daran, dass !A die Tastenkombination ALT+UMSCHALT+A und !a die Tastenkombination ALT+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">+</span>: Sendet die UMSCHALT-Taste. Zum Beispiel würde <em>Send +abC</em> den Text "AbC" senden, und <em>Send !+a</em> würde ALT+UMSCHALT+A drücken.</p><p><span class="red">^</span>: Sendet die STRG-Taste. Zum Beispiel würde <em>Send ^!a</em> die Tastenkombination STRG+ALT+A drücken, und <em>Send ^{Home}</em> würde STRG+POS1 senden. <strong>Hinweis</strong>: ^A hat in einigen Programmen einen anderen Effekt als ^a. Das liegt daran, dass ^A die Tastenkombination STRG+UMSCHALT+A und ^a die Tastenkombination STRG+A drücken würde. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p><p><span class="red">#</span>: Sendet die WIN-Taste (die Taste mit dem Windows-Logo), demzufolge würde <em>Send #e</em> die WIN-Taste gedrückt halten und dann den Buchstaben "e" drücken.</p>
					</div>
					<p><i><strong>Die nächsten Absätze beziehen sich auf die <a href="commands/Send.htm">Tabelle der Send-Seite</a>.</strong><br /></i></p>
					<p class="note">
						Hinweis:<br />Diese Tabelle gilt <b>nicht</b> für <a href="Hotkeys.htm">Hotkeys</a>. Das heißt, dass du <span class="key">CTRL</span> oder <span class="key">ENTER</span> (oder jede andere Taste) nicht mit geschweiften Klammern umschließen sollst, während du ein Hotkey erstellst.
					</p><br />

					<div>
						Das folgende Beispiel zeigt, was man mit einem Hotkey nicht machen sollte:
<pre>
<em>; Beim Erstellen eines Hotkeys...
; FALSCH</em>
{LCtrl}::
   send "AutoHotkey"
Return

<em>; RICHTIG</em>
LCtrl::
   send "AutoHotkey"
Return
</pre>
					</div>
					<hr />
					<div>
						<p>Die gigantische Tabelle oben zeigt so ziemlich jede spezielle Taste, die in AHK integriert ist. Zum Beispiel: <code>{enter}</code> und <code>{space}</code>.<br />
						Viele Leute denken, dass die geschweiften Klammern in den Dokumentationen nur zum Spaß gesetzt sind. Aber tatsächlich <b>sind sie notwendig</b>. Nur so kann AHK wissen, dass z. B. <code>{!}</code> als "Ausrufezeichen" und nicht als "drücke die <span class="key">ALT</span>-Taste" interpretiert werden soll. Vergiss nicht, dass du dir die Tabelle auf der <a href="commands/Send.htm">Send</a>-Seite anschauen kannst, um zu überprüfen, ob alle Klammern richtig gesetzt sind.</p>
<pre>
<em>; Sind dir die geschweiften Klammern um das Zeichen herum aufgefallen? Wenn sie nicht da wären, würde AHK
; die ALT-Taste drücken.</em>
send "Dieser Text wurde geschrieben{!}"
</pre>

<pre>
<em>; Das gleiche wie oben, aber mit der ENTER-Taste. AHK würde "enter" schreiben, wenn ...
; ... es nicht mit geschweiften Klammern umschlossen wäre.</em>
send "Mehrere enter Zeilen wurden enter gesendet." <em>; FALSCH</em>
send "Mehrere{enter}Zeilen wurden{enter}gesendet." <em>; RICHTIG</em>
</pre>
						<div>
							Viele Leute denken auch, dass <b>jedes einzelne Zeichen</b> in geschweiften Klammern gesetzt werden muss. Das ist FALSCH. Wenn das Zeichen nicht in der Tabelle angegeben ist, muss es nicht in Klammern gesetzt werden. Normale Buchstaben, Zahlen oder sogar einige Symbole (wie z. B. der Punkt) müssen <b>nicht</b> von geschweiften Klammern umschlossen sein.<br /> 
							Außerdem kannst du pro Send-Funktion mehr als 1 Buchstabe, Zahl oder Symbol senden. Send-Funktionen mit je 1 Buchstabe sind unnötig.

<pre>
<em>; Umschließe nur Wörter oder einzelne Buchstaben, die in der oben erwähnten Tabelle vorkommen.</em>
send "{a}"       <em>; FALSCH</em>
send "{b}"       <em>; FALSCH</em>
send "{c}"       <em>; FALSCH</em>
send "{a}{b}{c}" <em>; FALSCH</em>
send "{abc}"     <em>; FALSCH</em>
send "abc"       <em>; RICHTIG</em>
</pre>
						</div>
						<div>
							Um eine Taste gedrückt zu halten oder loszulassen, umschließt man den Tastennamen mit geschweiften Klammern und fügt das Wort UP oder DOWN ein.

<pre>
<em>; Hier wird gezeigt, wie du eine Taste gedrückt hältst und eine weitere Taste (oder mehrere) drückst.
; Sollte eine Methode nicht funktionieren, kannst du eine andere ausprobieren.</em>
send "^s"                     <em>; Beide Zeilen senden STRG+S</em>
send "{ctrl down}s{ctrl up}"  <em>; Beide Zeilen senden STRG+S</em>
Send "{ctrl down}c{ctrl up}"
Send "{b down}{b up}"
Send "{TAB down}{TAB up}"
Send "{Up down}"  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep 1000        <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send "{Up up}"    <em>; Lässt die NACH-OBEN-Taste los.</em>
</pre>
						</div>
					</div>
					<div>
							Aber nun fragst du dich vielleicht <i>"Wie kann ich meine wirklich langen Send-Funktionen besser lesbar machen?"</i>. Einfach. Benutze einen so genannten Fortsetzungsbereich. Schreibe einfach auf einer neuen Zeile eine runde Startklammer, dann deinen Inhalt, und zum Schluss eine runde Endklammer. Weitere Informationen findest du unter <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a>.
<pre>
send "
(
Zeile 1
Zeile 2
Äpfel sind Früchte.
)"
</pre>

					</div>
					<p class="note">
						Hinweis: Es gibt verschiedene Formen von Send. Jede hat ihre eigenen Besonderheiten. Wenn eine Form von Send nicht wie gewollt funktioniert, kannst du einen anderen Typ von Send ausprobieren. Ersetze einfach den Funktionsnamen "Send" mit "SendPlay" oder was auch immer du möchtest.<br />
						Hier die üblichen Wege zum Senden von Text:<br />
						
						Send<br />
						
						SendRaw<br />
						
						SendInput<br />
						
						SendPlay<br />
						
						SendEvent<br />
						Um mehr über die verschiedenen Methoden zu erfahren, <a href="commands/Send.htm">siehe hier</a>.
					</p>
					<h3 id="s31">a. Spiele </h3>
					<p>
						<b><span style="color:red;">Das ist wichtig!</span></b><br />
						Viele Spiele, vorallem die modernen, haben Software zur Abwehr von Cheats. Dinge wie GameGuard, Hackshield, PunkBuster und einige andere. Bei einigen Spielen mit Cheat-Abwehr wirst du feststellen, dass deine Hotkeys, Hotstrings und Send-Funktionen nicht funktionieren werden.<br />
						Das Umgehen solcher Systeme verletzt die Richtlinien des Spiels und kann dazu führen, dass du gebannt wirst. Außerdem ist es ziemlich schwierig, solche Systeme zu umgehen. Es gibt Methoden, um die Erfolgschance in einigen Spielen zu erhöhen, aber es gibt keinen magischen <i>"Funktioniere sofort!!!"</i> Button. Probiere also <b>JEDE</b> Methode aus, bevor du aufgibst.<br />
					</p>

					<p>
						Es gibt auch bekannte Probleme mit DirectX. Wenn du Probleme hast und weißt, dass das Spiel DirectX verwendet, kannst du folgende Dinge ausprobieren. Wenn möglich, solltest du das Spiel auch im Fenstermodus starten. Dies behebt einige DirectX-Probleme.<br />
						Weitere DirectX-Probleme können auftreten, wenn Pixel- oder Image-Funktionen verwendet werden. Farben werden als schwarz (0x000000) erkannt, egal welche Farbe du versuchst abzurufen. Das ist eine weitere knifflige Sache, die es zu beheben gilt. Versuche das Spiel im Fenstermodus auszuführen, sofern möglich.
					</p>
					<p>
						Es gibt keine einheitliche Lösung, um AutoHotkey für alle Programme lauffähig zu machen. Wenn alles, was du versuchst, fehlschlägt, ist AutoHotkey eventuell für deine Anforderung nicht geeignet.
					</p>
					<div>
						<hr />
						Aus der <a href="FAQ.htm#games">FAQ</a>-Seite:<br />
						Einige Spiele verwenden ausschließlich DirectInput. Der Nebeneffekt davon ist, dass sie möglicherweise alle künstlichen Tastatureingaben und Mausklicks ignorieren. Um das zu umgehen, können folgende Möglichkeiten ausprobiert werden:
						<ul>
							<li>Verwende <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> via: 1) SendPlay-Funktion; 2) <a href="commands/SendMode.htm">SendMode</a> Play; und/oder 3) <a href="Hotstrings.htm#SendMode">Hotstring</a>-Option SP.</li>
							<li>Erhöhe <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>. Zum Beispiel:</li>
							<li><code>SetKeyDelay 0, 50</code></li>
							<li><code>SetKeyDelay 150, 150, "Play"</code></li>
							<li>Versuche <a href="commands/ControlSend.htm">ControlSend</a>, das dort funktionieren könnte, wo andere Sendemethoden versagen.</li>
						</ul>
					</div><!-- PAGE 3 --><!-- PAGE 3 --><!-- PAGE 3 -->
					
					
					
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - Öffnen von Programmen &amp; Webseiten</h2>
					<div>
						Um ein Programm wie <i>Mspaint.exe, Calc.exe, script.ahk</i> oder sogar einen Ordner zu starten, verwendet man die <a href="commands/Run.htm">Run</a>-Funktion. Mit dieser Funktion kann man auch URLs wie <a href="https://autohotkey.com/">https://autohotkey.com/</a> öffnen. Wenn dein Computer deinen gewünschten Typ eines Programms starten kann, ist das sehr einfach:

<pre>
<em>; Startet ein Programm. Hinweis: Die meisten Programme benötigen einen VOLLSTÄNDIGEN Dateipfad.</em>
Run A_ProgramFiles "\Beliebiges_Programm\Programm.exe"

<em>; Öffnet eine Webseite</em>
Run "https://autohotkey.com"
</pre>
					</div>
					<div>
						Es gibt noch ein paar weitere Features, wie z. B. Befehlszeilenparameter und CLSID.<br />
						Wenn du mehr darüber erfahren willst, besuche die <a href="commands/Run.htm">Run-Seite</a>.
						<br />
						Hier ein paar weitere Beispiele:
<pre>
<em>; Einige Programme benötigen keinen vollständigen Pfad, wie z. B. die Standardprogramme von Windows.</em>
Run "Notepad.exe"
Run "MsPaint.exe"

<em>; Öffnet den Ordner "Eigene Dokumente" mithilfe der built-internen <a href="Variables.htm#BuiltIn">AHK-Variable</a></em>
Run A_MyDocuments

<em>; Öffnet einige Webseiten</em>
Run "https://autohotkey.com"
Run "http://www.google.com"
</pre>
						<br />
						<p class="note">Weiterführende Informationen und Beispiele findest du unter:<br /><a href="commands/Run.htm">commands/Run.htm</a>.</p>
					</div><!-- PAGE 4 --><!-- PAGE 4 --><!-- PAGE 4 -->


					
					
					
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - Befehle vs. Funktionen()</h2>
					<div>
						AutoHotkey hat zwei Typen von Dingen, die der Scripter zum Erstellen des Codes verwenden kann:<br />
						Befehle und Funktionen()<br />
						<p class="note">Eine Liste aller Befehle/Funktionen: <a href="commands/index.htm">commands/index.htm</a><br />
						<p>Beachte, dass alle Befehle, außer Ablaufsteuerungsanweisungen wie Return, als Funktionen aufgerufen werden können, und umgekehrt. Welche Syntax du verwenden möchtest ist dir überlassen, aber in der Regel wird die Funktionssyntax bevorzugt, weil sie flexibler ist.</p>
					</div>
					<h3>Befehle</h3>
					<p>
						Ein Befehl kannst du anhand seiner Syntax (Schreibweise) erkennen. Im Gegensatz zu Funktionen werden die Parameter von Befehlen nicht in runden Klammern gesetzt. Ein Befehl würde also wie folgt aussehen:<br />
						<code>Befehl, Parameter1, Parameter2, Parameter3</code><br />

						<br />Es ist nicht möglich, mehrere Befehle auf einer Zeile zu setzen.<br />
						Du kannst keine Befehle in den Parametern anderer Befehle setzen.
					</p>

<pre>
Msgbox, Hello Run, Notepad.exe   <em>; Falsch</em>
Msgbox, Hello, Run, Notepad.exe  <em>; Falsch</em>

Msgbox, Hello      <em>; Richtig</em>
Run, Notepad.exe
</pre>

					Befehle unterscheiden sich von Funktionen auch dadurch, dass sie eine "traditionelle Syntax" verwenden. Das bedeutet: Wenn du eine <code>Variable</code> verwendest, MUSST du ihren Namen mit Prozentzeichen umschließen. <code>%Variable%</code>. Text und Zahlen müssen nicht in "Anführungszeichen" gesetzt werden. <code>Das ist ein Text</code>. Außerdem kannst du im Gegensatz zu Funktionen in den Parametern keine Berechnungen durchführen.
					<p class="note">
						Allerdings gibt es die Möglichkeit, mit einem einzelnen <code>%</code> einen Ausdruck zu erzwingen, um trotzdem Berechnungen in Parametern durchführen zu können.
					</p>
					<h3>Funktionen</h3>
					<div>
						Wie bereits erwähnt sind Funktionen anders aufgebaut, weil sie runde Klammern verwenden. Eine typische Funktion sieht wie folgt aus:<br />
						<code>Funktion(Parameter1, Parameter2, Parameter3)</code><br /><br />
						Die Hauptunterschiede der Funktionen sind:
						<ol>
							<li>
								Du kannst Berechnungen in ihnen durchführen.<br />
								
								-- <code>SubStr(37*12, 1, 2)</code><br />
								
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								Variablen müssen nicht in Prozentzeichen gesetzt werden.<br />
								
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								Funktionen können innerhalb von anderen Funktionen erfolgen.<br />
								
								-- <code>SubStr(A_AHKPath, inStr(A_AHKPath, "AutoHotkey"))</code>
							</li>
							<li>
								Text muss in Anführungszeichen gesetzt werden.<br />
								-- <code>SubStr("Ich programmiere, genial!", 16)</code>
							</li>
						</ol>

						Die Art und Weise, wie Funktionen einen Wert zurückgeben, unterscheidet sich von Befehlen. Befehle benötigen den <i>AusgabeVar</i>-Parameter, Funktionen nicht. Die gängigste Methode, den Wert einer Funktion in eine Variable zu speichern, sieht wie folgt aus:<br />
						<code><span style="color:#ff4400"><b>MeineVariable</b></span>:=Funktion(Parameter)</code>

<pre>
<span style="color:#ff4400"><b>MeineVariable</b></span>:=SubStr("Ich programmiere, genial!", 16)
</pre>
					<p class="note">Dies ist nicht der einzige Weg, aber der häufigste. Man speichert den Wert der Funktion (in diesem Fall <code>SubStr(...)</code>) in <code>MeineVariable</code>, das auf der rechten Seite von := erfolgt.<br />
					<a href="Functions.htm">Mehr zu Funktionen</a></p>
					</div>
					<div>
						Kurz gesagt:

<pre>
<em>; Das sind Befehle</em>
Msgbox, Dies ist etwas Text.
StrReplace, Ausgabe, %Eingabe%, AutoHotKey, AutoHotkey
SendInput, Das ist genial{!}{!}{!}

<em>; Das sind Funktionen</em>
MsgBox("Dies ist etwas Text.")
Ausgabe := StrReplace(Eingabe, "AutoHotKey", "AutoHotkey")
SendInput("Das ist genial{!}{!}{!}")
</pre>

					</div>
					<h3 id="s51">a. Code-Blöcke</h3>
					<p>
						<a href="commands/Block.htm">Code-Blöcke</a> sind kleine geschweifte Klammern (<b>{</b> und <b>}</b>), die einen Abschnitt des Codes gruppieren. Nur so kann AutoHotkey wissen, dass die gruppierten Codezeilen zu einer großen Familie gehören, die zusammenbleiben müssen. Code-Blöcke werden häufig in Verbindung mit <i>If</i> und <i>Loop</i> eingesetzt. Lässt man die Klammern weg, wird nur die erste Zeile des Blocks aufgerufen.<br /><br />
					</p>
					<div>
						Im folgenden Code werden die beiden Zeilen nur ausgeführt, wenn Var gleich 5 ist.
<pre>
if (var=5)
{
   MsgBox "Var ist gleich " var "!!"
   Exitapp
}
</pre><br />

						Im folgenden Code wird das Mitteilungsfenster nur angezeigt, wenn Var gleich 5 ist. Das Skript wird immer beendet, selbst wenn Var <b>nicht</b> 5 ist.

<pre>
if (var=5)
   MsgBox "Var ist gleich " var "!!"
   Exitapp
</pre><br />

						Diese Vorgehensweise ist völlig in Ordnung, da dem If nur eine Codezeile zugeordnet ist. Es ist genau das gleiche wie oben, allerdings habe ich die zweite Zeile nicht eingerückt, um zu zeigen, dass sie nicht dem if gehört.

<pre>
if (var=5)
   MsgBox "Var ist gleich " var "!!"
MsgBox "Wir sind nun 'außerhalb' von if. Geschweifte Klammern waren nicht notwendig, weil nur eine Zeile dazugehört."
</pre>
					</div><!-- PAGE 5 --><!-- PAGE 5 --><!-- PAGE 5 -->
					
					
					
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - Variablen</h2>
					<p>
						<a href="Variables.htm">Variablen</a> sind quasi kleine Klebezettel, die wichtige Informationen enthalten. Sie können verwendet werden, um Text, Zahlen, Daten von Funktionen/Befehlen oder mathematischen Gleichungen zu speichern. Ohne sie wäre das Programmieren &amp; Scripting sehr viel anstrengender.
					</p>
					<hr />
					<div>
						Es gibt mehrere Wege, wie man einer Variable etwas zuweisen kann; allerdings befassen wir uns nur mit den bekanntesten Formen. Bitte achte auf das Doppelpunkt-Gleichheitszeichen (:=).
						<ol>
							<li><code>Variable := "Text"</code><br />
								<div class="indented">Dies ist die einfachste Form für eine Variable. Einfach Text eingeben und fertig. Jeder Text muss in "Anführungszeichen" gesetzt werden.</div>
							</li>
							<li><code>Variable := Variable2</code><br />
								<div class="indented">Das gleiche wie oben, außer dass du den Wert einer Variable einer anderen Variable zuweist.</div>
							</li>
							<li><code>Variable := 6+8/3*2-sqrt(9)</code><br />
								<div class="indented">Dank des Ausdrucks kannst du Berechnungen durchführen!</div>
							</li>
						</ol>
						<p>Alle von denen können auf zwei Arten kombiniert werden:</p>
						Methode #1: <code>var:="Das Ergebnis von 5+ " Variable " ist: " 5+Variable</code><br />
						Methode #2: <code>var:="Das Ergebnis von 5+%Variable% ist: %5+Variable%"</code>

					</div>
					<hr />

					<p class="note">
						Jedes Gleichheitszeichen (<b>=</b>) mit vorangestelltem Symbol wird als <b>Zuweisungsoperator</b> bezeichnet und ist immer ein Ausdruck. Das heißt also, dass <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> usw. immer Ausdrücke verwenden.
					</p>
					<h3 id="s61">a. Wann und wo Prozentzeichen verwendet werden</h3>
					<p>
						Viele haben Probleme damit zu erkennen, wann und wo sie die Variablen mit Prozentzeichen (<b>%</b>) umschließen sollen. Ich hoffe, dass die folgende Übersicht Unklarheiten beseitigen kann.
					</p>
					<div>
						Wann und wo %'s verwendet werden:
						<ol>
							<li>Bei Befehlen (siehe oben).<br />
							-- Außer wenn der Parameter AusgabeVar ist.</li>
							<li>Wenn der Inhalt einer Variable innerhalb einer in Anführungszeichen gesetzte Zeichenkette benutzt werden soll (schau dir die zweite Methode im vorherigen Abschnitt an).</li>
						</ol>

						Wann und wo %'s <b>nicht</b> verwendet werden:
						<ol>
							<li>In Parametern, die Ausgabevariablen sind, zum Beispiel: <code>StrLen, <span style="color:red">AusgabeVar</span>, %EingabeVar%</code></li>
							<li>Auf der linken Seite einer Zuweisung: <code><span style="color:red">Var</span> := "123abc"</code></li>
							<li>Überall in Ausdrücken (aber außerhalb von in Anführungszeichen gesetzten Zeichenketten). Zum Beispiel:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. Abrufen von Benutzereingaben</h3>
					<div>
						Manchmal ist es notwendig, Informationen eines Benutzers einzufordern. Es gibt mehrere Möglichkeiten, dies zu tun, aber der einfachste Weg ist die <a href="commands/InputBox.htm">InputBox</a>. Hier ein einfaches Beispiel, wie man dem Benutzer ein paar Fragen stellen kann und die eingegebenen Dinge verarbeitet.

<pre>
AusgabeVar := InputBox("Wie heißt du mit Vornamen?", "Frage 1")
if (AusgabeVar="Bill")
   MsgBox "Du hast einen tollen Namen, " AusgabeVar "."

AusgabeVar2 := InputBox("Magst du AutoHotkey?", "Frage 2")
if (AusgabeVar2="ja")
   MsgBox "Danke, dass du mit " AusgabeVar2 " geantwortet hast, " AusgabeVar "! Wir werden gute Freunde."
else
   MsgBox AusgabeVar ", das macht mich traurig."
</pre>
					</div>

					<h3 id="s63">c. Weitere Beispiele</h3>
					<div>
<pre>
Result := <a href="commands/MsgBox.htm">MsgBox</a>("Möchtest du fortfahren?",, 4)
if <a href="commands/MsgBox.htm#Result">Result</a> = "No"
    Return                <em>; Bei Nein wird der Code genau hier gestoppt.</em>
MsgBox "JA gedrückt."     <em>; Ansonsten hat der Benutzer JA ausgewählt.</em>
</pre>
<pre>
<em>; Einige Beispiele, die zeigen, wo Prozentzeichen möglich sind und wo nicht</em>
Var := "text"             <em>; Speichert etwas Text in eine Var.</em>
VarNr := 6                <em>; Speichert eine Nummer in eine Var.</em>
Var2 := Var               <em>; Speichert eine Var in eine andere Var.</em>
Var3 .= Var               <em>; Fügt eine Var an das Ende einer anderen Var an.</em>
Var4 += VarNr             <em>; Addiert den Wert einer Var mit einer anderen Var.</em>
Var4 -= VarNr             <em>; Subtrahiert den Wert einer Var mit einer anderen Var.</em>
Var5 := SubStr(Var, 2, 2) <em>; Var innerhalb einer Funktion.</em>
Var6 := Var "Text"        <em>; Speichert eine Var in eine andere Var und fügt etwas Text hinzu.</em>
MsgBox(Var)               <em>; Var innerhalb einer Funktion.</em>
MsgBox Var                <em>; Das gleiche wie oben.</em>
Var := StrSplit(Var, "x") <em>; Var innerhalb einer Funktion mit EingabeVar und AusgabeVar.</em>
if (VarNr = 6)            <em>; Überprüft, ob eine Var mit einer Nummer übereinstimmt.</em>
if VarNr = 6              <em>; Das gleiche wie oben.</em>
if (Var != VarNr)         <em>; Überprüft, ob eine Var nicht mit einer anderen Var übereinstimmt.</em>
if Var1 &lt; Var2            <em>; Überprüft, ob eine Var kleiner als eine andere Var ist.</em>
</pre>
					</div><!-- PAGE 6 --><!-- PAGE 6 --><!-- PAGE 6 -->
				
				
				
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - Objekte</h2>
					<p>
						<a href="Objects.htm">Objekte</a> sind eine Möglichkeit, deine Daten auf eine effizientere Weise zu organisieren. Manchmal werden Objekte auch als Arrays bezeichnet. Beachte aber, dass alle Arrays eigentlich nur Objekte sind. Wir geben den Objekten je nach Verwendungszweck unterschiedliche Namen, aber in der Regel sind alle Objekte gleich.
					</p>
					<hr />
					Ein Objekt ist im Grunde genommen eine Sammlung von Variablen. Die Variablennamen werden als "Keys" bezeichnet und der Inhalt der Variablen ist "Values".<br />
					<br />
					Wenn du Leute hörst, die ein Objekt als <i>Array</i> oder <i>indiziertes Array</i> bezeichnen, bedeutet das in der Regel, dass alle Keys fortlaufende Nummern sind, beginnend bei 1.<br />
					Wenn du Leute hörst, die ein Objekt als <i>assoziatives Array</i> bezeichnen, bedeutet das, dass die Keys entweder Zeichenketten (Text) oder nicht-fortlaufende Nummern sind. Manchmal ist es auch eine Mischung aus beidem, einschließlich fortlaufende Nummern!<br />
					<br />
					Es gibt keine Einschränkungen, was ein Key oder Value sein kann - sie können sogar andere Arrays sein!
					<br />
					Ein Array, das Arrays enthält, wird als <i>Mehrdimensionales Array</i> bezeichnet, aber dazu später mehr.
					<hr />
					<div>
						Es gibt eine Reihe von Gründen, warum ein Objekt nützlich sein kann. Einige Beispiele:<br />
						<ol>
							<li>Du willst eine nummerierte Liste von Dingen, z. B. eine Einkaufsliste (dies wäre ein indiziertes Array)</li>
							<li>Du möchtest etwas gitterförmig darstellen, z. B. für ein Brettspiel (dies würde mit mehrdimensionalen Objekten erfolgen)</li>
							<li>Du hast eine Liste von Dingen, in der jedes Ding eine Bezeichnung hat, wie z. B. die Merkmale einer Frucht (dies wäre ein assoziatives Array)</li>
						</ol>
					</div>
					<h3 id="s71">a. Erstellen von Objekten</h3>
					<div>
						Es gibt mehrere Möglichkeiten, ein Objekt zu erstellen, die gängigsten davon sind unten aufgelistet<br />
						<ol>
							<li><code>MeinObjekt := ["eins", "zwei", "drei", 17]</code><br />
								<div class="indented" >
									Syntax mit eckigen Klammern. Auch bekannt als "indiziertes Array". Ein indiziertes Array ist ein Objekt, das eine Liste von Elementen mit der Nummerierung 1 und höher repräsentiert. In diesem Beispiel wird der Wert <code>"eins"</code> in den Objekt-Key <code>1</code> (aka Index 1) und der Wert <code>17</code> in den Objekt-Key <code>4</code> (aka Index 4) gespeichert.
								</div>
							</li>
							<li><code>Banane := {"Form": "Länglich", "Farbe": "Gelb", "Geschmack": "Köstlich", "Preis": 3}</code><br />
								<div class="indented" >
									Syntax mit geschweiften Klammern. Auch bekannt als "assoziatives Array". Ein assoziatives Array ist eine Sammlung von Daten, wo jedes Element einen Namen hat. In diesem Beispiel wird der Wert <code>"Gelb"</code> in den Objekt-Key <code>"Farbe"</code> gespeichert. Außerdem wird der Wert <code>3</code> in den Objekt-Key <code>"Preis"</code> gespeichert.
								</div>
							</li>
							<li><code>MeinObjekt := Array("eins", "zwei", "drei", 17)</code><br />
								<div class="indented" >
									Die Funktion zum Erstellen eines Arrays. Identisch zur Syntax mit eckigen Klammern, aber in einer Funktion verpackt.
								</div>
							</li>
							<li><code>Banane := Object("Form", "Länglich", "Farbe", "Gelb", "Geschmack", "Köstlich", "Preis", 3)</code><br />
								<div class="indented" >
									Die Funktion zum Erstellen eines Objekts. Identisch zur Syntax mit geschweiften Klammern, aber in einer Funktion verpackt.
								</div>
							</li>
						</ol>

						Vergiss nicht, dass all diese Definitionen das gleiche erstellen (Objekte), nur mit unterschiedlichen Keys.

					</div>

					<h3 id="s72">b. Verwenden von Objekten</h3>
					Objekte können vielfältig eingesetzt werden. Sie können Werte abrufen, Werte setzen, neue Werte hinzufügen und so weiter.
					<div>
						<br />
						<strong>Setzen von Werten:</strong>
						<div class="indented">
							Das Setzen von Werten in einem Objekt ist so einfach wie das Setzen des Wertes einer Variable.<br />
							Du musst lediglich die Klammer- oder Punktschreibweise (wie im Abschnitt zum Abrufen eines Wertes gezeigt) auf die linke Seite eines Ausdruckszuweisungssymbols <code>:=</code> setzen.<br />
							<br />
							Zum Beispiel:<br />
							<code>Banane.Konsistenz := "Matschig"</code><br />
							<code>Banane["Verfault"] := True <em>; Diese Banane ist verfault. Bäh.</em></code>
						</div>
						<br />
						<strong>Abrufen von Werten:</strong>
						<ol>
							<li><code>Wert := Banane["Farbe"]</code><br />
								<div class="indented" >Klammerschreibweise. Mit dieser Schreibweise ist es möglich, ein Ausdruck als Key zu verwenden, um an den Wert deines Objekts zu kommen. In diesem Fall habe ich den einfachen Ausdruck <code>"Farbe"</code> verwendet, das (wenig überraschend) der Key <code>Farbe</code> ist. Es wird ein Mitteilungsfenster mit dem Wort "Gelb" angezeigt, weil wir im <a href="#s71">vorherigen Abschnitt</a> den Key <code>Farbe</code>  auf "Gelb" gesetzt haben.
								</div>
							</li>
							<li><code>Wert := Banane.Farbe</code><br />
								<div class="indented" >
									Punktschreibweise. Diese Schreibweise lässt dich nur direkt geschriebene Zeichenketten als Keys verwenden. In den Keys können keine Variablen angegeben werden.
								</div>
							</li>
						</ol>
						<br />
						<strong>Hinzufügen neuer Keys und Werte:</strong>
						<ol>
							<li>Direktes Hinzufügen von Werten
								<div class="indented" >
									Um einen Wert oder Key direkt hinzuzufügen, legt man einfach einen Key an, der noch nicht existiert. Zum Beispiel:<br />
									<code>MeinObjekt.NeuerKey := "Glänzend"</code><br />
									<code>MeinObjekt["NeuerKey"] := 3.1415</code>
								</div>
							</li>
							<li>Einfügen von Werten
								<div class="indented" >
									Schau dir die folgenden Methoden an, wie Keys und Werte noch eingefügt werden können.<br />
									<br />
									<code>MeinObjekt.InsertAt(Index, Wert1, Wert2, Wert3...)</code><br />
									<i>Index</i> ist ein beliebiger Integer-Key. Diese Methode wird ALLE höheren Integer-Keys um die Anzahl der eingefügten Werte nach oben verschieben, selbst wenn Lücken vorhanden sind (fügst du beispielsweise zwischen den Keys 1 und 100 einen Wert in Key 50 ein, wird der Key 100 auf 101 verschoben).<br />
									<br />
									<code>MeinObjekt.Push(Wert1, Wert2, Wert3...)</code><br />
									Diese Methode bewirkt, dass die Werte an das Ende des Arrays <i>MeinObjekt</i>  "angefügt" werden. Das heißt, dass die Werte bei dem höchsten Integer-Key plus eins eingefügt werden.<br />
								</div>
							</li>
						</ol>
						<br />
						<strong>Entfernen von Keys und Werten:</strong>
						<ol>
							<li>Leermachen des Wertes.<br />
								<div class="indented" >
									Der einfachste Weg, einen Wert zu entfernen, besteht darin, ihn leer zu machen. Setze den Wert einfach auf "", auch bekannt als <i>leere Zeichenkette</i>. Der Key wird dadurch nicht entfernt, aber es wird die Illusion erzeugt, als wäre sein Wert noch nicht gesetzt.<br />
									Anhand der <code>HasKey</code>-Methode kann man erkennen, dass der Key noch vorhanden ist. Außerdem taucht der Key weiterhin in einer <code>For</code>-Schleife auf. (For-Schleifen werden später erklärt)
								</div>
							</li>
							<li>Entfernen des Keys<br />
								<div class="indented" >
									Es gibt mehrere Wege, wie der Key <i>und gleichzeitig auch</i> sein Wert entfernt werden kann. Da gibt es:
								</div>
								<ol>
									<li><code>EntfernterWert := MeinObjekt.Delete(BeliebigerKey)</code>
										<div class="indented">
											Der vorherige Wert von <code>MeinObjekt[BeliebigerKey]</code> wird in <i>EntfernterWert</i> gespeichert.
										</div>
									</li>
									<li><code>AnzahlEntfernterKeys := MeinObjekt.Delete(ErsterKey, LetzterKey)</code>
										<div class="indented">
											Mit dieser Methode kann ein Bereich von Integer- (nummerierten) oder Zeichenketten-Keys zwischen ErsterKey und LetzterKey entfernt werden.<br />
											<br />
											Der zurückgegebene Wert ist die Anzahl der Keys, die entfernt wurden - dieser Wert ist nützlich, wenn du eine Lücke zwischen deinen Keys hast (wenn du z. B. die Keys 1, 3 und 4 angegeben hast, wird AnzahlEntfernterKeys eine 3 sein, weil nur 3 Keys entfernt werden konnten)
										</div>
									</li>
									<li><code>MeinObjekt.Pop()</code>
										<div class="indented">
											Entfernt den höchsten Integer-Key, und gibt den Wert zurück. Höhere Keys als diesen gibt es nicht.
										</div>
									</li>
									<li><code>EntfernterWert := MeinObjekt.RemoveAt(Index)</code><br />
									<code>AnzahlEntfernterKeys := MeinObjekt.RemoveAt(Index, Länge)</code>
										<div class="indented">
											Diese Methode entfernt alle Keys von <i>Index</i> bis <i>Index + Länge - 1</i>. Wenn <i>Länge</i> fehlt, gilt standardmäßig 1. Nach dem Entfernen der Keys werden alle höheren Integer-Keys (nummerierten) nach unten verschoben, um die Lücke zu füllen, so dass der Wert bei <i>Index + Länge</i>, sofern vorhanden, nun bei <i>Index</i> sein wird. Dieser Sachverhalt entspricht der Funktionsweise der InsertAt-Methode mit mehreren angegebenen Werten.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div><!-- PAGE 7 --><!-- PAGE 7 --><!-- PAGE 7 -->

					
					
					
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - Andere hilfreiche Goodies</h2>
					<p>
						Wir haben das Ende unserer Reise erreicht, werter Freund. Ich hoffe, du hast etwas gelernt. Aber bevor wir gehen, zeige ich dir noch ein paar Dinge, die du wissen solltest. Viel Spaß!
					</p>
					<h3 id="s81">a. Die mysteriösen eckigen Klammern</h3>
					<div>
						Auf fast allen Seiten sind zwei Symbole (<b>[</b> und <b>]</b>) zu sehen, die innerhalb der gelben Syntax-Box etwas Bestimmtes umschließen. Alles, was sich innerhalb dieser eckigen Klammern befindet, ist <b><i>OPTIONAL</i></b>. Das bedeutet, dass du das Zeug darin weglassen kannst, wenn du es nicht benötigst. Beim Schreiben deines Codes ist es sehr wichtig, <b>NICHT</b> die eckigen Klammern in deinem Code zu verwenden.<br /><br />
						Auf der <a href="commands/ControlGetText.htm">ControlGetText</a>-Seite kannst du folgendes sehen (ohne Farben):<br />
						<code>AusgabeVar := ControlGetText(<span style="color:red"><b>[</b></span><span style="color:navy">, Steuerelement, Fenstertitel, Fenstertext, Titelausnahme, Textausnahme</span><span style="color:red"><b>]</b></span>)</code><br /><br />
						Also könntest du folgendes tun:<br />
						<code>AusgabeVar := ControlGetText()</code><br /><br />

						Oder weitere Details einfügen:<br />
						<code>AusgabeVar := ControlGetText(Steuerelement, Fenstertitel)</code><br /><br />

						Was ist zu tun, wenn du nur Titelausnahme angeben willst? Einfach!<br />
						<code>AusgabeVar := ControlGetText(Steuerelement,,, Titelausnahme)</code><br /><br />
						<p class="Note">
							Bitte beachte, dass die Parameter nicht IGNORIERT, sondern nur leer gelassen werden können.<br />
							Wenn du "Fenstertitel, Fenstertext" ignorieren würdest, würde es wie folgt aussehen und zu Problemen führen:<br />
							<code>AusgabeVar := ControlGetText(Steuerelement, Titelausnahme)</code><br />
							Dies wäre gültig.<br />
							<code>AusgabeVar := ControlGetText(Steuerelement,,, Titelausnahme)</code>
						</p>
					</div>
					<h3 id="s82">b. Herausfinden deiner AHK-Version</h3>
					<div>
						Führe den folgenden Code aus, um deine aktuelle AHK-Version anzeigen zu lassen:
<pre>
MsgBox A_AHKVersion
</pre>

						Oder suche im Startmenü oder Installationsverzeichnis nach "AutoHotkey Help File" oder "AutoHotkey.chm".
					</div>

					<h3 id="s83">c. Trial-and-Error-Prinzip</h3>
					<p>
						Trial-and-Error (Versuch und Irrtum) ist eine sehr verbreitete und effektive Möglichkeit des Lernens. Statt bei jeder Kleinigkeit nachzufragen, kann es manchmal hilfreich sein, wenn man etwas Zeit für sich alleine verbringt (manchmal Stunden oder Tage) und versucht, etwas selbst auf die Reihe zu bekommen.
					</p>
					<p>
						Wenn du etwas ausprobierst und eine Fehlermeldung erhältst, solltest du diesen Fehler analysieren. Versuche dann, deinen Code zu korrigieren. Führe ihn nochmals aus. Wenn du weiterhin einen Fehler erhältst, sollte er auch korrigiert werden. Setze dieses Verfahren fort, bis dein Code funktioniert. Auf diese Weise lernst du viel, weil du die Dokumentation liest, Fehler analysierst und kennenlernst, was funktioniert und was nicht. <span class="InlineCode">Versuchen, scheitern, versuchen, scheitern, versuchen, versuchen, versuchen, scheitern, scheitern, <b>erfolgreich sein!</b></span>
					</p>
					<p>
						So haben viele "Profis" gelernt. Aber habe keine Angst zu fragen, wir beißen nicht. Das Lernen ist ein langwieriger Prozess; Die "Profis" haben AutoHotkey auch nicht in einem Tag gemeistert.
					</p>
					<p class="Note">"Wenn es beim ersten Mal nicht klappt, versuchen, versuchen Sie es erneut." - William E. Hickson</p>
					<h3 id="s84">d. Einrückung</h3>
					<div>
						Diese Sache (Einrücken) ist sehr wichtig! Dein Code läuft auch ohne Einrücken einwandfrei, aber es hilft dir und anderen, dein Code zu lesen. Ein kleines Skript (25 Zeilen oder weniger) ohne eingerücktem Code kann vermutlich ohne Probleme gelesen werden, aber je größer es wird, desto unübersichtlicher wird es. Am besten lernst du so schnell wie möglich, wie du dein Code einrücken kannst.<br />
						Auf welche Weise du deinen Code einrückst, spielt keine Rolle, aber achte darauf, dass es gleichmäßig aussieht.<br />
						"<b>Was ist Einrückung?</b>", fragst du dich? Man entflechtet den Code einfach mit Leerräumen, um sehen zu können, was zu was gehört. Normalerweise werden 3 oder 4 Leerzeichen oder ein Tabulatorzeichen pro "Stufe" verwendet.<br /><br />
						Ohne Einrückung:

<pre>
if (Auto="alt")
{
msgbox "Das Auto ist wirklich alt."
if (Räder="platt")
{
msgbox "Das Auto ist nicht zum Fahren geeignet."
Return
}
else
{
msgbox "Sei vorsichtig! Dieses alte Auto ist zu gefährlich, um es zu fahren."
}
}
else
{
msgbox "Meine Güte, wie dein neues Fahrzeug glänzt."
}
</pre>

						Eingerückt:

<pre>
if (Auto="alt")
{
   msgbox "Das Auto ist wirklich alt."
   if (Räder="platt")
   {
      msgbox "Das Auto ist nicht zum Fahren geeignet."
      Return
   }
   else
   {
      msgbox "Sei vorsichtig! Dieses alte Auto ist zu gefährlich, um es zu fahren."
   }
}
else
{
   msgbox "Meine Güte, wie dein neues Fahrzeug glänzt."
}
</pre>
						Wiki zeigt dir verschiedene Stile und Beispiele. Entscheide selbst, was oder wie du einrücken willst bzw. wie dein Code am einfachsten gelesen werden kann.<br />
						<a href="https://de.wikipedia.org/wiki/Einr%C3%BCckungsstil">https://de.wikipedia.org/wiki/Einr%C3%BCckungsstil</a>
					</div>

					<h3 id="s85">e. Um Hilfe bitten</h3>
					Zuallererst solltest du selbst versuchen, Nachforschungen zu betreiben oder den Code zu schreiben. Wenn du mit den Ergebnissen nicht zufrieden bist, kannst du die Community fragen, aber beachte dabei folgende Punkte:
					<ul>
						<li>Habe keine Hemmungen um Hilfe zu bitten, selbst die klügsten Menschen tun das.</li>
						<li>Zeige uns deine Versuche, auch wenn du der Ansicht bist, dass sie lächerlich sind.</li>
						<li>Schicke uns all deine Versuche.</li>
						<li>Tue so, als wäre <i>jeder außer du</i> dumm wie Brot, der von nichts weiß. Gib uns so viele Informationen wie möglich, damit wir wissen, was du vorhast. Hilf uns, dir zu helfen.</li>
						<li>Sei geduldig.</li>
						<li>Sei höflich.</li>
						<li>Sei offen.</li>
						<li>Sei nett.</li>
						<li>Habe Spaß dabei.</li>
					</ul>

					Erwarte nicht, dass du sofort eine Antwort bekommst - warte wenigstens 1 Tag (24 Stunden), bevor du nachhakst. Wir helfen gerne, aber bedenke, dass wir unsere Hilfe kostenlos anbieten und unsere Freizeit dafür opfern. Wir könnten gerade arbeiten, schlafen, spielen, mit der Familie zusammen sein, oder einfach zu beschäftigt sein, um zu helfen.<br />
					Während du auf Hilfe wartest, könntest du selbst versuchen, das Problem zu lösen. Es ist ein tolles Gefühl, etwas ohne Hilfe geschafft zu haben.

					<h3 id="s86">f. Andere Links</h3>
					<p>
						<a href="FAQ.htm">Häufig gestellte Fragen (FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</div></body>
</html>
