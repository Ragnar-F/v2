<!DOCTYPE HTML>
<html lang="de">
<head>
<title>VarSetCapacity - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die VarSetCapacity-Funktion vergrößert die Aufnahmekapazität einer Variable oder gibt deren Speicher frei. Normalerweise ist das nur bei ungewöhnlichen Fällen wie DllCall notwendig." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>VarSetCapacity</h1>

<p>Vergrößert die Aufnahmekapazität einer Variable oder gibt deren Speicher frei. Normalerweise ist das nur bei ungewöhnlichen Fällen wie <a href="DllCall.htm">DllCall</a> notwendig.</p>
<p class="warning"><strong>Veraltet:</strong> Diese Funktion wird möglicherweise in einer zukünftigen Version geändert oder entfernt. Weitere Informationen finden Sie unter <a href="#Remarks">Bemerkungen</a>.</p>
<pre class="Syntax">Kapazitätserstattung := <span class="func">VarSetCapacity</span>(ZielVar <span class="optional">, Kapazitätsbedarf, Füllbyte</span>)</pre>

<h2>Parameter</h2>
<dl>

  <dt>ZielVar</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variables">Variable</a></p>
    <p>Eine Variablenreferenz. Zum Beispiel: <code>VarSetCapacity(MeineVar, 1000)</code>. Das kann auch eine dynamische Variable wie <code>Array%i%</code> oder ein <a href="../Functions.htm#ByRef">ByRef-Parameter einer Funktion</a> sein.</p>
  </dd>

  <dt>Kapazitätsbedarf</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Fehlt dieser Parameter, wird die aktuelle Kapazität der Variable zurückgegeben, zudem bleibt deren Inhalt unverändert. Ansonsten geht alles verloren, was sich in der Variable befindet (die Variable wird leer gemacht).</p>
    <p>Geben Sie für <em>Kapazitätsbedarf</em> die Anzahl der Bytes an, die die Variable nach der Anpassung enthalten soll. Bei Unicode-Zeichenketten sollte das die doppelte Länge sein. <em>Kapazitätsbedarf</em> schließt den internen Null-Terminator nicht mit ein. Zum Beispiel könnte bei einem Wert von 1 die Variable, neben ihrem internen Terminator, bis zu einem Byte enthalten. Hinweis: Die Variable wird automatisch erweitert, wenn ihr später vom Skript ein größerer Wert zugewiesen wird.</p>
    <p>Da diese Funktion oft nur aufgerufen wird, um eine bestimmte Mindestkapazität für die Variable sicherzustellen, wird die Funktion aus Performance-Gründen die Variable erst verkleinern, wenn <em>Kapazitätsbedarf</em> eine 0 ist. Das heißt, dass die Kapazität der Variable nicht reduziert wird, wenn sie bereits größer ist als <em>Kapazitätsbedarf</em> (allerdings wird die Variable weiterhin leer gemacht, um Widersprüche zu vermeiden).</p>
    <p>Zum expliziten Verkleinern einer Variable ist es daher erforderlich, erst ihr Speicher mit <code>VarSetCapacity(Var, 0)</code> freizugeben und dann <code>VarSetCapacity(Var, NeueKapazität)</code> zu verwenden -- oder lassen Sie die Variable einfach bei Bedarf automatisch von Null aus erweitern.</p>
    <p>Aus Performance-Gründen wird eine Variable mit einer ursprünglichen Kapazität von weniger als 64 Zeichen (128 Bytes in Unicode-Builds) in der Regel nicht freigegeben, da ihr Speicher permanenter Natur ist. In diesem Fall wird die aktuelle Kapazität statt 0 zurückgegeben.</p>
    <p>Aus Performance-Gründen kann der Speicher einer Variable mit einer Kapazität von weniger als 4096 Bytes nicht durch Zuweisen einer leeren Zeichenkette (z. B. <code>Var := ""</code>) freigegeben werden. Allerdings kann <code>VarSetCapacity(Var, 0)</code> die Variable freigeben.</p>
    <p id="neg1">Fügen Sie -1 in <em>Kapazitätsbedarf</em> ein, um die intern-gespeicherte Zeichenkettenlänge der Variable mit die Länge des aktuellen Inhalts zu aktualisieren. Diese Methode ist in Situationen nützlich, wo die Variable indirekt geändert wurde, z. B. beim Übergeben ihrer <a href="../Variables.htm#amp">Adresse</a> via <a href="DllCall.htm">DllCall</a>. In diesem Modus gibt VarSetCapacity nicht die Kapazität, sondern die Länge in Bytes zurück.</p>
  </dd>

  <dt>Füllbyte</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Dieser Parameter wird normalerweise weggelassen, um zu verhindern, dass der Speicher der Zielvariable initialisiert wird (stattdessen wird die Variable einfach leer gemacht, wie oben beschrieben). Ansonsten kann eine Zahl zwischen 0 und 255 angegeben werden. Jedes Byte im Speicherbereich der Zielvariable (ihre aktuelle Kapazität, die größer als <em>Kapazitätsbedarf</em> sein kann) wird auf diese Zahl gesetzt. 0 ist dabei der am häufigsten benutzte Wert, der in Situationen nützlich ist, wo die Variablen rohe Binärdaten enthalten wird, wie z. B. eine <a href="DllCall.htm#struct">DllCall-Struktur</a>.</p>
  </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Anzahl an Bytes zurück, die die Variable nun enthalten kann und größer gleich <em>Kapazitätserstattung</em> sein wird.</p>

<h2>Misserfolg</h2>
<p>Es wird eine Ausnahme ausgelöst, sobald eine der folgenden Bedingungen zutrifft:</p>
<ul>
  <li><em>VarName</em> ist keine gültige Variablenreferenz. Es ist nicht möglich, eine <a href="../Objects.htm#Usage_Objects">Objekteigenschaft</a> oder <a href="../Variables.htm#BuiltIn">interne Variable</a> via Referenz zu übergeben, demzufolge ist es ungültig, so eine an diese Funktion zu übergeben.</li>
  <li>Das System hat nicht genügend Speicher, um die Änderung vorzunehmen (sehr selten).</li>
  <li><em>Kapazitätsbedarf</em> ist kleiner als -1 oder (bei 32-Bit) größer gleich 2**31 (2 GB).</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>Das <a href="../objects/Buffer.htm">Buffer</a>-Objekt ist übersichtlicher und flexibler im Umgang mit binären Daten, Strukturen, DllCall und ähnlichem. Zum Beispiel kann ein Buffer-Objekt einer Eigenschaft oder einem Array-Element zugewiesen werden, oder an eine Funktion übergeben oder von ihr zurückgegeben werden, ohne ihren Inhalt zu kopieren.</p>
<p>VarSetCapacity kontrolliert die Größe des Zeichenkettenpuffers einer Variable, der nicht zum Erstellen von Strukturen oder zum Speichern anderer binärer Daten verwendet werden sollte. Ein zukünftiges Update könnte diese Funktion entfernen oder ändern, um die neue Größe in Zeichen statt Bytes zu akzeptieren.</p>
<p>Diese Funktion kann genutzt werden, um das Zusammensetzen einer Zeichenkette via stufenweise Verkettung performanter zu machen. Diese Methode verhindert mehrere automatische Größenanpassungen, sofern Ihnen die finale Länge der Zeichenkette bekannt ist. In so einem Fall muss <em>Kapazitätsbedarf</em> nicht genau sein: Der Performance-Gewinn gilt auch dann noch, wenn die Kapazität zu niedrig ist, außerdem beginnt die Variable sich automatisch zu erweitern, wenn die Kapazität erschöpft ist. Bei einer zu hohen Kapazität ist ein Teil des Speichers verschwendet, aber nur vorübergehend, da der gesamte Speicher nach der Operation mithilfe von <code>VarSetCapacity(Var, 0)</code> oder <code>Var := ""</code> wieder freigegeben werden kann.</p>

<h2>Siehe auch</h2>
<p><a href="BufferAlloc.htm">BufferAlloc</a>, <a href="../objects/Buffer.htm">Buffer-Objekt</a>, <a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>

<h2>Beispiel</h2>
<pre class="NoIndent"><em>; Stellt sicher, dass MeineVar genügend Spielraum hat.</em>
VarSetCapacity(MeineVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    ...
    MeineVar .= ZuVerkettendeZeichenkette
    ...
}</pre>

<pre class="NoIndent"><em>; Berechnet den erforderlichen Zwischenspeicher für eine Zeichenkette.</em>
max_chars := 500
max_bytes := max_chars * 2

Loop 2
{
    <em>; Reserviert Speicher für DllCall.</em>
    VarSetCapacity(buf, max_bytes)

    if A_Index = 1
        <em>; Ändert die Variable indirekt via DllCall.</em>
        DllCall("wsprintf", <span class="red">"Ptr", &amp;buf</span>, "Str", "0x%08x", "UInt", 4919)
    else
        <em>; Mit "str" kann die Länge automatisch aktualisiert werden:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919)

    <em>; Verkettet eine Zeichenkette, um zu zeigen, warum die Länge aktualisiert werden muss:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; Aktualisiert die Länge der Variable.</em>
    VarSetCapacity(buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox
    (
    "Vor der Aktualisierung
      Zeichenkette: " wrong_str "
      Länge: " wrong_len "

    Nach der Aktualisierung
      Zeichenkette: " right_str "
      Länge: " right_len
    )
}
</pre>

</body>
</html>
