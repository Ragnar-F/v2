<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Input - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Input-Funktion wartet darauf, dass der Benutzer eine Zeichenkette eingibt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Input</h1>

<p>Wartet darauf, dass der Benutzer eine Zeichenkette eingibt.</p>

<pre class="Syntax">Text := <span class="func">Input</span>(<span class="optional">Optionen, Endtasten, Vergleichsliste</span>)</pre>

<h2>Parameter</h2>
<dl>

  <dt>Optionen</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine Zeichenkette mit null oder mehreren der folgenden Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</p>
      <p><strong>B</strong>: <kbd>Backspace</kbd> wird ignoriert. Normalerweise wird, wenn man während einer Eingabeerfassung <kbd>Backspace</kbd> drückt, das zuletzt gedrückte Zeichen am Ende der Zeichenkette entfernt. Hinweis: Ist der Eingabetext sichtbar (wie z. B. in einem Texteditor) und werden die Pfeiltasten oder andere Mittel zum Navigieren innerhalb des Textes verwendet, wird <kbd>Backspace</kbd> weiterhin das letzte Zeichen entfernen, anstelle des Zeichens nach der Einfügemarke.</p>
      <p><strong>C</strong>: Groß-/Kleinschreibung-sensitiv. Normalerweise ist <em>Vergleichsliste</em> nicht Groß-/Kleinschreibung-sensitiv.</p>
      <p><strong>I</strong>: Ignoriert Eingaben, die von <a href="Send.htm#SendEvent">SendEvent</a> erzeugt werden, bei einer <a href="SendLevel.htm">Sendestufe</a> von 0. Allerdings werden <a href="Send.htm#SendInput">SendInput</a> und <a href="Send.htm#SendPlay">SendPlay</a> immer ignoriert, egal ob diese Einstellung aktiv ist oder nicht. Nach dem Optionsbuchstaben kann eine Zahl erfolgen, um die minimale Sendestufe zu bestimmen. <code>I</code> und <code>I1</code> sind äquivalent. <code>I0</code> ist das gleiche wie, als würde die Option fehlen.</p>
      <p><strong>L</strong>: Längenbegrenzung (z. B. <code>L5</code>). Die maximal erlaubte Länge der Eingabe. Wenn der Text diese Länge erreicht, wird die Eingabeerfassung beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Max gesetzt, es sei denn, der Text stimmt mit einem der Elemente in <em>Vergleichsliste</em> überein, dann wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt. Wenn diese Option nicht verwendet wird, ist die Länge auf 16383 Zeichen begrenzt.</p>
      <p><strong>M</strong>: Tastenkombinationen wie <kbd>Strg</kbd>+<kbd>A</kbd> bis <kbd>Strg</kbd>+<kbd>Z</kbd> werden erkannt und in echte ASCII-Zeichen umgewandelt, falls möglich. Das folgende Beispiel zeigt, wie <kbd>Strg</kbd>+<kbd>C</kbd> erkannt werden kann:</p>
      <pre>StrgC := Chr(3) <em>; Speichert das Zeichen für STRG+C in die Variable StrgC.</em>
Text := Input("L1 M")
if (Text = StrgC)
    MsgBox "Sie haben STRG+C gedrückt."
ExitApp</pre>
      <p class="note"><strong>Hinweis</strong>: <kbd>Strg</kbd>+<kbd>A</kbd> bis <kbd>Strg</kbd>+<kbd>Z</kbd> sind die Zeichen von <a href="Chr.htm">Chr(1)</a> bis <a href="Chr.htm">Chr(26)</a>. Außerdem ist es möglich, dass die <strong>M</strong>-Option einige Tastenkürzel wie <kbd>Strg</kbd>+<kbd>←</kbd> dazu bringen kann, sich während einer Eingabeerfassung falsch zu verhalten.</p>
      <p><strong>T</strong>: Zeitlimit (z. B. <code>T3</code>). Die Wartezeit in Sekunden, bevor die Eingabeerfassung beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Timeout gesetzt wird. Wenn die Input-Funktion die Zeit überschritten hat, gibt sie alles zurück, was auch immer der Benutzer gerade eingegeben hat. Dieser Wert kann eine Floating-Point-Zahl wie z. B. <code>2.5</code> sein.</p>
      <p id="vis"><strong>V</strong>: Sichtbar. Normalerweise wird die Eingabe des Benutzers blockiert (unsichtbar für das Betriebssystem). Verwenden Sie diese Option, um die Tastatureingaben des Benutzers direkt an das aktive Fenster senden zu lassen.</p>
      <p id="asterisk"><strong>*</strong>: Platzhalter (überall finden). Normalerweise muss alles, was der Benutzer eingibt, exakt mit einem Element aus der <em>Vergleichsliste</em> übereinstimmen, damit der Input fortfahren kann. Verwenden Sie diese Option, um im gesamten Eingabetext eine Übereinstimmung häufiger finden zu können.</p>
      <p id="E"><strong>E</strong>: Behandelt Einzelzeichen-Endungstasten als Zeichencode anstatt als Tastencode. Diese Änderung ermöglicht konsistentere Ergebnisse, wenn das Tastaturlayout des aktiven Fensters sich vom Tastaturlayout des Skripts unterscheidet. Es verhindert auch Tastenkombinationen, die die angegebenen Endungszeichen bei der Eingabe eigentlich nicht erzeugen können; wenn <code>@</code> beispielsweise eine Endungstaste wäre, würde sie auf einem US-Layout via <kbd>Umschalt</kbd>+<kbd>2</kbd> ausgelöst werden, aber nicht via <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>2</kbd> (wenn die E-Option verwendet wird). Wenn zusätzlich noch die <strong>C</strong>-Option angegeben ist, ist das Endungszeichen Groß-/Kleinschreibung-sensitiv.</p>
      </dd>

  <dt>Endtasten</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine Liste mit keine oder mehr Tasten, die die Eingabeerfassung beenden können, sobald eine von diesen gedrückt wird (die <em>Endtaste</em> selbst wird im Rückgabewert weggelassen). Eine auf diese Weise beendete Eingabeerfassung setzt <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort EndKey, gefolgt von einem Doppelpunkt und den Namen der <em>Endtaste</em>. Beispiele: <code>EndKey:.</code>, <code>EndKey:Escape</code>.</p>
      <p>Die <em>Endtasten</em>-Liste verwendet ein Format, das Ähnlichkeit zum verwendeten Format der <a href="Send.htm">Send</a>-Funktion hat. Zum Beispiel würde <code>{Enter}.{Esc}</code> bewirken, dass <kbd>Enter</kbd>, <kbd>.</kbd> oder <kbd>Esc</kbd> die Eingabeerfassung beenden können. Damit die geschweiften Klammern selbst Endtasten sein können, gibt man <code>{{}</code> und/oder <code>{}}</code> an.</p>
      <p>Um <kbd>Strg</kbd>, <kbd>Alt</kbd> oder <kbd>Umschalt</kbd> als Endtasten zu verwenden, gibt man die linke und/oder rechte Version der Taste an, nicht die neutrale Version. Zum Beispiel müsste <code>{LControl}{RControl}</code> anstelle von <code>{Control}</code> angegeben werden.</p>
      <p>Zwar werden Tastenkombinationen wie <kbd>Alt</kbd>+<kbd>C</kbd> (!c) nicht unterstützt, allerdings können bestimmte Zeichen, die eine gedrückte <kbd>Umschalt</kbd>-Taste erfordern - also Satzzeichen wie z. B. <code>?!:@&amp;{}</code> - verwendet werden. Andere Zeichen in Verbindung mit der oben beschriebenen <strong>E</strong>-Option werden unterstützt. Wenn sowohl die <strong>E</strong>- als auch <strong>M</strong>-Option vorhanden sind, werden Tastenkombinationen von <kbd>Strg</kbd>+<kbd>A</kbd> bis <kbd>Strg</kbd>+<kbd>Z</kbd> unterstützt, indem man die entsprechenden ASCII-Steuerzeichen in <em>Endtasten</em> einfügt.</p>
      <p>Ein eindeutiger virtueller Tastencode wie <code>{vkFF}</code> könnte man auch angeben. Diese Angabe ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat und keine sichtbaren Zeichen beim Drücken erzeugt. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p>
    </dd>

  <dt>Vergleichsliste</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine kommagetrennte Liste mit Stichwörtern, die die Eingabeerfassung beenden können (in diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort Match gesetzt). Alles, was der Benutzer eingibt, muss exakt mit einem Element aus der Liste übereinstimmen, damit der Input fortfahren kann (sofern die <a href="#asterisk">*-Option</a> nicht vorhanden ist). <strong>Alle Leer- und Tabulatorzeichen an den angrenzenden Kommas sind von Bedeutung</strong> - das heißt, dass sie ein Teil der Übereinstimmungszeichenkette sind. Wenn <em>Vergleichsliste</em> beispielsweise <code>ABC , XYZ</code> wäre, kann eine Übereinstimmung nur erfolgen, wenn der Benutzer ein Leerzeichen nach ABC oder vor XYZ eingibt.</p>
      <p>Zwei aufeinanderfolgende Kommas ergeben ein direkt geschriebenes Komma. Zum Beispiel würde die folgende Zeile ein direkt geschriebenes Komma nach dem Wort Zeichenkette1 erzeugen: <code>Zeichenkette1,,,Zeichenkette2</code>. Im Vergleich dazu würde die folgende Liste nur ein einzelnes Element mit einem direkt geschriebenen Komma dazwischen enthalten: <code>einzelnes,,Element</code>.</p>
    <p>Da die Elemente in <em>Vergleichsliste</em> nicht als einzelne Parameter behandelt werden, kann die Liste komplett in einer Variable enthalten sein. Diese Methode ist sowieso notwendig, wenn die Liste eine Länge von 16383 Zeichen überschreitet (die maximale Länge einer Skriptzeile). Zum Beispiel könnte <em>Vergleichsliste</em> der <a href="../Variables.htm#Expressions">Ausdruck</a> <code>List1 "," List2 "," List3</code> sein, von der jede Unterliste eine lange Liste mit Elementen enthält.</p>
    </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Diese Funktion gibt den vom Benutzer eingegebenen Text zurück (standardmäßig werden künstlich erzeugte Eingaben auch erfasst).</p>
<p>Der Text besteht aus Zeichen, die von Tastatureingaben erzeugt werden, abhängig von der Tastaturbelegung/Sprache des aktiven Fensters. Tastatureingaben, die keine Zeichen erzeugen (wie z. B. <kbd>Bild↑</kbd> und <kbd>Pos1</kbd>), werden dementsprechend nicht zurückgegeben (allerdings können sie via <em>Endtasten</em>-Parameter erkannt werden).</p>
<p class="warning"><strong>Hinweis:</strong> Die <kbd>Esc</kbd>-Taste wird in das ASCII-ESC-Zeichen <code>Chr(27)</code> umgewandelt. Um das zu verhindern, fügt man <code>{Esc}</code> in <em>Endtasten</em> ein, damit die Eingabeerfassung mit <kbd>Esc</kbd> beendet werden kann.</p>
<p>Leerraumzeichen wie z. B. <kbd>Tab</kbd> (`t) werden als direkt geschriebener Text zurückgegeben. <kbd>Enter</kbd> als LF-Zeichen (`n).</p>

<h2>ErrorLevel</h2>
<table class="info">
  <tr>
    <td style="width:15%">NewInput</td>
    <td>Die Eingabeerfassung wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> beendet, der die Input-Funktion aufgerufen hat.</td>
  </tr>
  <tr>
    <td>End</td>
    <td>Die Eingabeerfassung wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> beendet, der die <a href="#InputEnd">InputEnd</a>-Funktion aufgerufen hat.</td>
  </tr>
  <tr>
    <td>Max</td>
    <td>Die Eingabeerfassung hat die maximal erlaubte Länge erreicht und stimmt mit keinem der Elemente in <em>Vergleichsliste</em> überein.</td>
  </tr>
  <tr>
    <td>Timeout</td>
    <td>Die Eingabeerfassung hat die Zeit überschritten.</td>
  </tr>
  <tr>
    <td>Match</td>
    <td>Die Eingabeerfassung stimmt mit einem der Elemente in <em>Vergleichsliste</em> überein.</td>
  </tr>
  <tr>
    <td>EndKey:<em>Name</em></td>
    <td>
      <p>Eine der <em>Endtasten</em> wurde gedrückt, um die Eingabeerfassung zu beenden. In diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort EndKey gesetzt, gefolgt von einem Doppelpunkt und den Namen der Endtaste ohne geschweifte Klammern, z. B. <code>EndKey:Enter</code>, <code>EndKey:Escape</code>, etc.</p>
      <p>Beachten Sie, dass <em>Name</em> der "normalisierte" Name der Taste ist, egal wie sie in <em>Endtasten</em> geschrieben wurde. Zum Beispiel würde sowohl <code>{Esc}</code> als auch <code>{vk1B}</code> <code>EndKey:Escape</code> erzeugen. Mit <a href="GetKeyName.htm">GetKeyName</a> kann der normalisierte Name abgerufen werden.</p>
      <p>Wenn die <a href="#E">E-Option</a> verwendet wurde, wird <em>Name</em> das aktuell eingegebene Zeichen sein (falls zutreffend). Ansonsten wird der Name auf Basis des aktiven Tastaturlayouts vom Skript bestimmt. Einzelzeichentastennamen ohne E-Option sind in der Regel kleingeschrieben, weil der UMSCHALT-Status ignoriert wird.</p>
    </td>
  </tr>
</table>

<h2 id="Remarks">Bemerkungen</h2>
<p>Verwendet man diese Funktion, während eine Eingabeerfassung in einem anderen <a href="../misc/Threads.htm">Thread</a> bereits im Gange ist, wird diese Eingabeerfassung beendet und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf das Wort NewInput gesetzt. Danach wird die neue Eingabeerfassung eingeleitet (sofern Parameter angegeben sind).</p>
<p>Während eine Eingabeerfassung im Gange ist, können neue <a href="../misc/Threads.htm">Threads</a> wie <a href="../objects/Menu.htm">benutzerdefinierte Menüelemente</a> oder <a href="SetTimer.htm">zeitgesteuerte Subroutinen</a> erstellt werden. Tastatur-<a href="../Hotkeys.htm">Hotkeys</a> sind weiterhin aktiv. Allerdings können Hotkeys nicht von Tasten ausgelöst werden, die von der Eingabeerfassung unterdrückt werden.</p>
<p>Wenn die Eingabeerfassung nicht <a href="#vis">sichtbar</a> ist, werden alle Tasten unterdrückt, außer <a href="../KeyList.htm#modifier">normale Modifikatortasten</a>, CapsLock, NumLock und ScrollLock. Sogar <em>Endtasten</em> und Tastatureingaben, die <em>AusgabeVar</em> nicht verändern, werden unterdrückt. Zum Beispiel hat <kbd>Pos1</kbd> keinen Effekt, während <kbd>LWin</kbd>+<kbd>D</kbd> das Startmenü öffnet (weil <kbd>D</kbd> unterdrückt wird und <kbd>LWin</kbd> nicht)</p>
<p>Wenn ein Skript diese Funktion zum ersten Mal verwendet, wird der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert (falls noch nicht geschehen). Jedes Mal, wenn das Skript eine <a href="Suspend.htm">Suspend</a>- oder <a href="Hotkey.htm">Hotkey</a>-Funktion erreicht, wird überprüft, ob der Tastatur-Hook noch von Hotkeys oder Hotstrings beansprucht wird. Ist dies nicht der Fall, wird der Hook wieder deinstalliert.</p>
<p>Wenn Sie mehrere Sprachen oder Tastaturlayouts verwenden, greift die Eingabeerfassung auf das Tastaturlayout des aktiven Fensters statt auf die des Skripts zurück (egal ob die Eingabeerfassung <a href="#vis">sichtbar</a> ist oder nicht).</p>
<p>Trotz ihrer geringeren Flexibilität sind <a href="../Hotstrings.htm">Hotstrings</a> in der Regel einfach zu bedienen als die Input-Funktion.</p>
<p><a href="InputHook.htm">InputHook</a> ist flexibler als die Input-Funktion.</p>

<h2 id="InputEnd">InputEnd</h2>
<p>Beendet jede Eingabeerfassung, die in einem anderen <a href="../misc/Threads.htm">Thread</a> im Gange ist.</p>
<pre class="Syntax"><span class="func">InputEnd</span> </pre>
<p>Gibt True zurück, wenn eine Eingabeerfassung im Gange war, ansonsten False.</p>
<p>Diese Funktion hat nur einen Effekt auf Input, nicht <a href="InputHook.htm">InputHook</a>.</p>

<h2>Siehe auch</h2>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="InputBox.htm">InputBox</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="../misc/Threads.htm">Threads</a></p>
<h2>Beispiele</h2>
<div class="ex" id="ExAnyKey">
<p><a href="#ExAnyKey">#1</a>: Wartet darauf, dass der Benutzer eine Taste drückt. Tasten, die keine sichtbaren Zeichen erzeugen (z. B. Modifikatortasten, Funktionstasten, Pfeiltasten), sind als Endtasten aufgelistet, so dass auch diese erkannt werden.</p>
<pre>Einzelzeichen := Input("L1", "{LControl}{RControl}{LAlt}{RAlt}{LShift}{RShift}{LWin}{RWin}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{CapsLock}{NumLock}{PrintScreen}{Pause}")
if InStr(ErrorLevel, "EndKey:")
    Einzeltaste := SubStr(ErrorLevel, 8)
else
    Einzeltaste := Einzelzeichen
MsgBox Einzeltaste</pre>
</div>

<div class="ex" id="ExHotkey">
<p><a href="#ExHotkey">#2</a>: Dies ist ein funktionierendes Hotkey-Beispiel. Da der Hotkey den Tilde-Präfix (~) hat, wird seine Tastatureingabe selbst an das aktive Fenster übergeben. Schreibt man daher <code>[btw</code> (oder einen der anderen Begriffe) in einem Texteditor, wird das Skript automatisch eine Aktion Ihrer Wahl durchführen (z. B. den Eingabetext ersetzen):</p>
<pre>~[::
Benutzereingabe := Input("V T5 L4 C", "{enter}.{esc}{tab}", "btw,otoh,fl,ahk,ca")
if (ErrorLevel = "Max")
{
    MsgBox "Ihre Eingabe " Benutzereingabe " hat die maximale Textlänge erreicht."
    return
}
if (ErrorLevel = "Timeout")
{
    MsgBox "Sie haben " Benutzereingabe " innerhalb der verfügbaren Zeit eingegeben."
    return
}
if (ErrorLevel = "NewInput")
    return
If InStr(ErrorLevel, "EndKey:")
{
    MsgBox "Sie haben " Benutzereingabe " eingegeben und Eingabe mit " ErrorLevel " beendet."
    return
}
<em>; Ansonsten wurde eine Übereinstimmung gefunden.</em>
if (Benutzereingabe = "btw")
    Send "{backspace 4}by the way"
else if (Benutzereingabe = "otoh")
    Send "{backspace 5}on the other hand"
else if (Benutzereingabe = "fl")
    Send "{backspace 3}Florida"
else if (Benutzereingabe = "ca")
    Send "{backspace 3}California"
else if (Benutzereingabe = "ahk")
    Run "https://www.autohotkey.com"
return
</pre>
<p>Eine alternative Version dieses Beispiels finden Sie unter <a href="Switch.htm#ExInput">Switch</a>.</p>
</div>

</body>
</html>
