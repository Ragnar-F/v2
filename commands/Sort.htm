<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Sort - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Sort-Funktion ordnet den Inhalt einer Variable in alphabetischer, numerischer oder zufälliger Reihenfolge (entfernt optional Duplikate)." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Sort</h1>

<p>Ordnet den Inhalt einer Variable in alphabetischer, numerischer oder zufälliger Reihenfolge (entfernt optional Duplikate).</p>

<pre class="Syntax">SortierteZeichenkette := <span class="func">Sort</span>(Zeichenkette <span class="optional">, Optionen, Callback</span>)</pre>
<h2>Parameter</h2>
<dl>

  <dt>Zeichenkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die sortiert werden soll.</p>
  </dd>

  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Siehe untere Liste.</p>
  </dd>
  
  <dt>Callback</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#objects">Objekt</a></p>
    <p>Ein optionaler Funktionsname oder <a href="../objects/Functor.htm">Funktionsobjekt</a> für die <a href="#callback">benutzerdefinierte Sortierung</a>.</p>
  </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Diese Funktion gibt die sortierte Version der angegebenen Zeichenkette zurück.</p>

<h2>Optionen</h2>
<p><u>Eine Zeichenkette mit null oder mehreren der folgenden Buchstaben (in beliebiger Reihenfolge, optional mit Leerzeichen getrennt):</u></p>
<p><strong>C</strong>: Die Sortierung erfolgt Groß-/Kleinschreibung-sensitiv (wird ignoriert, wenn die <strong>N</strong>-Option vorhanden ist). Lässt man sowohl <strong>C</strong> als auch <strong>CL</strong> weg, werden die Großbuchstaben von A bis Z und die entsprechenden Kleinbuchstaben beim Sortieren gleichwertig behandelt.</p>
<p><strong>CL</strong>: Die Sortierung erfolgt nicht-Groß-/Kleinschreibung-sensitiv gemäß den aktuellen Sprach- und Regionseinstellungen des Benutzers. In den meisten englischen und westeuropäischen Regionen beispielsweise werden die Großbuchstaben A bis Z, einschließlich ANSI-Zeichen wie Ä und Ü, und die entsprechenden Kleinbuchstaben gleichwertig behandelt. Diese Methode verwendet zudem eine "Wortsortierung" - Bindestriche und Apostrophe werden so behandelt, dass Wörter wie "coop" und "co-op" zusammen bleiben. Je nach Inhalt der zu sortierenden Elemente ist die Leistung 1- bis 8-mal schlechter als die Standardmethode der Nichtsensitivität.</p>
<p><strong>Dx</strong>: Ersetzen Sie <strong>x</strong> mit einem Trennzeichen, das bestimmen soll, wo jedes Element beginnt und endet. Wenn diese Option nicht vorhanden ist, wird <strong>x</strong> standardmäßig ein Zeilenumbruchszeichen (`n) sein, um den Inhalt der Zeichenkette korrekt zu sortieren, sofern die Zeilen mit LF (`n) oder CR+LF (`r`n) enden.</p>
<p><strong>N</strong>: Numerische Sortierung: Jedes Element wird als Zahl statt als Zeichenkette angesehen (wenn diese Option nicht vorhanden ist, wird zum Beispiel die Zeichenkette 233 aufgrund alphabetischer Reihenfolge kleiner als Zeichenkette 40 angesehen). Sowohl dezimale als auch hexadezimale Zeichenketten (z. B. 0xF1) gelten als numerisch. Zeichenketten, die nicht mit einer Zahl beginnen, werden beim Sortieren als 0 angesehen. Zahlen werden als 64-Bit-Floating-Point-Werte behandelt, um den eventuell vorhandenen Nachkommabereich jeder Zahl einzubeziehen.</p>
<p><strong>Pn</strong>: Sortiert Elemente, basierend auf die Zeichenposition <strong>n</strong> (<strong>n</strong> muss ein Integer sein). Wenn diese Option nicht vorhanden ist, wird <strong>n</strong> standardmäßig 1 sein (die Position des ersten Zeichens). Die Sortierung vergleicht jede Zeichenkette mit anderen Zeichenketten, beginnend beim <strong>n</strong>-ten Zeichen. Wenn <strong>n</strong> größer als die Länge der Zeichenkette ist, wird sie beim Sortieren als leer angesehen. In Verbindung mit der <strong>N</strong>-Option (numerische Sortierung) wird die Zeichenposition der Zeichenkette verwendet, das nicht unbedingt das gleiche ist wie die Ziffernposition der Zahl.</p>
<p><strong>R</strong>: Sortiert in umgekehrter Reihenfolge (alphabetisch oder numerisch, abhängig von den anderen Optionen).</p>
<p><strong>Random</strong>: Sortiert in zufälliger Reihenfolge. Diese Option bewirkt, dass alle anderen Optionen außer <strong>D</strong>, <strong>Z</strong> und <strong>U</strong> ignoriert werden (allerdings haben <strong>N</strong>, <strong>C</strong> und <strong>CL</strong> immer noch Einfluss darauf, wie Duplikate erkannt werden). Beispiele:</p>
<pre>MeineVar := Sort(MeineVar, "Random")
MeineVar := Sort(MeineVar, "Random Z D|")</pre>
<p id="unique"><strong>U</strong>: Entfernt doppelte Elemente von der Liste, sodass jedes Element einzigartig ist. Ist die <strong>C</strong>-Option aktiv, müssen auch die Groß- und Kleinschreibungen der Elemente gleich sein, damit diese als identisch angesehen werden. Ist die <strong>N</strong>-Option aktiv, wird ein Element wie z. B. 2 als Duplikat von 2.0 angesehen. Wenn entweder die <strong>Pn</strong>- oder <strong>\</strong>-Option aktiv ist, muss das ganze Element ein Duplikat sein, nicht nur die Teilzeichenkette, die für die Sortierung verwendet wird. Wenn die <strong>Random</strong>-Option oder <a href="#callback">benutzerdefinierte Sortierung</a> aktiv ist, werden Duplikate nur entfernt, wenn sie nach dem Sortieren direkt aneinander angrenzen. Zum Beispiel könnte das Ergebnis beim zufälligen Sortieren von "A|B|A" entweder ein oder zwei A's enthalten.</p>
<p><strong>Z</strong>: Um diese Option zu verstehen, wird eine Variable in Erwägung gezogen, die die Zeichenkette ROT`nGRÜN`nBLAU`n enthält. Wenn die <strong>Z</strong>-Option nicht vorhanden ist, wird das letzte LF-Zeichen (`n) als Teil des letzten Elements angesehen (somit sind es nur 3 Elemente). Ist <strong>Z</strong> vorhanden, dient das letzte LF-Zeichen (falls vorhanden) dazu, ein leeres Element am Ende der Liste abzugrenzen (somit sind es 4 Elemente).</p>
<p><strong>\</strong>: Sortiert Elemente, basierend auf die Teilzeichenkette, die jeweils nach dem letzten umgekehrten Schrägstrich erfolgt. Wenn das Element keinen umgekehrten Schrägstrich hat, wird das ganze Element als Teilzeichenkette angesehen. Diese Option ist nützlich, um Dateinamen ohne Rücksicht auf ihre Pfade zu sortieren. Im folgenden Beispiel steht AAA.txt über BBB.txt, weil ihre Verzeichnisse beim Sortieren ignoriert wurden:</p>
<pre>C:\BBB\AAA.txt
C:\AAA\BBB.txt</pre>
<p class="note"><strong>Hinweis</strong>: Die Optionen <strong>N</strong> und <strong>P</strong> werden ignoriert, wenn die \-Option vorhanden ist.</p>

<h2 id="callback">Benutzerdefinierte Sortierung</h2>
<p>Geben Sie zum benutzerdefinierten Sortieren im <em>Callback</em>-Parameter eine <a href="../Functions.htm">Funktion</a> oder ein <a href="../objects/Functor.htm">Funktionsobjekt</a> an, um jeweils zwei Elemente in der Liste zu vergleichen. Die Funktion muss zwei oder drei Parameter akzeptieren:</p>
<pre class="Syntax">MeineFunktion(Erster, Zweiter <span class="optional">, Offset</span>)</pre>
<p>Geht die Funktion davon aus, dass der erste Parameter größer als der zweite ist, sollte sie einen positiven Integer zurückgeben. Geht die Funktion davon aus, dass die zwei Parameter gleich groß sind, sollte sie eine 0, "" oder nichts zurückgeben. Ansonsten sollte sie einen negativen Integer zurückgeben. Falls ein Dezimalpunkt im Rückgabewert vorhanden ist, wird dieser Teil ignoriert (z. B. ist 0.8 das gleiche wie 0).</p>
<p>Ist der dritte Parameter vorhanden, erhält er den Offset (in Zeichen) vom ersten zum zweiten Element aus der originalen/unsortierten Liste (siehe Beispiele).</p>
<p>Die Funktion verwendet die gleichen globalen Einstellungen (z. B. <a href="StringCaseSense.htm">StringCaseSense</a>) wie die Sort-Funktion, mit der diese aufgerufen wurde.</p>
<p class="note"><strong>Hinweis</strong>: Alle Optionen außer <strong>D</strong>, <strong>Z</strong> und <strong>U</strong> werden ignoriert, wenn ein <em>Callback</em> vorhanden ist (allerdings haben <strong>N</strong>, <strong>C</strong> und <strong>CL</strong> immer noch Einfluss darauf, wie <a href="#unique">Duplikate</a> erkannt werden).</p>

<h2>Bemerkungen</h2>
<p>Mit dieser Funktion wird üblicherweise eine Variable sortiert, die eine Liste mit Zeilen enthält, bei der jede Zeile mit einem Zeilenumbruchszeichen (`n) endet. Eine Möglichkeit, mehrere Zeilen in eine Variable zu bekommen, ist das Laden einer ganzen Datei via <a href="FileRead.htm">FileRead</a>.</p>
<p>Wenn eine große Variable sortiert wurde und ihr Inhalt später nicht mehr benötigt wird, kann ihr Speicher freigegeben werden, indem man sie leer macht (z. B. <code>MeineVar := ""</code>).</p>

<h2>Siehe auch</h2>
<p><a href="FileRead.htm">FileRead</a>, <a href="LoopRead.htm">Datei-lesende Schleife</a>, <a href="LoopParse.htm">Parsende Schleife</a>, <a href="StrSplit.htm">StrSplit</a>, <a href="CallbackCreate.htm">CallbackCreate</a>, <a href="../misc/A_Clipboard.htm">A_Clipboard</a></p>

<h2>Beispiele</h2>
<div class="ex" id="ExNumbers">
<p><a href="#ExNumbers">#1</a></p>
<pre>MeineVar := "5,3,7,9,1,13,999,-4"
MeineVar := <strong>Sort</strong>(MeineVar, "N D,")  <em>; Numerisch sortieren und Komma als Trennzeichen verwenden.</em>
MsgBox MeineVar   <em>; Das Ergebnis ist -4,1,3,5,7,9,13,999</em></pre>
</div>

<div class="ex" id="ExFileContents">
<p><a href="#ExFileContents">#2</a>: Das folgende Beispiel sortiert den Inhalt einer Datei:</p>
<pre>Inhalt := <a href="FileRead.htm">FileRead</a>("C:\Adressenliste.txt")
FileDelete "C:\Adressenliste (alphabetisch).txt"
FileAppend <strong>Sort</strong>(Inhalt), "C:\Adressenliste (alphabetisch).txt"
Inhalt := ""  <em>; Gibt den Speicher frei.</em></pre>
</div>

<div class="ex" id="ExFilenames">
<p><a href="#ExFilenames">#3</a>: Das folgende Beispiel macht <kbd>Win</kbd>+<kbd>C</kbd> zu einem Hotkey, um Dateien von einem Explorer-Fenster zu kopieren und die sortierten Dateinamen in die Zwischenablage einzufügen:</p>
<pre>#c::
{
    A_Clipboard := "" <em>; Muss leer sein, damit die Erkennung funktioniert.</em>
    Send "^c"
    if !ClipWait(2)
        return
    MsgBox "Bereit zum Einfügen:`n" <strong>Sort</strong>(A_Clipboard)
}</pre>
</div>

<div class="ex" id="ExCustom">
<p><a href="#ExCustom">#4</a>: Die folgenden Beispiele demonstrieren die benutzerdefinierte Sortierung mit einer Callback-Funktion.</p>
<pre>MeineVar := "def`nabc`nmno`nFGH`nco-op`ncoop`ncop`ncon`n"
MsgBox <strong>Sort</strong>(MeineVar,, "StringSort")
StringSort(a1, a2, *)
{
    return a1 &gt; a2 ? 1 : a1 &lt; a2 ? -1 : 0  <em>; Sortiert alphabetisch, basierend auf die Einstellung von <a href="StringCaseSense.htm">StringCaseSense</a>.</em>
}

MeineVar := "5,3,7,9,1,13,999,-4"
MsgBox <strong>Sort</strong>(MeineVar, "D,", "IntegerSort")
IntegerSort(a1, a2, *)
{
    return a1 - a2  <em>; Sortiert in aufsteigender numerischer Reihenfolge. Diese Methode funktioniert nur, wenn die Differenz einen vorzeichenfähigen 64-Bit-Integer nicht überschreiten kann.</em>
}

MeineVar := "1,2,3,4"
MsgBox <strong>Sort</strong>(MeineVar, "D,", "UmgekehrteRichtung")  <em>; Kehrt die Liste um, so dass sie 4,3,2,1 enthält.</em>
UmgekehrteRichtung(a1, a2, offset)
{
    return offset  <em>; Offset ist positiv, wenn in der originalen Liste a2 nach a1 kommt; ansonsten negativ.</em>
}

MeineVar := "a bbb cc"
<em>; Sortiert in aufsteigender Längenreihenfolge; verwendet eine <a href="../Variables.htm#fat-arrow">Fat-Arrow-Funktion</a>:</em>
MsgBox <strong>Sort</strong>(MeineVar, "D ", (a,b,*) =&gt; StrLen(a) - StrLen(b))
</pre>
</div>

</body>
</html>
