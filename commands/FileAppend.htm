<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileAppend - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die FileAppend-Funktion schreibt Text oder binäre Daten an das Ende einer Datei (und erstellt sie erst, falls notwendig)." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileAppend</h1>

<p>Schreibt Text oder binäre Daten an das Ende einer Datei (und erstellt sie erst, falls notwendig).</p>

<pre class="Syntax"><span class="func">FileAppend</span> Text <span class="optional">, Dateiname, Optionen</span></pre>
<h2>Parameter</h2>
<dl>

  <dt>Text</dt>
  <dd><p>Der Text, der an das Ende der Datei angefügt werden soll. Dieser Text kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen beginnen zu können. Außerdem kann mithilfe eines <a href="../Scripts.htm#continuation">Fortsetzungsbereichs</a> eine lange Zeile in mehreren kurzen Zeilen aufgeteilt werden.</p>
    <p><em>Text</em> kann binäre Daten enthalten, wenn die <code>RAW</code>-Option benutzt wird, aber in diesem Fall wird FileAppend immer eine gerade Anzahl von Bytes anfügen (<a href="StrLen.htm">StrLen</a> mal zwei). Dies kann zum <a href="ClipboardAll.htm#ex2">Speichern von Daten in die Zwischenablage</a> verwendet werden. Mit <a href="../objects/File.htm#RawWrite">File.RawWrite</a> kann eine ungerade oder gerade Anzahl von Bytes geschrieben werden.</p>
    <p>Wenn der <em>Text</em>-Parameter leer ist, wird <em>Dateiname</em> als leere Datei erstellt (wenn die Datei bereits existiert, wird nur ihr Änderungsdatum aktualisiert).</p>
  </dd>

  <dt>Dateiname</dt>
  <dd><p>Der Name einer Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</p>
    <p id="stdout"><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>Dateiname</em> bewirkt, dass der <em>Text</em> zur Standardausgabe (stdout) gesendet wird. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Zum Beispiel wäre die folgende Zeile als Eingabeaufforderung gültig:</p>
      <pre class="no-syntax-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" &gt;"Fehlerprotokoll.txt"</pre>
    <p>Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von wo aus die Zeile gestartet wurde. Um das zu umgehen, leitet man die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weiter. Zum Beispiel:</p>
      <pre class="no-syntax-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk" |more</pre>
      <pre class="no-syntax-highlight">For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "Mein Skript.ahk""') do @Echo %L</pre>
    <p>Zwei Sternchen (**) in <em>Dateiname</em> bewirken, dass <em>Text</em> zum stderr-Stream gesendet wird.</p>
    </dd>

  <dt>Optionen</dt>
  <dd><p>Null oder mehr der folgenden Zeichenketten. Die Optionen müssen jeweils mit einem Leer- oder Tabulatorzeichen voneinander getrennt werden. Zum Beispiel: <code>"`n UTF-8"</code></p>
    <p><strong>Codierung</strong>: Geben Sie einen beliebigen Codierungsnamen an, der von <a href="FileEncoding.htm">FileEncoding</a> unterstützt wird (außer die leere Zeichenkette), um diese Codierung zu benutzen, falls die Datei keine UTF-8- oder UTF-16-Byte-Order-Markierung hat. Fehlt diese Option, gilt standardmäßig <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>.</p>
    <p><strong>RAW</strong>: Geben Sie das Wort RAW (Groß-/Kleinschreibung ist egal) an, um <em>Text</em> so wie es ist ohne jegliche Umwandlungen in die Datei zu schreiben. Diese Option überschreibt jede zuvor festgelegte Codierung und umgekehrt.</p>
    <p><strong>`n</strong> (ein LF-Zeichen): Fügt vor jedem LF-Zeichen (`n) ein CR-Zeichen (`r) ein, sofern noch nicht vorhanden. Das heißt, dass `n in `r`n umgewandelt wird. Diese Umwandlung hat in der Regel keinen Einfluss auf die Performance. Wenn diese Option fehlt, bleiben die Zeilenenden innerhalb von <em>Text</em> unberührt.</p>
  </dd>

</dl>

<h2>ErrorLevel</h2>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird bei Misserfolg auf 1 und bei Erfolg auf 0 gesetzt.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h2>Bemerkungen</h2>
<p>Um eine existierende Datei zu überschreiben, löscht man sie mit <a href="FileDelete.htm">FileDelete</a>, bevor man FileAppend verwendet.</p>
<p>Die Zieldatei wird nach Anfügen des Textes automatisch geschlossen (außer wenn FileAppend in seinem Einzelparameter-Modus innerhalb einer <a href="LoopRead.htm">Datei-lesenden/-schreibenden Schleife</a> ist).</p>
<p><a href="FileOpen.htm">FileOpen</a> im Anfügemodus bietet mehr Kontrolle als FileAppend und lässt die Datei geöffnet, anstatt sie jedesmal neu zu öffnen und zu schließen. Sobald eine Datei im Anfügemodus geöffnet ist, kann die Zeichenkette mit <code>File.<a href="../objects/File.htm#Write">Write</a>(Zeichenkette)</code> angefügt werden. File-Objekte unterstützen auch binäre Verarbeitung mit <a href="../objects/File.htm#RawWrite">RawWrite</a>/<a href="../objects/File.htm#RawRead">RawRead</a> oder <a href="../objects/File.htm#WriteNum">Write<i>Num</i></a>/<a href="../objects/File.htm#ReadNum">Read<i>Num</i></a>.</p>
<h2>Siehe auch</h2>
<p><a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopRead.htm">Datei-lesende Schleife</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a></p>
<h2>Beispiel</h2>
<pre class="NoIndent">FileAppend "Eine weitere Zeile.`n", "C:\Meine Dokumente\Test.txt"

<em>; Das folgende Beispiel verwendet ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a>, um ein Text besser lesbar und verwaltbar zu machen:</em>
FileAppend "
(
Eine Textzeile.
Standardmäßig befindet sich das CR-Zeichen (Enter) zwischen der vorherigen und dieser Zeile.
	Diese Zeile wird mit einem Tabulator eingerückt; Standardmäßig wird dieser Tabulator auch in die Datei geschrieben.
)", A_Desktop "\Meine Datei.txt"</pre>
<pre class="NoIndent" id="FTP"><em>; Das folgende Beispiel zeigt, wie das FTP-Hochladen mithilfe des systeminternen FTP-Befehls 
; automatisiert werden kann. Dieses Skript wurde auf Windows XP getestet.</em>

FTPBefehlDatei := A_ScriptDir "\FTPBefehle.txt"
FTPLogDatei := A_ScriptDir "\FTPLog.txt"
FileDelete FTPBefehlDatei  <em>; Falls das vorherige Ausführen vorzeitig beendet wurde.</em>

FileAppend
(
"open host.domain.com
username
password
binary
cd htdocs
put " VarMitNamenDerZieldatei "
delete EineAndereDatei.htm
rename AlterDateiname.htm NeuerDateiname.htm
ls -l
quit"
), FTPBefehlDatei

RunWait Format('{1} /c ftp.exe -s:"{2}" &gt;"{3}"', A_ComSpec, FTPBefehlDatei, FTPLogDatei)
FileDelete FTPBefehlDatei  <em>; Löscht sie aus Sicherheitsgründen.</em>
Run FTPLogDatei  <em>; Zeigt das Protokoll zum Untersuchen an.</em></pre>

</body>
</html>
