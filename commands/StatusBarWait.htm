<!DOCTYPE HTML>
<html>
<head>
<title>StatusBarWait</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>StatusBarWait</h1>

<p>Wartet, bis die Statusleiste eines Fensters die angegebene Zeichenkette enthält.</p>

<pre class="Syntax">StatusBarWait [, Leistentext, Sekunden, Bereichsnummer, Fenstertitel, Fenstertext, Intervall, Titelausnahme, Textausnahme]</pre>
<h3>Parameter</h3>
<dl>

  <dt>Leistentext</dt>
  <dd><p>Der Text oder Teiltext, auf den der Befehl warten soll. Fehlt dieser Parameter oder ist er leer, wartet der Befehl, bis die Statusleiste leer ist. Der Text unterscheidet zwischen Groß- und Kleinschreibung. Das Übereinstimmungsverhalten wird per <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> bestimmt, ähnlich wie bei <em>Fenstertitel</em> unten.</p>
    <p>Wenn der Befehl stattdessen auf eine <em>Änderung</em> des Leistentextes warten soll, kann entweder <a href="StatusBarGetText.htm">StatusBarGetText</a> in einer Schleife oder das RegEx-Beispiel weiter unten verwendet werden.</p></dd>

  <dt>Sekunden</dt>
  <dd><p>Die Dauer in Sekunden (kann einen Dezimalpunkt enthalten), die gewartet werden soll. Ist die Zeit abgelaufen, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt. Fehlt dieser Parameter oder ist er leer, wird der Befehl unendlich lang warten. Die Angabe von 0 ist das gleiche wie, als würde man 0.5 angeben.</p></dd>

  <dt>Bereichsnummer</dt>
  <dd><p>Die Nummer des Leistenbereichs, dessen Text abgerufen werden soll. Fehlt dieser Parameter oder ist er leer, gilt standardmäßig 1, das der meist interessanteste Bereich ist.</p></dd>

  <dt>Fenstertitel</dt>
  <dd><p>Ein Fenstertitel oder sonstige Kriterien, die das Zielfenster ermitteln sollen. Siehe <a href="../misc/WinTitle.htm">Fenstertitel</a>.</p></dd>

  <dt>Fenstertext</dt>
  <dd><p>In diesem Parameter kann eine Zeichenkette angegeben werden, die in einem Textelement des Zielfensters vorkommt (abrufbar mit Windows Spy). Versteckte Textelemente werden auch erkannt, sofern <a href="DetectHiddenText.htm">DetectHiddenText</a> aktiv ist.</p></dd>

  <dt>Intervall</dt>
  <dd><p>Wie oft die Statusleiste überprüft werden soll, während der Befehl wartet (in Millisekunden). 50 ist Standard. </p></dd>

  <dt>Titelausnahme</dt>
  <dd><p>Ignoriert Fenster, deren Titel diesen Wert enthalten.</p></dd>

  <dt>Textausnahme</dt>
  <dd><p>Ignoriert Fenster, deren Textelemente diesen Wert enthalten.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>Dieser Befehl ist in der Lage, eine Ausnahme auszulösen, wenn er nicht auf die Statusleiste zugreifen konnte. Für mehr Informationen, siehe <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 1 gesetzt, wenn der Befehl das Zeitlimit überschritten hat, bevor eine Übereinstimmung in der Statusleiste gefunden werden konnte. Es wird auf 2 gesetzt, wenn der Befehl nicht auf die Statusleiste zugreifen konnte. Es wird auf 0 gesetzt, wenn eine Übereinstimmung gefunden wird.</p>
<h3>Bemerkungen</h3>
<p>Dieser Befehl versucht, die erste <em>Standard</em>-Statusleiste eines Fensters zu lesen (typisches Steuerelement von Microsoft: msctls_statusbar32). Einige Programme verwenden ihre eigenen Statusleisten oder spezielle Versionen des Microsoft-Steuerelements. Solche Leisten werden nicht unterstützt.</p>
<p>Anstatt <a href="StatusBarGetText.htm">StatusBarGetText</a> in einer Schleife zu verwenden, ist es besser, StatusBarWait zu verwenden, weil es Optimierungen beinhaltet, die einen Overhead durch mehrfaches Aufrufen von <a href="StatusBarGetText.htm">StatusBarGetText</a> verhindern.</p>
<p>StatusBarWait legt sein Zielfenster fest, bevor dieser Befehl auf eine Übereinstimmung wartet. Falls dieses Zielfenster geschlossen wird, hört der Befehl auf zu warten, auch dann, wenn ein anderes Fenster mit dem gleichen Fenstertitel und Fenstertext vorhanden ist.</p>
<p>Während der Befehl in einem Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkey</a>, <a href="Menu.htm">benutzerdefinierte Menüeinträge</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p>Fenstertitel und -texte unterscheiden zwischen Groß- und Kleinschreibung. Solange <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> deaktiviert ist, werden versteckte Fenster nicht wahrgenommen.</p>

<h3>Siehe auch</h3>
<p><a href="StatusBarGetText.htm">StatusBarGetText</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="WinGetText.htm">WinGetText</a>, <a href="ControlGetText.htm">ControlGetText</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent"><em>; Das folgende Beispiel schreibt ein neues Suchmuster in ein vorhandenes Explorer-/Suchfenster.</em>
if WinExist("Suchergebnisse") <em>; Bestimmt das zuletzt gefundene Fenster, um das untere zu vereinfachen.</em>
{
    WinActivate
    Send, {tab 2}!o*.txt{enter}  <em>; Schreibt das Muster in das Suchfenster.</em>
    Sleep, 400  <em>; Gewährt der Statusleiste Zeit, auf "Suchen" umzuwechseln.</em>
    <strong>StatusBarWait, gefunden, 30</strong>
    if ErrorLevel
        MsgBox, Die Zeit ist abgelaufen oder es gab ein Problem.
    else
        MsgBox, Die Suche wurde erfolgreich durchgeführt.
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>Das folgende Beispiel wartet auf eine <strong>Änderung</strong> der Statusleiste des aktiven Fensters.</em>
SetTitleMatchMode <a href="SetTitleMatchMode.htm#RegEx">RegEx</a>
if WinExist("A")  <em>; Setzt das zuletzt gefundene Fenster auf das aktive Fenster.</em>
{
   StatusBarGetText, <span class="red">Originaltext</span>
   StatusBarWait, ^(?!^\Q<span class="red">%Originaltext%</span>\E$)  <em>; Dieser reguläre Ausdruck wartet auf eine Änderung des Textes.</em>
}</pre>

</body>
</html>
