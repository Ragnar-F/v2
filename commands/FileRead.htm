<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileRead - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die FileRead-Funktion ruft den Inhalt einer Datei ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>Ruft den Inhalt einer Datei ab.</p>

<pre class="Syntax">Text := <span class="func">FileRead</span>(Dateiname <span class="optional">, Optionen</span>)</pre>
<h2>Parameter</h2>
<dl>

  <dt>Dateiname</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name der Datei, die gelesen werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
  </dd>
  
  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Null oder mehr der folgenden Zeichenketten. Die Optionen müssen jeweils mit einem Leer- oder Tabulatorzeichen voneinander getrennt werden. Zum Beispiel: <code>"`n m5000 UTF-8"</code></p>
    <p><strong>Codierung</strong>: Geben Sie einen beliebigen Codierungsnamen an, der von <a href="FileEncoding.htm">FileEncoding</a> unterstützt wird (außer die leere Zeichenkette), um diese Codierung zu benutzen, falls die Datei keine UTF-8- oder UTF-16-Byte-Order-Markierung hat. Lässt man diesen Parameter weg, wird standardmäßig <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet.</p>
    <p><strong>RAW</strong>: Geben Sie das Wort RAW an (nicht Groß-/Kleinschreibung-sensitiv), um den Inhalt der Datei als <a href="#Binary">rohe Binärdaten</a> zu lesen und ein <a href="../objects/Buffer.htm">Buffer</a>-Objekt anstelle einer Zeichenkette zurückzugeben. Diese Option überschreibt jede zuvor festgelegte Codierung und umgekehrt.</p>
    <p><strong>m1024</strong>: Lässt man diese Option weg, wird die komplette Datei geladen, es sei denn, es mangelt an Speicherkapazität, dann wird eine Fehlermeldung angezeigt und der Thread beendet (kann aber mit <a href="Try.htm">Try</a> umgangen werden). Ansonsten können Sie 1024 mit einer dezimalen oder hexadezimalen Anzahl von Bytes ersetzen. Wenn die Datei die angegebene Größe überschreitet, wird nur ihr führender Teil geladen.</p>
    <p class="note"><strong>Hinweis</strong>: Dies kann dazu führen, dass die letzte Zeile nur mit einem einzelnen CR-Zeichen (`r) endet, statt mit dem CR-LF-Paar (`r`n).</p>
    <p><strong>`n</strong> (ein LF-Zeichen): Ersetzt alle CR-LF-Paare (`r`n) mit einem LF-Zeichen (`n). Diese Übersetzung reduziert jedoch die Performance und ist in der Regel nicht notwendig. Zum Beispiel wäre ein Text, der `r`n enthält, bereits im richtigen Format, um in ein <a href="StrReplace.htm">Gui-Edit-Steuerelement</a> eingefügt werden zu können. Die folgende <a href="LoopParse.htm">Parsende Schleife</a> wird korrekt funktionieren, egal ob eine Zeile mit `r`n oder `n endet: <code>Loop Parse, InhaltMeinerDatei, "`n", "`r"</code>.</p>
  </dd>
  
</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../objects/Buffer.htm">Buffer</a></p>
<p>Diese Funktion gibt den Inhalt der angegebenen Datei zurück. Der Rückgabewert ist ein Buffer-Objekt, wenn die RAW-Option aktiv ist und die Datei geöffnet werden kann, ansonsten ist es eine Zeichenkette. Wenn die Datei nicht existiert oder aus irgendeinen anderen Grund nicht geöffnet werden kann, wird eine leere Zeichenkette zurückgegeben.</p>

<h2>Fehlerbehandlung</h2>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 0 gesetzt, wenn die Datei erfolgreich geladen wurde. Ansonsten wird ErrorLevel auf 1 gesetzt, wenn ein Problem aufgetreten ist. Probleme sind zum Beispiel: 1) Datei existiert nicht; 2) Datei ist gesperrt oder nicht zugreifbar; 3) Das System hat nicht genügend Arbeitsspeicher, um die Datei zu laden.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h2 id="Binary">Lesen von Binärdaten</h2>
<p>Bei Benutzung der <code>RAW</code>-Option ist der Rückgabewert ein <a href="../objects/Buffer.htm">Buffer</a>-Objekt, das den rohen, unbearbeiteten Inhalt der Datei enthält. Die <a href="../objects/Buffer.htm#Size">Size</a>-Eigenschaft des Objekts gibt die Anzahl der gelesenen Bytes zurück. <a href="NumGet.htm">NumGet</a> oder <a href="StrGet.htm">StrGet</a> kann genutzt werden, um die Daten des Puffers abzurufen. Zum Beispiel:</p>
<pre>buf := FileRead(A_AhkPath, "RAW")
if StrGet(buf, 2, "cp0") == "MZ"  <em>; Scheinbar eine ausführbare Datei...</em>
{
    <em>; Computertyp im COFF-Dateiheader abrufen.</em>
    computer := NumGet(buf, NumGet(buf, 0x3C, "uint") + 4, "ushort")
    computer := computer=0x8664 ? "x64" : computer=0x014C ? "x86" : "unbekannt"
    <em>; Computertyp und Dateigröße anzeigen.</em>
    MsgBox "Diese ausführbare " machine "-Datei ist " buf.Size " Bytes groß."
}
buf := ""</pre>
<p>Diese Option ist in der Regel zum Lesen von binären Daten erforderlich, weil standardmäßig alle gelesenen Bytes aus der Datei als Text interpretiert werden und von der Codierung der Quelldatei (wie in den Optionen angegeben oder via <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>) in die <a href="../Compat.htm#Format">native Codierung</a> des Skripts, UTF-16, umgewandelt sein könnte. Wenn die Daten kein UTF-16-Text sind, ändert diese Umwandlung die Daten auf unerwünschte Weise.</p>
<p>Ein weiteres Beispiel für die RAW-Option ist <a href="ClipboardAll.htm#ExFile">ClipboardAll-Beispiel #2</a>.</p>
<p>Mit <a href="FileOpen.htm">FileOpen</a> in Verbindung mit <a href="../objects/File.htm#RawRead">File.RawRead</a> oder <a href="../objects/File.htm#ReadNum">File.Read<i>Num</i></a> können binäre Daten erfasst werden, ohne die komplette Datei in den Speicher einlesen zu müssen.</p>

<h2>Bemerkungen</h2>
<p>FileRead ist deutlich performanter als eine <a href="LoopRead.htm">Datei-lesende Schleife</a>, wenn es darum geht, alles oder einen großen Teil einer Datei in den Speicher zu laden.</p>
<p>Eine Datei größer als 4 GB bewirkt, dass eine Ausnahme ausgelöst wird, es sei denn, die <strong>*m</strong>-Option ist vorhanden, dann wird nur der führende Teil der Datei geladen. Eine Ausnahme wird auch ausgelöst, wenn das Programm unfähig ist, genügend Speicher für die angeforderte Datenmenge bereitzustellen.</p>
<p>Wenn Sie Bedenken haben, dass die Datei zu viel Arbeitsspeicher verbraucht, können Sie zunächst ihre Größe mit <a href="FileGetSize.htm">FileGetSize</a> überprüfen.</p>
<p>Die <a href="FileOpen.htm">FileOpen</a>-Funktion bietet eine weitaus fortschrittlichere Funktionalität als FileRead. Sie kann zum Beispiel Daten an einer bestimmten Stelle in der Datei lesen oder schreiben, ohne zuerst die gesamte Datei in den Arbeitsspeicher lesen zu müssen. Eine Liste aller Features finden Sie unter <a href="../objects/File.htm">File-Objekt</a>.</p>

<h2>Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="LoopRead.htm">Datei-lesende Schleife</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="Download.htm">Download</a></p>

<h2>Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>: Liest eine Textdatei und speichert ihren Inhalt in <em>MeinText</em>.</p>
<pre>MeinText := FileRead("C:\Meine Dokumente\Meine Datei.txt")</pre>
</div>

<div class="ex" id="ExSort">
<p><a href="#ExSort">#2</a>: Sortiert schnell den Inhalt einer Datei.</p>
<pre>Inhalt := FileRead("C:\Adressenliste.txt")
if not ErrorLevel  <em>; Erfolgreich geladen.</em>
{
    Inhalt := <a href="Sort.htm">Sort</a>(Inhalt)
    FileDelete "C:\Adressenliste (alphabetisch).txt"
    FileAppend Inhalt, "C:\Adressenliste (alphabetisch).txt"
    Inhalt := "" <em>; Gibt den Speicher frei.</em>
}</pre>
</div>

</body>
</html>
