<!DOCTYPE HTML>
<html>
<head>
<title>Process</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Process</h1>

<p>Funktionen zum Ausführen folgender Prozessoperationen: Existenzprüfung; Prioritätsänderung; Schließen; Auf Schließen warten; Auf Beenden warten.</p>

<pre class="Syntax" id="Exist">AusgabeVar := <span class="func">ProcessExist</span>(<span class="optional">PID-oder-Name</span>)</pre>
<p><strong>Exist</strong>: Setzt <em>AusgabeVar</em> auf die Prozess-ID (PID) des gefundenen Prozesses, oder ansonsten auf 0. Fehlt der <em>PID-oder-Name</em>-Parameter, wird die PID des Skripts abgerufen.</p>

<pre class="Syntax" id="Close">AusgabeVar := <span class="func">ProcessClose</span>(PID-oder-Name)</pre>
<p><strong>Close</strong>: Nachdem ein gefundener Prozess erfolgreich beendet wurde, wird <em>AusgabeVar</em> auf seine ehemalige Prozess-ID (PID) gesetzt. Ansonsten wird ErrorLevel auf 0 gesetzt (also wenn ein Prozess nicht gefunden wurde oder nicht beendet werden konnte). Da der Prozess abrupt beendet wird - mit der Chance, dass seine Ausführung an einem kritischen Punkt unterbrochen wird oder dass ungespeicherte Daten innerhalb seiner Fenster (sofern er welche hat) verloren gehen - sollte diese Methode nur verwendet werden, wenn ein Prozess durch Anwenden von <a href="WinClose.htm">WinClose</a> an eines seiner Fenster nicht geschlossen werden kann.</p>

<pre class="Syntax" id="Priority"><span class="func">ProcessSetPriority</span> Priorität <span class="optional">, PID-oder-Name</span></pre>
<p><strong>Priority</strong>: Ändert die Priorität (wie im Windows-Task-Manager angezeigt) des ersten gefundenen Prozesses zu <em>Priorität</em>. Fehlt der <em>PID-oder-Name</em>-Parameter, wird die Priorität des Skripts geändert.</p>
<p><em>Priorität</em> sollte einer der folgenden Buchstaben oder Wörter sein: L (oder Low), B (oder BelowNormal), N (oder Normal), A (oder AboveNormal), H (oder High), R (oder Realtime). Hinweis: Jeder Prozess, der nicht darauf abgestimmt ist, in Echtzeit (Realtime) zu laufen, könnte die Systemstabilität reduzieren, wenn er auf diese Priorität gesetzt wird.</p>
<p>Der Rückgabewert dieser Funktion ist die Prozess-ID (PID) des Prozesses, der eine benutzerdefinierte Priorität hat, oder 0, wenn kein Prozess gefunden wurde oder wenn seine Priorität aufgrund von Problemen nicht geändert werden konnte.</p>

<pre class="Syntax" id="Wait">AusgabeVar := <span class="func">ProcessWait</span>(PID-oder-Name <span class="optional">, Timeout</span>)</pre>
<p><strong>Wait</strong>: Wartet bis zu <em>Timeout</em> Sekunden (kann einen Dezimalpunkt enthalten), bis ein passender Prozess vorhanden ist. Fehlt <em>Timeout</em>, wird die Funktion unendlich lang warten. Wenn ein Prozess gefunden wurde, wird <em>AusgabeVar</em> auf seine Prozess-ID (PID) gesetzt. Hat die Funktion das Zeitlimit überschritten, wird <em>AusgabeVar</em> auf 0 gesetzt.</p>

<pre class="Syntax" id="WaitClose">AusgabeVar := <span class="func">ProcessWaitClose</span>(PID-oder-Name <span class="optional">, Timeout</span>)</pre>
<p><strong>WaitClose</strong>: Wartet bis zu <em>Timeout</em> Sekunden (kann einen Dezimalpunkt enthalten), bis ALLE passenden Prozesse geschlossen werden. Fehlt <em>Timeout</em>, wird die Funktion unendlich lang warten. Wenn alle passenden Prozesse geschlossen sind, wird <em>AusgabeVar</em> auf 0 gesetzt. Hat die Funktion das Zeitlimit überschritten, wird <em>AusgabeVar</em> auf die Prozess-ID (PID) des ersten noch vorhandenen passenden Prozesses gesetzt.</p>

<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der Variable, in der je nach Fall die eindeutige Prozess-ID (PID) oder Null (0) gespeichert werden soll.</p></dd>
  
  <dt>PID-oder-Name</dt>
  <dd><p>Dieser Parameter kann entweder eine Nummer (die PID) oder ein Prozessname sein, wie unten beschrieben. Man kann ihn auch weglassen, sofern es oben erwähnt wird.</p>
  <p>PID: Die Prozess-ID in Form einer Nummer zur eindeutigen Identifizierung eines Prozesses (diese Nummer ist nur gültig, solange es diesen Prozess gibt). Mit der <a href="Run.htm">Run</a>-Funktion kann die PID eines neu gestarteten Prozesses ermittelt werden. Im Vergleich dazu kann mit <a href="WinGet.htm">WinGet</a> die PID eines Fensters ermittelt werden. Mit ProcessExist kann auch eine PID abgerufen werden.</p>
      <p>Name: Der Name eines Prozesses, den üblicherweise auch seine ausführbare Datei hat (ohne Pfad), z. B. notepad.exe oder winword.exe. Da ein Name mit mehreren laufenden Prozessen übereinstimmen kann, wird nur der erste Prozess einbezogen. Der Name unterscheidet nicht zwischen Groß- und Kleinschreibung.</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Bei <em>Wait</em> und <em>WaitClose</em>: Prozesse werden alle 100 Millisekunden überprüft; sobald die Bedingung erfüllt wurde, wird die Funktion aufhören zu warten. Das heißt, dass die Funktion nicht auf das Zeitlimit wartet, sondern dass sie sofort ihren Wert zurückgibt und die Skriptausführung fortsetzt. Während die Funktion im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> per <a href="../Hotkeys.htm">Hotkey</a>, <a href="../objects/Menu.htm">benutzerdefinierte Menüeinträge</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p><strong>Prozessliste</strong>: Es gibt zwar keine <em>ProcessList</em>-Funktion, aber im <a href="#ListEx">Beispiele-Abschnitt</a> wird gezeigt, wie eine Liste von Prozessen via DllCall abgerufen werden kann.</p>

<h3>Siehe auch</h3>
<p><a href="Run.htm">Run</a>, <a href="WinGet.htm">WinGet</a>, <a href="WinClose.htm">WinClose</a>, <a href="WinKill.htm">WinKill</a>, <a href="WinWait.htm">WinWait</a>, <a href="WinWaitClose.htm">WinWaitClose</a>, <a href="WinExist.htm">WinExist</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1:</em>

Run "Notepad.exe", , , NeuePID
ProcessSetPriority "High", NeuePID
MsgBox "Die PID des neu gestarteten Editors ist " NeuePID</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #2:</em>

NeuePID := ProcessWait("Notepad.exe", 5.5)
if NeuePID = 0
{
    MsgBox "Der angegebene Prozess konnte innerhalb der 5.5 Sekunden nicht gefunden werden."
    return
}
<em>; Ansonsten:</em>
MsgBox "Es wurde ein passender Prozess gefunden (Prozess-ID ist " NeuePID ")."
ProcessSetPriority "Low", NeuePID
ProcessSetPriority "High"  <em>; Lässt das Skript sich selbst auf hohe Priorität setzen.</em>
WinClose "Unbenannt - Editor"
ErrorLevel := ProcessWaitClose(NeuePID, 5)
if ErrorLevel <em>; Die PID ist noch vorhanden.</em>
    MsgBox "Der Prozess konnte innerhalb der 5 Sekunden nicht geschlossen werden."</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #3: Ein Hotkey zum Ändern der Prozess-Priorität eines aktiven Fensters:</em>

#z:: <em>; Hotkey: WIN+Z</em>
Gui := GuiCreate(, "Priorität setzen")
Gui.Add("Text",, "
(
  Drücke ESCAPE zum Abbrechen, oder klicke doppelt auf einen
  neuen Prioritätslevel für das folgende Fenster:
)")
Gui.Add("Text", "wp", WinGetTitle("A"))
LB := Gui.Add("ListBox", "r5", "Normal||High|Low|BelowNormal|AboveNormal")
SetzePriorität := Func("SetzePriorität").bind(LB, WinGetPID("A"))
LB.OnEvent("DoubleClick", SetzePriorität)
Gui.Add("Button", "default", "OK").OnEvent("Click", SetzePriorität)
Gui.OnEvent("Escape", "Gui_Close")
Gui.OnEvent("Close", "Gui_Close")
Gui.Show
return

SetzePriorität(LB, PID)
{
  if ProcessSetPriority(LB.Text, PID)
    MsgBox("Erfolg: Die Priorität wurde auf '" LB.Text "' gesetzt."
  else
    MsgBox "Fehler: Die Priorität konnte nicht auf '" LB.Text "' gesetzt werden."
  WinClose
}

Gui_Close(Gui)
{
  Gui.Destroy
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListEx"><em>; Beispiel #4: Ermittelt eine Liste von allen laufenden Prozessen via DllCall und zeigt sie dann in einer Message Box an.</em>

d := "  |  "  <em>; Zeichenkette-Trennzeichen</em>
s := 4096  <em>; Größe der Puffer und Arrays (4 KB)</em>

SkriptPID := ProcessExist()  <em>; Die PID des laufenden Skripts</em>
<em>; Ermittelt den Handle des Skripts mit PROCESS_QUERY_INFORMATION (0x0400)</em>
h := DllCall("OpenProcess", "UInt", 0x0400, "Int", false, "UInt", SkriptPID, "Ptr")
<em>; Öffnet einen anpassbaren Zugriffstoken mit diesem Prozess (TOKEN_ADJUST_PRIVILEGES = 32)</em>
DllCall("Advapi32.dll\OpenProcessToken", "Ptr", h, "UInt", 32, "PtrP", t)
VarSetCapacity(ti, 16, 0)  <em>; Struktur mit Berechtigungen</em>
NumPut(1, ti, 0, "UInt")  <em>; Setzt einen Eintrag in das Array mit Berechtigungen ...</em>
<em>; Ermittelt den lokalen eindeutigen Identifikator der Debug-Berechtigung:</em>
DllCall("Advapi32.dll\LookupPrivilegeValue", "Ptr", 0, "Str", "SeDebugPrivilege", "Int64P", luid)
NumPut(luid, ti, 4, "Int64")
NumPut(2, ti, 12, "UInt")  <em>; Aktiviert diese Berechtigung: SE_PRIVILEGE_ENABLED = 2</em>
<em>; Aktualisiert die Berechtigungen des Prozesses mit dem neuen Zugriffstoken:</em>
r := DllCall("Advapi32.dll\AdjustTokenPrivileges", "Ptr", t, "Int", false, "Ptr", &amp;ti, "UInt", 0, "Ptr", 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", t)  <em>; Schließt diesen Zugriffstoken-Handle, um Speicher freizugeben.</em>
DllCall("CloseHandle", "Ptr", h)  <em>; Schließt diesen Prozess-Handle, um Speicher freizugeben.</em>

hModule := DllCall("LoadLibrary", "Str", "Psapi.dll")  <em>; Erhöht die Performance durch Vorausladen der Library.</em>
s := VarSetCapacity(a, s)  <em>; Ein Array, in der die Liste der Prozessidentifikatoren gespeichert wird:</em>
c := 0  <em>; Zähler für die Prozess-IDs</em>
DllCall("Psapi.dll\EnumProcesses", "Ptr", &amp;a, "UInt", s, "UIntP", r)
Loop r // 4  <em>; Parst das Array mit Identifikatoren als DWORDs (32 Bit):</em>
{
   id := NumGet(a, A_Index * 4, "UInt")
   <em>; Öffnet Prozess mit: PROCESS_VM_READ (0x0010) | PROCESS_QUERY_INFORMATION (0x0400)</em>
   h := DllCall("OpenProcess", "UInt", 0x0010 | 0x0400, "Int", false, "UInt", id, "Ptr")
   if !h
      continue
   VarSetCapacity(n, s, 0)  <em>; Ein Puffer, in dem der Basisname des Moduls gespeichert wird:</em>
   e := DllCall("Psapi.dll\GetModuleBaseName", "Ptr", h, "Ptr", 0, "Str", n, "UInt", s//2)
   if !e    <em>; Fallback-Methode für 64-Bit-Prozesse, wenn sie im 32-Bit-Modus sind:</em>
      if e := DllCall("Psapi.dll\GetProcessImageFileName", "Ptr", h, "Str", n, "UInt", s//2)
         SplitPath n, n
   DllCall("CloseHandle", "Ptr", h)  <em>; Schließt diesen Prozess-Handle, um Speicher freizugeben.</em>
   if (n &amp;&amp; e)  <em>; Wenn Image nicht null ist, füge es zur Liste hinzu:</em>
      l .= n "`n", c++
}
DllCall("FreeLibrary", "Ptr", hModule)  <em>; Entlädt die Library, um Speicher freizugeben.</em>
<em>;l := Sort(l)  ; Heben Sie die Kommentierung in dieser Zeile auf, um die Liste alphabetisch zu sortieren.</em>
MsgBox StrReplace(l, "`n", d), c " Prozesse", 0</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListCom"><em>; Beispiel #5: Ermittelt eine Liste von allen laufenden Prozessen via COM.</em>

Gui := GuiCreate(, "Prozessliste")
LV := Gui.Add("ListView", "x2 y0 w400 h500", "Prozessname|Befehlszeile")
for Prozess in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")
    LV.Add("", Prozess.Name, Prozess.CommandLine)
Gui.Show

<em>; Win32_Process: <a href="https://msdn.microsoft.com/de-de/library/aa394372.aspx">http://msdn.microsoft.com/en-us/library/aa394372.aspx</a></em>
</pre>

</body>
</html>
