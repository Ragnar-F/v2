<!DOCTYPE HTML>
<html>
<head>
<title>For-Schleife</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>For-Schleife</h1>

<p>Wiederholt mehrere Funktionen für jedes Key-Value-Paar in einem Objekt.</p>

<pre class="Syntax"><span class="func">For</span> Key <span class="optional">, Value</span> in Ausdruck</pre>
<h3>Parameter</h3>
<dl>

  <dt>Key<br>
    
    Value</dt>
  <dd><p>Die Variablen, in denen die Werte gespeichert werden sollen, die der Enumerator zu Beginn jeder Iteration zurückgibt - das ist in der Regel der Key und Value jedes Key-Value-Paares innerhalb des Objekts. Die tatsächliche Beschaffenheit dieser Werte wird durch den Enumerator definiert (und der Typ des Enumerators wird durch das Zielobjekt definiert).</p>
  <p>Wenn die Schleife unterbrochen wird oder das Ende erreicht, werden die vorherigen Werte von diesen Variablen wiederhergestellt.</p></dd>

  <dt>Ausdruck</dt>
  <dd><p>Ein <a href="../Variables.htm#Expressions">Ausdruck</a>, dessen Ergebnis ein Objekt ist, oder eine Variable, die ein Objekt enthält.</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Die Parameterliste kann optional mit runden Klammern umschlossen werden. Zum Beispiel: <code>for (Key in meinObjekt)</code></p>
<p><i>Ausdruck</i> wird, bevor die Schleife beginnt, nur einmal ausgewertet. Die <code>_NewEnum</code>-Methode des resultierenden Objekts wird aufgerufen, um ein <a href="../objects/Enumerator.htm"><i>Enumerator</i></a>-Objekt abzurufen. Zu Beginn jeder Iteration wird mit der <a href="../objects/Enumerator.htm#Next">Next</a>-Methode des Enumerators das nächste Key-Value-Paar abgerufen. Wenn Next eine 0 oder leere Zeichenkette zurückgibt, wird die Schleife beendet.</p>
<p>Das folgende Beispiel zeigt diesen Prozess, auch wenn es nicht das gleiche ist wie eine For-Schleife:</p>
<pre>_enum := (<i>Ausdruck</i>)._NewEnum()
while _enum.Next(Key, Value)
{
    ...
}
</pre>
<p>Im Code oben wird eine Ausnahme ausgelöst, wenn <em>Ausdruck</em> oder _NewEnum kein Objekt zurückgibt oder wenn eine erforderliche Methode fehlt.</p>
<p>Vorhandene Key-Value-Paare können geändert werden, während die Schleife läuft. Allerdings führt das Einfügen oder Entfernen von Keys dazu, dass einige Elemente übersprungen oder mehrfach enumeriert werden. Diesen Sachverhalt kann man umgehen, wenn man zuerst eine Liste mit Keys erstellt, die entfernt werden sollen, und danach eine zweite Schleife verwendet, um die Keys nach dem ersten Schleifendurchlauf zu entfernen. Beachten Sie, dass mit <code><a href="../objects/Object.htm#Delete">Object.Delete</a>(<i>ErsterKey</i>, <i>LetzterKey</i>)</code> eine bestimmte Auswahl von Keys entfernt werden können, ohne eine Schleife verwenden zu müssen.</p>
<p>Nach einer For-Schleife erfolgt üblicherweise ein <a href="Block.htm">Block</a> mit mehreren Anweisungen, die den <em>Schleifenkörper</em> bilden. Hat die Schleife nur eine Anweisung, ist ein Block nicht notwendig (in diesem Fall zählt ein "if" und das dazugehörige "else" als eine Anweisung). Optional kann der "One True Brace Style" (OTB) angewendet werden, um die geschweifte Startklammer auf dieselbe Zeile statt darunter zu setzen. Zum Beispiel: <code>for x, y in z {</code>.</p>
<p>Wie bei allen Schleifen auch, können <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und <a href="../Variables.htm#Index">A_Index</a> verwendet werden.</p>

<h3>COM-Objekte</h3>
<p>Da <i>Key</i> und <i>Value</i> direkt an die Next-Methode des Enumerators übergeben werden, sind die zugewiesenen Werte abhängig davon, welcher Objekttyp gerade enumeriert wird. Bei COM-Objekten enthält <i>Key</i> den Wert, der von <a href="https://msdn.microsoft.com/de-de/library/ms221369.aspx">IEnumVARIANT::Next()</a> zurückgegeben wurde, und <i>Value</i> eine Zahl, die den <a href="https://msdn.microsoft.com/de-de/library/cc237865.aspx">Variant-Typen</a> repräsentiert. Verwendet man die For-Schleife beispielsweise mit einem <a href="https://msdn.microsoft.com/de-de/library/x4k5wbx4.aspx">Scripting.Dictionary</a>-Objekt, würde <i>Key</i> einen Key aus dem Dictionary enthalten, und <i>Value</i> bei Zeichenketten eine 8 und bei Integer eine 3. Siehe <a href="ComObjType.htm">ComObjTyp</a> für eine Liste von Typen.</p>
<p>Beim Enumerieren eines <a href="ComObjArray.htm">SafeArrays</a> wird <i>Key</i> das aktuelle Element sein und <i>Value</i> seinen Variantentyp enthalten.</p>

<h3>Siehe auch</h3>
<p><a href="../objects/Enumerator.htm">Enumerator-Objekt</a>, <a href="../objects/Object.htm#NewEnum">Object._NewEnum</a>, <a href="While.htm">While-Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Listet die Key-Value-Paare eines Objekts auf:</em>
Farben := <a href="../Objects.htm#Arrays">Object</a>("Rot", 0xFF0000, "Blau", 0x0000FF, "Grün", 0x00FF00)
<em>; "Farben" könnte direkt mit dem obigen Ausdruck ersetzt werden:</em>
For k, v in Farben
    s .= k "=" v "`n"
MsgBox s
</pre>
<pre class="NoIndent"><em>; Listet alle offenen Explorer- und IE-Fenster auf:</em>
for window in <a href="ComObjCreate.htm">ComObjCreate</a>("<a href="https://msdn.microsoft.com/de-de/library/bb774094.aspx">Shell.Application</a>").Windows
    Fenster .= window.<a href="https://msdn.microsoft.com/de-de/library/aa752057.aspx">LocationName</a> " :: " window.<a href="https://msdn.microsoft.com/de-de/library/aa752058.aspx">LocationURL</a> "`n"
MsgBox windows</pre>
<pre class="NoIndent"><em>/*
Class: CEnumerator

Generisches Enumerator-Objekt, mit dem numerische Keys iteriert werden können.
Das Array darf beim Iterieren nicht verändert werden, weil der iterierte Bereich ansonsten ungültig wäre.
Es ist möglich, eine benutzerdefinierte Length()-Funktion für die Array-Grenzen zu definieren.
Befinden sich fehlende Array-Elemente zwischen 1 und Max-Index, werden sie iteriert, aber einen Wert von "" haben.
Das bedeutet, dass dieser Enumerator keine realen lückenhaften Arrays unterstützt.
Damit ein Objekt diesen Iterator verwenden kann, fügt man diese Funktion in die Klassendefinition ein:

    _NewEnum()
    {
        return new CEnumerator(this)
    }

Quelle: http://www.autohotkey.com/board/topic/2667-suggestions-on-documentation-improvements/?p=531509
*/</em>

<em>; Iteriert über den Enumerator</em>
For k, v in Test
    MsgBox k "=" v

<em>; Test-Klasse, um die Verwendung zu demonstrieren</em>
class Test
{
    static Data := ["abc", "def", "ghi"]

    _NewEnum()
    {
        return new CEnumerator(this.Data)
    }
}

class CEnumerator
{
    __New(Object)
    {
        this.Object := Object
        this.first := true
        <em>; Für die Geschwindigkeit zwischenspeichern. Nützlich, falls benutzerdefinierte Length-Funktionen schlechte Performance haben.</em>
        <em>; Das bedeutet aber auch, dass keine Key-Value-Paare beim Iterieren eingefügt werden können, weil der Bereich ansonsten ungültig wäre.</em>
        this.ObjMaxIndex := Object.Length()
    }

    Next(ByRef key, ByRef value)
    {
        if (this.first)
        {
            this.Delete("first")
            key := 1
        }
        else
            key++
        if (key &lt;= this.ObjMaxIndex)
            value := this.Object[key]
        else
            key := ""
        return key != ""
    }
}</pre>
</body>
</html>
