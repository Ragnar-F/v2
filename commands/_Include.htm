<!DOCTYPE HTML>
<html>
<head>
<title>#Include</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>#Include / #IncludeAgain</h1>

<p>Veranlasst das Skript sich so zu verhalten, als würde sich der Inhalt der angegebenen Datei direkt an dieser Position befinden.</p>

<pre class="Syntax"><span class="func">#Include</span> DateiOderVerzName
<span class="func">#Include</span> &lt;LibName&gt;
<span class="func">#IncludeAgain</span> DateiOderVerzName</pre>
<h3>Parameter</h3>
<dl>

  <dt>DateiOderVerzName</dt>
  <dd><p>Der Pfad einer Datei oder eines Verzeichnisses, wie unten beschrieben. Der Dateiname <strong>darf keine</strong> Anführungszeichen, Platzhalterzeichen oder <a href="../misc/EscapeChar.htm">Escapesequenzen</a> außer Semikolon (<strong>`;</strong>) enthalten. <a href="../Variables.htm#ScriptDir">%A_ScriptDir%</a>, <a href="../Variables.htm#AppData">%A_AppData%</a>, <a href="../Variables.htm#AppDataCommon">%A_AppDataCommon%</a> und <a href="../Variables.htm#LineFile">%A_LineFile%</a> können als Platzhalter benutzt werden.</p>
    <p><strong>Datei:</strong> Der Name der einzufügenden Datei, das sich im selben Verzeichnis befindet wie die aktuelle Datei, solange kein absoluter Pfad angegeben ist. Hinweis: <a href="SetWorkingDir.htm">SetWorkingDir</a> hat keine Auswirkung auf #Include, weil die Direktive verarbeitet wird, bevor das Script ausgeführt wird.</p>
      <p><strong>Verzeichnis:</strong> Es ist möglich, ein Verzeichnis anstelle einer Datei anzugeben, um das Arbeitsverzeichnis für alle nachfolgenden Vorkommnisse von #Include und <a href="FileInstall.htm">FileInstall</a> in der aktuellen Datei zu ändern. Hinweis: Diese Änderung hat keinen Einfluss auf das anfänglich gesetzte Arbeitsverzeichnis des Skripts (<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>). Um das zu ändern, verwendet man <a href="SetWorkingDir.htm">SetWorkingDir</a> im obersten Bereich des Skripts.</p></dd>

  <dt>LibName</dt>
  <dd><p>Library-Datei oder Funktionsname. Zum Beispiel würden sowohl <code>#Include &lt;Lib&gt;</code> als auch <code>#Include &lt;Lib_Funktion&gt;</code> Lib.ahk aus einem der <a href="../Functions.htm#lib">Funktions-Library-Ordner</a> einfügen.</p></dd>

</dl>
<h3>Bemerkungen</h3>
<p>Ein Skript verhält sich so, als würde sich der Inhalt der einzufügenden Datei exakt auf der Position von #Include befinden (als wäre der Inhalt der Datei kopiert und eingefügt wurden). Daraus folgt, dass zwei einzelne Skripte in der Regel nicht zu einem funktionierenden Skript zusammengefügt werden können (um das zu erreichen, siehe <a href="http://www.autohotkey.com/forum/topic18545.html">www.autohotkey.com/forum/topic18545.html</a>).</p>
<p>#Include stellt sicher, dass <em>Dateiname</em> nur einmal eingefügt wird, selbst wenn mehrere Einfügungen für diese Datei vorkommen. #IncludeAgain erlaubt hingegen mehrere Einfügungen von der gleichen Datei. In jeder anderen Hinsicht ist #IncludeAgain das gleiche wie #Include.</p>
<p>Bei Bedarf kann vor dem <em>Dateiname</em>-Parameter ein *i angefügt werden, das das Programm dazu veranlassen würde, die einzufügende Datei zu ignorieren, wenn sie nicht gelesen werden konnte. Zum Beispiel: <code>#Include *i Spezialoptionen.ahk</code>. Diese Option sollte man nur verwenden, wenn der Inhalt der einzufügenden Datei nicht zum Ausführen des Hauptskripts benötigt wird.</p>
<p>Die Nummerierung der Zeilen, die im Hauptfenster per <a href="ListLines.htm">ListLines</a> oder Menü "View-Lines" angezeigt werden, richtet sich nach ihrer physikalischen Reihenfolge innerhalb der einzufügenden Dateien. Das heißt, dass das Einfügen einer neuen Datei die Zeilennummerierung des Hauptskripts um 1 erhöht, nämlich von der #Include-Zeile selbst (außer bei <a href="../Scripts.htm#ahk2exe">kompilierten Skripten</a>, die ihre einzufügenden Dateien zu einem großen Skript zusammenfügen, während sie kompiliert werden).</p>
<p>#Include wird oft verwendet, um <a href="../Functions.htm">Funktionen</a> aus einer externen Datei zu laden. Im Gegensatz zu Subroutinen können <a href="../Functions.htm">Funktionen</a> ganz am Anfang des Skripts eingefügt werden, ohne dabei den <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> zu beeinflussen.</p>
<p>#Include kann, wie bei anderen Direktiven auch, nicht bedingt ausgeführt werden. Das heißt, dass das folgende Beispiel nicht funktionieren würde:</p>
<pre>if x = 1
    #Include BeliebigeDatei.ahk  <em>; Diese Zeile wird ohne Beachtung des X-Wertes ausgeführt.</em>
    y := 2  <em>; Und diese Zeile würde sich auf das obere IF beziehen, weil sich Direktiven nicht auf IFs beziehen können.</em></pre>
<p>Dateien können automatisch eingefügt werden (ohne #Include verwenden zu müssen), wenn eine <a href="../Functions.htm#lib">Library-Funktion</a> per Name aufgerufen wird.</p>

<h3>Siehe auch</h3>
<p><a href="../Functions.htm#lib">Libraries mit Funktionen</a>, <a href="../Functions.htm">Funktionen</a>, <a href="FileInstall.htm">FileInstall</a></p>
<h3>Beispiel</h3>
<pre class="NoIndent">#Include C:\Meine Dokumente\Skripte\Hilfsprogramm-Subroutinen.ahk
#Include %A_ScriptDir%  <em>; Ändert das Arbeitsverzeichnis für jedes nachfolgende #Include und FileInstall.</em>
#Include C:\Meine Skripte  <em>; Wie oben, aber für ein explizit benanntes Verzeichnis.</em></pre>

</body>
</html>
