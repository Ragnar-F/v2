<!DOCTYPE HTML>
<html lang="de">
<head>
<title>GetKeyState - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die GetKeyState-Funktion überprüft, ob eine Taste oben oder unten ist.  Kann auch den Status eines Joysticks abrufen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>Überprüft, ob eine Taste oben oder unten ist. Kann auch den Status eines Joysticks abrufen.</p>

<pre class="Syntax">IstUnten := <span class="func">GetKeyState</span>(Tastenname <span class="optional">, Modus</span>)</pre>
<h2>Parameter</h2>
<dl>

  <dt>Tastenname</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Nahezu jedes Zeichen, das mit der Tastatur erzeugt werden kann, oder einer der Tastennamen aus der <a href="../KeyList.htm">Tastenliste</a>, darunter auch Maus- und Joystick-Tasten. Beispiele: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternativ kann ein eindeutiger virtueller Tastencode wie vkFF angegeben werden. Virtuelle Tastencodes sind nützlich, um auf Tasten zu verweisen, die keine Namen haben (was aber selten vorkommt). Schauen Sie sich die Instruktion am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> an, um zu erfahren, wie der Code einer solchen Taste ermittelt werden kann. Beachten Sie, dass dieser Code hexadezimal sein muss.</p>
      <p><b>Bekannte Einschränkung</b>: Diese Funktion kann nicht zwischen zwei Tasten unterscheiden, die den gleichen virtuellen Tastencode haben, wie z. B. Left und NumpadLeft.</p>
  </dd>

  <dt>Modus</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Dieser Parameter wird ignoriert, wenn der Status des Joysticks abgerufen wird.</p>
      <p>Lässt man diesen Parameter weg, wird standardmäßig der logische Zustand der Taste ermittelt. Das ist der Zustand, den das Betriebssystem oder aktive Fenster für diese Taste vermutet, aber nicht unbedingt dem physischen Zustand entsprechen muss.</p>
	    <p>Ansonsten können Sie einen der folgenden Buchstaben angeben:</p>
      <p><strong>P</strong>: Ruft den physischen Zustand ab (z. B. ob der Benutzer eine Taste physisch gedrückt hält). In der Regel stimmt der physische Zustand einer Taste oder Maustaste mit dem logischen Zustand überein. Sobald aber der Tastatur- und/oder Maus-Hook installiert ist, spiegelt der physische Zustand genau wider, ob der Benutzer eine Taste physisch gedrückt hält oder nicht (sofern der Benutzer die Taste nach unten drückte, während das Skript lief). Mit der <a href="KeyHistory.htm">KeyHistory</a>-Funktion oder dem dazugehörigen Menüpunkt können Sie überprüfen, ob Ihr Skript ein Hook benutzt. Fügen Sie die Direktiven <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> und/oder <a href="_InstallMouseHook.htm">#InstallMouseHook</a> in Ihr Skript ein, um die Installation eines Hooks zu erzwingen.</p>
      <p><strong>T</strong>: Ruft den Umschaltzustand ab (nur für umschaltbare Tasten wie <kbd>Feststell</kbd>, <kbd>Num</kbd>, <kbd>Rollen</kbd> und <kbd>Einfg</kbd> von Bedeutung). 1 (True) bedeutet, dass die Taste "An" ist, und 0 (False) bedeutet, dass sie "Aus" ist.</p>
  </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a>, <a href="../Concepts.htm#numbers">Float</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Handelt es sich um eine Tastatur- oder Maustaste, gibt diese Funktion 1 (true) zurück, wenn die Taste unten ist (oder eingeschaltet ist), oder 0 (false), wenn sie oben ist (oder ausgeschaltet ist).</p>
<p>Wenn <em>Tastenname</em> eine Joystick-Achse wie JoyX ist, gibt diese Funktion eine <a href="../Concepts.htm#numbers">Floating-Point-Zahl</a> zwischen 0 und 100 zurück, die die Position des Joysticks als Prozentwert des Bewegungsbereichs dieser Achse repräsentiert. Mit dem <a href="../scripts/JoystickTest.htm">Test-Skript</a> können Sie einen oder mehrere Joysticks analysieren.</p>
<p>Wenn <em>Tastenname</em> JoyPOV ist, gibt diese Funktion einen <a href="../Concepts.htm#numbers">Integer</a> zwischen 0 und 35900 zurück. Die folgenden ungefähren POV-Werte werden von den meisten Joysticks verwendet:</p>
<ul>
    <li>-1: keinen Winkel erkannt</li>
    <li>0: nach vorne gerichtet</li>
    <li>9000 (90 Grad): nach rechts gerichtet</li>
    <li>27000 (270 Grad): nach links gerichtet</li>
    <li>18000 (180 Grad): nach hinten gerichtet</li>
</ul>

<h2>Bemerkungen</h2>
<p>Wenn es darum geht, auf eine Änderung des Tastenzustands zu warten, ist <a href="KeyWait.htm">KeyWait</a> besser geeignet als eine GetKeyState-Schleife.</p>
<p>Es kann vorkommen, dass Betriebssysteme mit ungewöhnlichen Tastaturtreibern den Zustand ihrer Tasten, insbesondere der Umschaltzustand von Tasten wie <kbd>Feststell</kbd>, nur langsam aktualisieren. Wenn Sie also vorhaben, direkt danach den Zustand von so einer Taste zu überprüfen, wäre es ratsam, ein <a href="Sleep.htm">Sleep</a> davorzusetzen, um dem Betriebssystem genug Zeit zum Aktualisieren des Tastenzustands zu verschaffen.</p>
<p>Beispiele zur Verwendung von GetKeyState mit einem Joystick finden Sie unter <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Skript</a>.</p>
<h2>Siehe auch</h2>
<p><a href="GetKeyVK.htm">GetKeyVK</a>, <a href="GetKeySC.htm">GetKeySC</a>, <a href="GetKeyName.htm">GetKeyName</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Tastenliste</a>, <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a></p>

<h2>Beispiele</h2>

<h3 id="ex1">Beispiel #1: Verschiedenes</h3>
<pre class="NoIndent">Status := GetKeyState("RButton")  <em>; Rechte Maustaste.</em>
Status := GetKeyState("Joy2")  <em>; Die zweite Taste des ersten Joysticks.</em>

if GetKeyState("Shift")
    MsgBox "Mindestens eine UMSCHALT-Taste ist unten."
else
    MsgBox "Keine UMSCHALT-Taste unten."

Status := GetKeyState("CapsLock", "T")  <em>; True, wenn FESTSTELL-Taste AN ist, ansonsten False.</em></pre>

<h3 id="ex2">Beispiel #2: Neubelegung</h3>
<p>(Dieses Beispiel dient nur zur Veranschaulichung, da es einfacher wäre, auf das interne <a href="../misc/Remap.htm">Neubelegungs-Feature</a> zurückzugreifen.) Im folgenden Hotkey wird die Maustaste gedrückt gehalten, während NumpadAdd unten ist, was NumpadAdd effektiv zu einer Maustaste macht. Diese Methode kann auch genutzt werden, um eine Aktion zu wiederholen, während der Benutzer eine Taste gedrückt hält:</p>
<pre class="NoIndent">*NumpadAdd::
MouseClick "left",,, 1, 0, "D"  <em>; Hält die linke Maustaste gedrückt.</em>
Loop
{
    Sleep 10
    if !GetKeyState("NumpadAdd", "P")  <em>; Die Taste wurde losgelassen, also Schleife verlassen.</em>
        break
    <em>; ... fügen Sie hier beliebig andere Aktionen ein, die wiederholt werden sollen.</em>
}
MouseClick "left",,, 1, 0, "U"  <em>; Lässt die Maustaste los.</em>
return</pre>

<h3 id="ex3">Beispiel #3</h3>
<p>Macht das Verhalten einer Joystick-Taste abhängig von der Achsenposition des Joysticks:</p>
<pre class="NoIndent">joy2:: 
joyx := GetKeyState("JoyX") 
if joyx &gt; 75 
    MsgBox "Aktion #1 (Taste gedrückt, während Joystick nach rechts bewegt wurde)."
else if joyx &lt; 25 
    MsgBox "Aktion #2 (Taste gedrückt, während Joystick nach links bewegt wurde)."
else
    MsgBox "Aktion #3 (Taste gedrückt, während Joystick horizontal zentriert wurde)."
return</pre>

<h3 id="ex-other">Weitere Beispiele</h3>
<p>Weitere Beispiele finden Sie unter <a href="../misc/RemapJoystick.htm">Joystick-Neubelegung</a> und <a href="../scripts/JoystickMouse.htm">Joystick-Zu-Maus-Skript</a>.</p>

</body>
</html>
