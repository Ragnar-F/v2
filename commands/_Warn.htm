<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#Warn - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content='Die #Warn-Direktive aktiviert oder deaktiviert Warnungen, die angezeigt werden, wenn Fehler wie Schreibfehler oder fehlende "globale" Deklarationen erkannt wurden.' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>#Warn</h1>

<p>Aktiviert oder deaktiviert Warnungen, die angezeigt werden, wenn Fehler wie Schreibfehler oder fehlende "globale" Deklarationen erkannt wurden.</p>

<pre class="Syntax"><span class="func">#Warn</span> <span class="optional">Warnungstyp, Warnungsmodus</span></pre>

<h2>Parameter</h2>
<dl>

  <dt>Warnungstyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>

    <p>Die Art der Warnung, die aktiviert oder deaktiviert werden soll. Lässt man diesen Parameter weg, wird standardmäßig <i>All</i> verwendet.</p>
    <p id="UseUnset"><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnt, wenn eine Variable gelesen wird, die vorher weder einen Wert zugewiesen bekommen hat noch via <a href="VarSetCapacity.htm">VarSetCapacity</a> initialisiert wurde. Wenn die Variable absichtlich leer sein soll, weist man ihr eine leere Zeichenkette zu, um diese Warnung zu unterdrücken.</p>
    <p><a href="IsSet.htm">IsSet</a> kann genutzt werden, um zu prüfen, ob eine Variable gesetzt wurde, ohne eine Warnung auszulösen, unabhängig davon, ob die Warnung aktiviert ist.</p>
    <p>Im MsgBox-Modus wird nur eine Warnung für jede globale Variable angezeigt, oder für jede lokale Variable pro Funktionsaufruf. Dies wird erreicht, indem die Variable beim Anzeigen der Warnung initialisiert wird, so dass auch nachfolgende Aufrufe von <a href="IsSet.htm">IsSet</a> betroffen sind.</p>
    <p>Dieser Warnungstyp behandelt lokale und globale Variablen getrennt voneinander, da es eher unüblich ist, globale Variablen wegen ihrer persistenten und skriptweiten Art vorab zu initialisieren. Auf diese Weise wird die Möglichkeit bereitgestellt, diesen Warnungstyp für lokalen Variablen zu aktivieren und für globale Variablen zu deaktivieren.</p>
    <pre>#Warn
<em>;y := ""  ; Dies würde die Warnung unterdrücken.</em>
x := y    <em>; y hat keinen Wert zugewiesen bekommen.</em></pre>
    <p id="LocalSameAsGlobal"><strong>LocalSameAsGlobal</strong>: Warnt vor dem Ausführen des Skripts, wenn <em>undeklarierte</em> lokale Variablen den gleichen Namen haben wie globale Variablen. Diese Warnung soll Fehler vermeiden, die auftreten können, wenn man vergessen hat, eine globale Variable innerhalb einer Funktion vor dem Zugriffsversuch zu deklarieren. Wenn die globale Variable tatsächlich lokal sein soll, kann die Warnung mit einer Deklaration wie <code>local x</code> oder <code>static y</code> unterdrückt werden. Diese Warnung wird niemals für Variablen angezeigt, die sich innerhalb einer <a href="../Functions.htm#ForceLocal">Force-Local</a>-Funktion befinden.</p>
    <pre>#Warn
g := 1
ShowG() {       <em>; Die Warnung wird sogar angezeigt, wenn die Funktion nicht aufgerufen wird.</em>
    <em>;global g   ; &lt;-- Dies ist erforderlich, um auf die globale Variable zuzugreifen.</em>
    MsgBox g  <em>; Ohne Deklaration ist "g" eine leere lokale Variable.</em>
}</pre>
    <p id="ClassOverwrite"><strong>ClassOverwrite</strong>: Warnt vor dem Ausführen des Skripts, wenn Zuweisungen auf eine Klassenvariable angewendet werden. Zum Beispiel wird <code>box := Box.new()</code> eine Warnung anzeigen, wenn <em>Box</em> eine Klasse ist, da dies die Klasse überschreiben würde (die als superglobal definierte <em>Box</em>-Variable). Warnungen werden auch für Ausgabevariablen von internen Funktionen angezeigt, nicht aber für ByRef-Parameter. Für verschachtelte Klassen oder dynamische Variablenreferenzen werden keine Warnungen angezeigt.</p>
    <p><strong>All</strong>: Wendet den angegebenen <em>Warnungsmodus</em> auf alle unterstützten Warnungstypen an.</p>
  </dd>

  <dt>Warnungsmodus</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>

    <p>Ein Wert, der angibt, wie Warnungen übermittelt werden sollen. Lässt man diesen Parameter weg, wird standardmäßig <em>MsgBox</em> verwendet.</p>
    <p><strong>MsgBox</strong>: Zeigt ein Mitteilungsfenster an, das die Warnung beschreibt. Beachten Sie, dass, sobald das Fenster geschlossen wird, das Skript wie gewohnt weiterläuft.</p>
    <p><strong>StdOut</strong>: Sendet eine Beschreibung der Warnung zur Standardausgabe (<em>stdout</em>), einschließlich Dateiname und Zeilennummer. So können umfangreiche Texteditoren wie SciTE die Warnungen abfangen, ohne das Skript zu unterbrechen - der Benutzer kann später den Ausgabebereich des Texteditors nutzen, um auf eine fehlerhafte Zeile zu springen.</p>
    <p><strong>OutputDebug</strong>: Sendet eine Beschreibung der Warnung zum Debugger, um sie anzuzeigen. Wenn kein Debugger aktiv ist, hat dieser Modus keine Auswirkung. Weitere Details finden Sie unter <a href="OutputDebug.htm">OutputDebug</a>.</p>
    <p><strong>Off</strong>: Deaktiviert alle Warnungen für den angegebenen <em>Warnungstyp</em>.</p>
  </dd>

</dl>
<h2>Bemerkungen</h2>
	<p>Standardmäßig sind alle Warnungen deaktiviert.</p>
	<p>Warnungen können weder aktiviert noch deaktiviert werden, während das Skript läuft; die Einstellungen werden beim Laden des Skripts festgelegt. Folglich ist die Position der Direktive innerhalb des Skripts ohne Bedeutung (und kann wie alle anderen Direktiven nicht bedingt ausgeführt werden).</p>
	<p>Die Anordnung der #Warn-Direktiven ist allerdings entscheidend: die letzte Direktive, die eine bestimmte Warnung setzt, bestimmt den Modus dieser Warnung. Die zwei unteren Anweisungen beispielsweise haben den kombinierten Effekt, dass alle Warnungen außer UseUnsetGlobal aktiviert werden:</p>
<pre>#Warn All
#Warn UseUnsetGlobal, Off
</pre>
<h2>Siehe auch</h2>
<p><a href="../Functions.htm#Local">Lokale und globale Variablen</a></p>
<h2>Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>
#Warn All, Off                    <em>; Deaktiviert alle Warnungen.  Das ist der voreingestellte Zustand.</em>
#Warn                             <em>; Aktiviert alle Warnungstypen; zeigt alle Warnungen in einem Mitteilungsfenster an.</em>
#Warn UseUnsetLocal, OutputDebug  <em>; Warnt bei einer leeren lokalen Variable; sendet Warnung zum OutputDebug.</em>
</pre>
</div>

</body>
</html>
