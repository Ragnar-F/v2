<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#Warn - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content='Die #Warn-Direktive aktiviert oder deaktiviert bestimmte Warnungen, die auf mögliche Fehler vonseiten des Programmierers hinweisen, wie z. B. Schreibfehler oder fehlende "globale" Deklarationen.' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>#Warn</h1>

<p>Aktiviert oder deaktiviert bestimmte Warnungen, die auf mögliche Fehler vonseiten des Programmierers hinweisen, wie z. B. Schreibfehler oder fehlende "globale" Deklarationen.</p>

<pre class="Syntax"><span class="func">#Warn</span> <span class="optional">WarnungTyp, WarnungModus</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>WarnungTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>

    <p>Die Art der Warnung, die aktiviert oder deaktiviert werden soll. Lässt man diesen Parameter weg, wird standardmäßig <i>All</i> verwendet.</p>
    <p class="warning"><strong>Hinweis:</strong> Die UseUnset-Warnungen sind standardmäßig aktiviert. Diese zu deaktivieren wird nicht empfohlen, da es Pläne gibt, die Option zu entfernen und die Warnung durch einen Fehler zu ersetzen.</p>
    <p id="UseUnset"><strong>UseUnsetLocal</strong> oder <strong>UseUnsetGlobal</strong>: Warnt, wenn eine Variable gelesen wird, die vorher weder einen Wert zugewiesen bekommen hat noch via <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a> initialisiert wurde. Wenn die Variable absichtlich leer sein soll, weisen Sie ihr eine leere Zeichenkette zu, um diese Warnung zu unterdrücken.</p>
    <p><a href="IsSet.htm">IsSet</a> kann genutzt werden, um zu prüfen, ob eine Variable gesetzt wurde, ohne eine Warnung auszulösen, unabhängig davon, ob die Warnung aktiviert ist.</p>
    <p>Im MsgBox-Modus wird nur eine Warnung für jede globale Variable angezeigt, oder für jede lokale Variable pro Funktionsaufruf. Dies wird erreicht, indem die Variable beim Anzeigen der Warnung initialisiert wird, so dass auch nachfolgende Aufrufe von <a href="IsSet.htm">IsSet</a> betroffen sind.</p>
    <p>Dieser Warnungstyp behandelt lokale und globale Variablen getrennt voneinander, da es eher unüblich ist, globale Variablen wegen ihrer persistenten und skriptweiten Art vorab zu initialisieren. Auf diese Weise wird die Möglichkeit bereitgestellt, diesen Warnungstyp für lokalen Variablen zu aktivieren und für globale Variablen zu deaktivieren.</p>
    <pre>#Warn
<em>;y := ""  ; Dies würde die Warnung unterdrücken.</em>
x := y    <em>; y hat keinen Wert zugewiesen bekommen.</em></pre>
    <p id="VarUnset"><strong>VarUnset</strong>: Warnt vor dem Ausführen des Skripts, wenn die jeweils erste Referenz zu einer Variable nie auf eine der folgenden Arten verwendet wird:</p>
    <ul>
      <li>Als Ziel einer direkten, nicht-dynamischen Zuweisung, wie z. B. <code>MeineVar := ""</code>.</li>
      <li>Übergabe an einen Ausgabe- oder ByRef-Parameter in einem nicht-dynamischen Funktionsaufruf.</li>
      <li>Übergabe an IsSet in einem nicht-dynamischen Funktionsaufruf. Zum Beispiel wird ein Skript, das <code>IsSet(MeineBibl_Global)</code> enthält, nicht vor weiteren Referenzen zur gleichen Variable warnen, aber möglicherweise vor anderen Variablen mit dem Namen <code>MeineBibl_Global</code>.</li>
      <li>Übergabe an ein Parameter eines dynamischen Funktionsaufrufs oder Methodenaufrufs (unabhängig davon, ob es sich um ByRef handelt oder nicht, da dies nicht beim Laden des Skripts ermittelt werden kann).</li>
    </ul>
    <p class="warning"><strong>Bekannte Einschränkung:</strong> Obwohl kurzschlussfähige Operatoren wie <code>&amp;&amp;</code>, <code>||</code> und ternäre Operatoren eine Variablenreferenz für eine Zuweisung oder einen ByRef-Parameter erzeugen können, wird derzeit nur die rechte Verzweigung als zugewiesen identifiziert. <code>MouseGetPos(b ? x1 : x2)</code> beispielsweise kann lediglich <code>x2</code> als zugewiesen markieren.</p>
    <p id="LocalSameAsGlobal"><strong>LocalSameAsGlobal</strong>: Zeigt vor dem Ausführen des Skripts eine Warnung an, wenn <em>undeklarierte</em> lokale Variablen den gleichen Namen haben wie globale Variablen. Diese Warnung soll Fehler vermeiden, die auftreten können, wenn vergessen wurde, eine globale Variable innerhalb einer Funktion vor dem Zugriffsversuch zu deklarieren. Wenn die globale Variable tatsächlich lokal sein soll, kann die Warnung mit einer Deklaration wie <code>local x</code> oder <code>static y</code> unterdrückt werden. Diese Warnung wird niemals für Variablen angezeigt, die sich innerhalb einer <a href="../Functions.htm#ForceLocal">Force-Local</a>-Funktion befinden.</p>
    <p>Diese Warnung ist standardmäßig deaktiviert.</p>
    <pre>#Warn
g := 1
ShowG() {       <em>; Die Warnung wird sogar angezeigt, wenn die Funktion nicht aufgerufen wird.</em>
    <em>;global g   ; &lt;-- Dies ist erforderlich, um auf die globale Variable zuzugreifen.</em>
    MsgBox g  <em>; Ohne Deklaration ist "g" eine leere lokale Variable.</em>
}</pre>
    <p id="Unreachable"><strong>Unreachable</strong>: Warnt vor dem Ausführen des Skripts, wenn unmittelbar nach einem <code>Return</code>, <code>Break</code>, <code>Continue</code>, <code>Throw</code> oder <code>Goto</code> eine Zeile auf gleicher Verschachtelungsebene erfolgt, es sei denn, diese Zeile ist das Ziel eines Labels. Zeilen dieser Art werden niemals ausgeführt.</p>
    <p>Wenn der Code nicht erreichbar sein soll - z. B. wenn ein <code>return</code> verwendet wurde, um einen Codeblock vorübergehend zu deaktivieren, oder wenn ein Hotkey oder Hotstring durch Auskommentieren vorübergehend deaktiviert wurde - sollten Sie in Erwägung ziehen, den nicht erreichbaren Code ebenfalls auszukommentieren. Sie können die Warnung auch unterdrücken, indem Sie ein <a href="../misc/Labels.htm">Label</a> über der ersten nicht erreichbaren Zeile definieren.</p>
    <p><strong>All</strong>: Wendet den angegebenen <em>WarnungModus</em> auf alle unterstützten Warnungstypen an.</p>
  </dd>

  <dt>WarnungModus</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>

    <p>Ein Wert, der angibt, wie Warnungen übermittelt werden sollen. Lässt man diesen Parameter weg, wird standardmäßig <em>MsgBox</em> verwendet.</p>
    <p><strong>MsgBox</strong>: Zeigt ein Mitteilungsfenster an, das die Warnung beschreibt. Beachten Sie, dass, sobald das Fenster geschlossen wird, das Skript wie gewohnt weiterläuft.</p>
    <p><strong>StdOut</strong>: Sendet eine Beschreibung der Warnung zur Standardausgabe (<em>stdout</em>), einschließlich Dateiname und Zeilennummer. So können umfangreiche Texteditoren wie SciTE die Warnungen abfangen, ohne das Skript zu unterbrechen - der Benutzer kann später den Ausgabebereich des Texteditors nutzen, um auf eine fehlerhafte Zeile zu springen.</p>
    <p><strong>OutputDebug</strong>: Sendet eine Beschreibung der Warnung zum Debugger, um sie anzuzeigen. Wenn kein Debugger aktiv ist, hat dieser Modus keine Auswirkung. Weitere Details finden Sie unter <a href="OutputDebug.htm">OutputDebug</a>.</p>
    <p><strong>Off</strong>: Deaktiviert alle Warnungen für den angegebenen <em>WarnungTyp</em>.</p>
  </dd>

</dl>
<h2 id="Remarks">Bemerkungen</h2>
	<p>Standardmäßig sind alle Warnungen aktiviert und verwenden den MsgBox-Modus, mit Ausnahme der LocalSameAsGlobal-Warnung, die deaktiviert ist.</p>
	<p>Warnungen können weder aktiviert noch deaktiviert werden, während das Skript läuft; die Einstellungen werden beim Laden des Skripts festgelegt. Folglich ist die Position der Direktive innerhalb des Skripts ohne Bedeutung (und kann wie alle anderen Direktiven nicht bedingt ausgeführt werden).</p>
	<p>Die Anordnung der #Warn-Direktiven ist allerdings entscheidend: die letzte Direktive, die eine bestimmte Warnung setzt, bestimmt den Modus dieser Warnung. Die zwei unteren Anweisungen beispielsweise haben den kombinierten Effekt, dass alle Warnungen außer UseUnsetGlobal aktiviert werden:</p>
<pre>#Warn All
#Warn UseUnsetGlobal, Off
</pre>
<h2 id="Related">Siehe auch</h2>
<p><a href="../Functions.htm#Local">Lokale und globale Variablen</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExAllOff">
<p><a href="#ExAllOff">#1</a>: Deaktiviert alle Warnungen. Nicht empfohlen.</p>
<pre>#Warn All, Off</pre>
</div>

<div class="ex" id="ExOmitted">
<p><a href="#ExOmitted">#2</a>: Aktiviert alle Warnungstypen und zeigt alle Warnungen in einem Mitteilungsfenster an.</p>
<pre>#Warn</pre>
</div>

<div class="ex" id="ExUseUnsetLocalOutputDebug">
<p><a href="#ExUseUnsetLocalOutputDebug">#3</a>: Warnt, wenn eine lokale Variable verwendet wird, bevor sie gesetzt wurde, und sendet alle Warnungen zum OutputDebug.</p>
<pre>#Warn UseUnsetLocal, OutputDebug</pre>
</div>

</body>
</html>
