<!DOCTYPE HTML>
<html>
<head>
<title>Send/SendRaw/SendInput/SendPlay/SendEvent: Tasten &amp; Klicks senden</title>
<meta name="description" content="Senden Sie Tastatureingaben und Mausklicks an einem beliebigen Fenster mit diesem kostenlosen Makro-Programm. SendInput ist generell die schnellste und zuverlässigste Methode.">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<style type="text/css">
<!--
.red {color: #FF0000; font-weight: bold;}
-->
</style>
</head>
<body>

<h1>Send / SendRaw / SendInput / SendPlay / SendEvent: Tasten &amp; Klicks senden</h1>

<p>Sendet simulierte Tastatureingaben und Mausklicks zum <a href="WinActivate.htm">aktiven</a> Fenster.</p>

<pre class="Syntax"><span class="func">Send</span> Tasten
<span class="func">SendRaw</span> Tasten
<span class="func">SendInput</span> Tasten
<span class="func">SendPlay</span> Tasten
<span class="func">SendEvent</span> Tasten</pre>
<h3>Parameter</h3>
<dl>

  <dt>Tasten</dt>
  <dd><p>Eine Reihe von Tasten, die gesendet werden soll.</p></dd>

</dl>

<p id="SendRaw"><strong>Raw-Modus</strong> - <em>SendRaw</em> oder <a href="#Raw">{Raw}</a>: Die Zeichen <code>^+!#{}</code> werden als direkt geschriebener Text interpretiert, anstatt z. B. <code>{Enter}</code> in ENTER, <code>^c</code> in STRG+C usw. zu übersetzen. Um den Raw-Modus bei SendInput, SendPlay oder SendEvent zu verwenden, gibt man <a href="#Raw">{Raw}</a> als erstes Element in der Zeichenkette an; zum Beispiel: <code>SendInput "{Raw}abc"</code>.</p>
<p>Der <em>Raw-Modus</em> hat keinen Einfluss auf die Interpretation von <a href="../misc/EscapeChar.htm">Escapesequenzen</a> und <a href="../Variables.htm#Expressions">Ausdrücken</a>. Zum Beispiel würde <code>SendRaw "``100`%"</code> die Zeichenkette <code>`100%</code> senden. Bei <a href="ControlSend.htm">ControlSend</a> müssen zudem direkt geschriebene Kommas mit einem Escapezeichen versehen werden (<code>`,</code>).</p>
<p id="specialchars"><strong>Normal-Modus</strong>: Wenn der Raw-Modus nicht aktiv ist, haben folgende Symbole eine besondere Bedeutung: <code>!+^#{}</code></p>
<p>Die Modifikatoren <code>!+^#</code> beeinflussen nur die direkt darauffolgende Taste. Um die entsprechende Modifikatortaste separat zu senden, umschließt man den Tastennamen mit geschweiften Klammern. Um eine Taste einfach nur zu drücken (gedrückt halten) oder loszulassen, muss nach dem Tastennamen das Wort "down" oder "up" erfolgen, wie unten gezeigt.</p>
<style>
#modifierkeys td:not(:last-child) { white-space: nowrap; text-align: center }
</style>
<table id="modifierkeys" class="info">
  <tr>
    <th>Symbol</th>
    <th>Taste</th>
    <th>Drücken</th>
    <th>Loslassen</th>
    <th>Beispiele</th>
  </tr>
  <tr>
    <td>!</td>
    <td>{Alt}</td>
    <td>{Alt down}</td>
    <td>{Alt up}</td>
    <td><code>Send "!a"</code> drückt ALT+a</td>
  </tr>
  <tr>
    <td>+</td>
    <td>{Shift}</td>
    <td>{Shift down}</td>
    <td>{Shift up}</td>
    <td><code>Send "+abC"</code> sendet den Text "AbC"<br>
    <code>Send "!+a"</code> drückt ALT+UMSCHALT+a</td>
  </tr>
  <tr>
    <td>^</td>
    <td>{Ctrl}</td>
    <td>{Ctrl down}</td>
    <td>{Ctrl up}</td>
    <td><code>Send "^{Home}"</code> drückt STRG+POS1</td>
  </tr>
  <tr>
    <td>#</td>
    <td>{LWin}<br>{RWin}</td>
    <td>{LWin down}<br>{RWin down}</td>
    <td>{LWin up}<br>{RWin up}</td>
    <td><code>Send "#e"</code> hält die WIN-Taste gedrückt und drückt dann den Buchstaben "e"</td>
  </tr>
  <tr>
    <th>Symbol</th>
    <th colspan="4">Bedeutung</th>
  </tr>
  <tr>
    <td>{ }</td>
    <td colspan="4" style="white-space: normal; text-align: left">Mit geschweiften Klammern werden <a href="#keynames">Tastennamen und andere Optionen</a> umschlossen, um spezielle Zeichen als direkt geschriebenen Text zu senden. Zum Beispiel wäre <code>{Tab}</code> die TAB-Taste und <code>{!}</code> ein direkt geschriebenes Ausrufezeichen.</td>
  </tr>
</table>
<p><strong>Hinweis</strong>: Großbuchstaben werden durch Senden der UMSCHALT-Taste erzeugt, daher würde z. B. <code>A</code> in einigen Programmen eine andere Wirkung als <code>a</code> erzielen. Zum Beispiel würde <code>!A</code> ALT+UMSCHALT+A und <code>!a</code> ALT+a drücken. Im Zweifelsfall sollte man immer Kleinbuchstaben verwenden.</p>
<p><br>
<strong id="SendInput">SendInput</strong> und <strong id="SendPlay">SendPlay</strong>: SendInput und SendPlay verwenden die gleiche Syntax wie Send, allerdings sind sie in der Regel schneller und zuverlässiger. Desweiteren puffern sie alle physischen Tastatur- oder Mausaktivitäten während der Send-Funktion, um das Vermischen der Benutzereingaben mit den gesendeten Eingaben zu verhindern. Standardmäßig ist <em>Send</em> das Synonym für <em>SendEvent</em>; allerdings kann es via <a href="SendMode.htm">SendMode</a> zum Synonym für SendEvent oder <a href="#SendPlayDetail">SendPlay</a> gemacht werden. Um mehr Details über jeden Modus zu erfahren, siehe <a href="#SendInputDetail">SendInput</a> und <a href="#SendPlayDetail">SendPlay</a>.</p>
<p id="SendEvent"><strong>SendEvent</strong>: SendEvent sendet Tastatureingaben mithilfe der keybd_event-Funktion von Windows (siehe MSDN für Details). Die Sendegeschwindigkeit von Tastatureingaben wird mit <a href="SetKeyDelay.htm">SetKeyDelay</a> bestimmt. Verwenden Sie <a href="SendMode.htm">SendMode</a>, um Send zum Synonym für SendInput oder SendPlay zu machen.</p>
<p id="keynames"><strong>Tastennamen</strong>: Die folgende Tabelle listet alle speziellen Tasten auf, die gesendet werden können (jeder Tastenname muss mit geschweiften Klammern umschlossen werden):</p>
<table class="info">
  <tr>
    <th>Tastenname</th>
    <th>Resultierende Tastatureingabe</th>
  </tr>
  <tr>
    <td>{F1} - {F24}</td>
    <td>Funktionstasten. Zum Beispiel: {F12} ist die F12-Taste.</td>
  </tr>
  <tr>
    <td>{!}</td>
    <td>!</td>
  </tr>
  <tr>
    <td>{#}</td>
    <td>#</td>
  </tr>
  <tr>
    <td>{+}</td>
    <td>+</td>
  </tr>
  <tr>
    <td>{^}</td>
    <td>^</td>
  </tr>
  <tr>
    <td>{{}</td>
    <td>{</td>
  </tr>
  <tr>
    <td>{}}</td>
    <td>}</td>
  </tr>
  <tr>
    <td>{Enter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td>{Escape} oder {Esc}</td>
    <td>ESC-Taste</td>
  </tr>
  <tr>
    <td>{Space}</td>
    <td>LEERTASTE (nur für Leerzeichen notwendig, die am Anfang oder Ende der Zeichenkette vorkommen - Leerzeichen in der Mitte können direkt geschrieben sein)</td>
  </tr>
  <tr>
    <td>{Tab}</td>
    <td>TAB-Taste</td>
  </tr>
  <tr>
    <td>{Backspace} oder {BS}</td>
    <td>RÜCKTASTE</td>
  </tr>
  <tr>
    <td>{Delete} oder {Del}</td>
    <td>ENTF-Taste</td>
  </tr>
  <tr>
    <td>{Insert} oder {Ins}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td>{Up}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td>{Down}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td>{Left}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td>{Right}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td>{Home}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td>{End}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td>{PgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td>{PgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{CapsLock}</td>
    <td>FESTSTELL-Taste (in Win 2k/XP ist <a href="SetNumScrollCapsLockState.htm">SetCapsLockState</a> zuverlässiger). Das Senden von {CapsLock} benötigt möglicherweise vorher <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode "Off"</a>.</td>
  </tr>
  <tr>
    <td>{ScrollLock}</td>
    <td>ROLLEN-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetScrollLockState</a>)</td>
  </tr>
  <tr>
    <td>{NumLock}</td>
    <td>NUM-Taste (siehe auch: <a href="SetNumScrollCapsLockState.htm">SetNumLockState</a>)</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{Control} oder {Ctrl}</td>
    <td>STRG-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LControl} oder {LCtrl}</td>
    <td>Linke STRG-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RControl} oder {RCtrl}</td>
    <td>Rechte STRG-Taste</td>
  </tr>
  <tr>
    <td>{Control Down} oder {Ctrl Down}</td>
    <td>Hält die STRG-Taste gedrückt, bis {Ctrl Up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, nutzt man {RCtrl Down} und {RCtrl Up}.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{Alt}</td>
    <td>ALT (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LAlt}</td>
    <td>Linke ALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RAlt}</td>
    <td>ALTGR- oder rechte ALT-Taste, abhängig von der Tastaturbelegung.</td>
  </tr>
  <tr>
    <td>{Alt Down}</td>
    <td>Hält die ALT-Taste gedrückt, bis {Alt Up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, nutzt man {RAlt Down} und {RAlt Up}.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{Shift}</td>
    <td>UMSCHALT-Taste (technische Info: sendet die neutrale virtuelle Taste, aber den linken Scancode)</td>
  </tr>
  <tr>
    <td>{LShift}</td>
    <td>Linke UMSCHALT-Taste (technische Info: sendet nicht die neutrale, sondern die linke virtuelle Taste)</td>
  </tr>
  <tr>
    <td>{RShift}</td>
    <td>Rechte UMSCHALT-Taste</td>
  </tr>
  <tr>
    <td>{Shift Down}</td>
    <td>Hält die UMSCHALT-Taste gedrückt, bis {Shift Up} gesendet wird. Um stattdessen die linke oder rechte Taste gedrückt zu halten, nutzt man {RShift Down} und {RShift Up}.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{LWin}</td>
    <td>Linke WIN-Taste</td>
  </tr>
  <tr>
    <td>{RWin}</td>
    <td>Rechte WIN-Taste</td>
  </tr>
  <tr>
    <td>{LWin Down}</td>
    <td>Hält die linke WIN-Taste gedrückt, bis {LWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <td>{RWin Down}</td>
    <td>Hält die rechte WIN-Taste gedrückt, bis {RWin Up} gesendet wird.</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{AppsKey}</td>
    <td>MENÜ-Taste (öffnet das Rechtsklick- oder Kontextmenü)</td>
  </tr>
  <tr>
    <td>{Sleep}</td>
    <td>SLEEP-Taste (auf den meisten Tastaturen nicht vorhanden).</td>
  </tr>
  <tr id="asc">
    <td>{ASC nnnnn}</td>
    <td><p>Sendet eine ALT+nnnnn-Tastenkombination per Ziffernblock, um Sonderzeichen zu erzeugen, die auf der Tastatur normalerweise nicht vorhanden sind. Um ASCII-Zeichen zu generieren, gibt man eine Nummer zwischen 1 und 255 an. Um ANSI-Zeichen zu generieren (Standard in den meisten Sprachen), gibt man zuerst eine 0 an und danach eine Nummer zwischen 128 und 255, zum Beispiel {Asc 0133}.</p>
    <p>Um Unicode-Zeichen zu generieren, gibt man eine Nummer zwischen 256 und 65535 an (ohne 0 davor). Allerdings wird das nicht von jeder Anwendung unterstützt. Alternativen dazu finden Sie im nächsten Abschnitt.</p></td>
  </tr>
  <tr id="Unicode">
    <td><span id="sendu"></span>{U+nnnn}</td>
    <td><p>Sendet ein Unicode-Zeichen - <em>nnnn</em> ist der hexadezimale Wert des Zeichens ohne 0x-Präfix. Diese Methode ist üblicherweise nicht notwendig, weil Send und ControlSend automatisch Unicode-Text unterstützt.</p>
    <p>Wenn das Zeichen keinem virtuellen Tastencode zugeordnet ist, wird <a href="https://msdn.microsoft.com/de-de/library/ms646310">SendInput()</a> oder <a href="https://msdn.microsoft.com/de-de/library/ms646276">WM_CHAR</a> verwendet, um das Zeichen zu senden, und der aktuelle Send-Modus ignoriert.</p></td>
  </tr>
  <tr id="vk">
    <td><p>{vkXX}<br>
      
      {scYYY}<br>
    
    {vkXXscYYY}</p></td>
    <td><p>Sendet eine Tastatureingabe, die die virtuelle Taste XX und den Scancode YYY hat. Zum Beispiel: <code>Send "{vkFFsc159}"</code>. Wenn man den sc- oder vk-Bereich weglässt, wird der am besten geeignete Wert an seiner Stelle gesendet.</p>
      <p>Die Werte für XX und YYY sind hexadezimal und können üblicherweise über den Menüpunkt <a href="KeyHistory.htm">View-&gt; Key history</a> im Hauptfenster abgerufen werden. Siehe auch: <a href="../KeyList.htm#SpecialKeys">Sondertasten</a></p></td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{Numpad0} - {Numpad9}</td>
    <td>Ziffernblocktasten (wenn Numlock eingeschaltet ist). Zum Beispiel: {Numpad5} ist die Zahl 5.</td>
  </tr>
  <tr>
    <td>{NumpadDot}</td>
    <td>, (wenn Numlock eingeschaltet ist)</td>
  </tr>
  <tr>
    <td>{NumpadEnter}</td>
    <td>ENTER-Taste</td>
  </tr>
  <tr>
    <td>{NumpadMult}</td>
    <td>*</td>
  </tr>
  <tr>
    <td>{NumpadDiv}</td>
    <td>/</td>
  </tr>
  <tr>
    <td>{NumpadAdd}</td>
    <td>+</td>
  </tr>
  <tr>
    <td>{NumpadSub}</td>
    <td>-</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{NumpadDel}</td>
    <td>ENTF-Taste (diese und die nachfolgenden Ziffernblocktasten sind nur verwendbar, wenn Numlock ausgeschaltet ist)</td>
  </tr>
  <tr>
    <td>{NumpadIns}</td>
    <td>EINFG-Taste</td>
  </tr>
  <tr>
    <td>{NumpadClear}</td>
    <td>Funktionslose Taste</td>
  </tr>
  <tr>
    <td>{NumpadUp}</td>
    <td>NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td>{NumpadDown}</td>
    <td>NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <td>{NumpadLeft}</td>
    <td>NACH-LINKS-Taste</td>
  </tr>
  <tr>
    <td>{NumpadRight}</td>
    <td>NACH-RECHTS-Taste</td>
  </tr>
  <tr>
    <td>{NumpadHome}</td>
    <td>POS1-Taste</td>
  </tr>
  <tr>
    <td>{NumpadEnd}</td>
    <td>ENDE-Taste</td>
  </tr>
  <tr>
    <td>{NumpadPgUp}</td>
    <td>BILD-NACH-OBEN-Taste</td>
  </tr>
  <tr>
    <td>{NumpadPgDn}</td>
    <td>BILD-NACH-UNTEN-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{Browser_Back}</td>
    <td>Browser "Zurück"</td>
  </tr>
  <tr>
    <td>{Browser_Forward}</td>
    <td>Browser "Vorwärts"</td>
  </tr>
  <tr>
    <td>{Browser_Refresh}</td>
    <td>Browser "Aktualisieren"</td>
  </tr>
  <tr>
    <td>{Browser_Stop}</td>
    <td>Browser "Stopp"</td>
  </tr>
  <tr>
    <td>{Browser_Search}</td>
    <td>Browser "Suchen"</td>
  </tr>
  <tr>
    <td>{Browser_Favorites}</td>
    <td>Browser "Favoriten"</td>
  </tr>
  <tr>
    <td>{Browser_Home}</td>
    <td>Startet den Browser und öffnet die Startseite</td>
  </tr>
  <tr>
    <td>{Volume_Mute}</td>
    <td>Gesamtlautstärke stummschalten bzw. Stummschaltung aufheben. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a> "+1", , "mute"</code>.</td>
  </tr>
  <tr>
    <td>{Volume_Down}</td>
    <td>Gesamtlautstärke leiser machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a> "-5"</code>.</td>
  </tr>
  <tr>
    <td>{Volume_Up}</td>
    <td>Gesamtlautstärke lauter machen. Normalerweise das gleiche wie <code><a href="SoundSet.htm">SoundSet</a> "+5"</code>.</td>
  </tr>
  <tr>
    <td>{Media_Next}</td>
    <td>Media Player "Nächster Track"</td>
  </tr>
  <tr>
    <td>{Media_Prev}</td>
    <td>Media Player "Vorheriger Track"</td>
  </tr>
  <tr>
    <td>{Media_Stop}</td>
    <td>Media Player "Stopp"</td>
  </tr>
  <tr>
    <td>{Media_Play_Pause}</td>
    <td>Media Player "Wiedergabe/Anhalten"</td>
  </tr>
  <tr>
    <td>{Launch_Mail}</td>
    <td>E-Mail-Programm öffnen</td>
  </tr>
  <tr>
    <td>{Launch_Media}</td>
    <td>Media Player öffnen</td>
  </tr>
  <tr>
    <td>{Launch_App1}</td>
    <td>Benutzerdefiniertes Programm 1 öffnen</td>
  </tr>
  <tr>
    <td>{Launch_App2}</td>
    <td>Benutzerdefiniertes Programm 2 öffnen</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr>
    <td>{PrintScreen}</td>
    <td>DRUCK-Taste</td>
  </tr>
  <tr>
    <td>{CtrlBreak}</td>
    <td>STRG+UNTBR</td>
  </tr>
  <tr>
    <td>{Pause}</td>
    <td>PAUSE-Taste</td>
  </tr>
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
  <tr id="Click">
    <td align="center"><strong>{Click [Optionen]}</strong></td>
    <td>Sendet einen Mausklick, das die gleichen Optionen verwendet wie die von der <a href="Click.htm">Click-Funktion</a>. Zum Beispiel würde <code>{Click}</code> die linke Maustaste einmal bei der aktuellen Mausposition klicken, und <code>{Click 100, 200}</code> würde auf den Koordinaten 100, 200 klicken (basierend auf <a href="CoordMode.htm">CoordMode</a>). Um den Mauszeiger ohne Klicken zu verschieben, gibt man nach den Koordinaten eine 0 an; zum Beispiel: <code>{Click 100, 200, 0}</code>. Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt (nicht <a href="SetKeyDelay.htm">SetKeyDelay</a>).</td>
  </tr>
  <tr>
    <td>{WheelDown}, {WheelUp}, {WheelLeft}, {WheelRight}, {LButton}, {RButton}, {MButton}, {XButton1}, {XButton2}</td>
    <td>Sendet ein Maustastenereignis auf die aktuelle Mausposition (um die Position und weitere Optionen zu kontrollieren, siehe <a href="Click.htm">{Click}</a>). Die Verzögerung zwischen den Mausklicks wird durch <a href="SetMouseDelay.htm">SetMouseDelay</a> bestimmt. WheelLeft/Right funktionieren nicht in Betriebssystemen älter als Windows Vista.</td>
  </tr>
  <tr id="blind">
    <td><strong>{Blind}</strong></td>
    <td><p>Wenn {Blind} das erste Element in der Zeichenkette ist, wird das Programm das Loslassen von ALT/STRG/UMSCHALT/WIN verhindern, sofern sie zu Beginn im gedrückten Zustand waren. Zum Beispiel würde der Hotkey <code>+s::Send {Blind}abc</code> ABC statt abc senden, weil der Benutzer die UMSCHALT-Taste gedrückt hält.</p>
      <p>{Blind} bewirkt auch, dass <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a> ignoriert wird; das heißt, dass der Status der Festelltaste nicht geändert wird. Zudem lässt {Blind} die zusätzlichen STRG-Tasten weg, die ansonsten gesendet werden würden; solche Tastatureingaben verhindern: 1) die Darstellung des Startmenüs während LWIN/RWIN-Eingaben; 2) die Aktivierung der Menüleiste während ALT-Eingaben.</p>
      <p>Der Blind-Modus wird beim <a href="../misc/Remap.htm">Neubelegen einer Taste</a> automatisch verwendet. Zum Beispiel würde die Neubelegung a::b folgendes erzeugen: 1) "b" wenn man "a" eingibt; 2) großes B wenn man ein großes A eingibt; und 3) STRG+B wenn man STRG+A eingibt.</p>
      <p>{Blind} wird nicht in Verbindung mit SendRaw und <a href="ControlSend.htm">ControlSendRaw</a> unterstützt. Desweiteren wird es nicht in Verbindung mit <a href="#SendPlayDetail">SendPlay</a> unterstützt, besonders im Umgang mit Modifikatortasten (STRG, ALT, UMSCHALT und WIN).</p></td>
  </tr>
  <tr id="Raw">
    <td><strong>{Raw}</strong></td>
    <td>Aktiviert den <a href="#SendRaw"><em>Raw-Modus</em></a>, wodurch die folgenden Zeichen als direkt geschriebener Text interpretiert werden: <code>^+!#{}</code>. Zwar muss <code>{Raw}</code> nicht am Anfang der Zeichenkette vorkommen, allerdings bleibt es, wenn es einmal angegeben wurde, für den Rest der Zeichenkette aktiv.</td>
  </tr>
</table>

<h2>Mehrfaches oder haltendes Drücken einer Taste</h2>
<p><strong>Mehrfaches Drücken</strong>: Umschließen Sie den Namen der Taste und die Anzahl an Wiederholungen mit geschweiften Klammern. Zum Beispiel:</p>
<pre>Send "{DEL 4}"  <em>; Drückt viermal die ENTF-Taste.</em>
Send "{S 30}"   <em>; Sendet 30 große S-Zeichen.</em>
Send "+{TAB 4}"  <em>; Drückt viermal UMSCHALT+TAB.</em></pre>
<p><strong>Halten oder Loslassen</strong>: Umschließen Sie den Namen der Taste und das Wort <strong>Down</strong> oder <strong>Up</strong> mit geschweiften Klammern. Zum Beispiel:</p>
<pre>Send "{b down}{b up}"
Send "{TAB down}{TAB up}"
Send "{Up down}"  <em>; Drückt die NACH-OBEN-Taste nach unten.</em>
Sleep 1000  <em>; Hält sie eine Sekunde lang gedrückt.</em>
Send "{Up up}"  <em>; Lässt die NACH-OBEN-Taste los.</em></pre>
<p>Wenn eine Taste mit der Methode oben gedrückt gehalten wird, erfolgt keine Auto-Wiederholung, wie es beim physischen Gedrückthalten geschehen würde (Auto-Wiederholung ist nämlich ein Treiber/Hardware-Feature). Allerdings kann mit einer <a href="Loop.htm">Schleife</a> das Auto-Wiederholen künstlich erzeugt werden. Das folgende Beispiel sendet 20 Tabulator-Eingaben:</p>
<pre>Loop 20
{
    Send "{Tab down}"  <em>; Auto-Wiederholen besteht aus fortlaufenden Down-Ereignissen (ohne Up-Ereignisse).</em>
    Sleep 30  <em>; Die Anzahl an Millisekunden zwischen den Tastatureingaben (oder verwende <a href="SetKeyDelay.htm">SetKeyDelay</a>).</em>
}
Send "{Tab up}"  <em>; Lässt die Taste los.</em></pre>
<p>Das Wort <em>DownTemp</em> kann auch verwendet werden. Sein Effekt das gleiche wie <em>Down</em>, außer bei Modifikatortasten (STRG/UMSCHALT/ALT/WIN). <em>DownTemp</em> benachrichtigt nachfolgende Send-Funktionen, dass die Taste nicht permanent im gedrückten Zustand ist, und dass sie jederzeit losgelassen werden könnte. Zum Beispiel würde <code>Send "{Control DownTemp}"</code> und dann <code>Send "a"</code> ein normales "a" erzeugen, nicht einen STRG+A-Tastendruck.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>Es gibt keine bestimmten Einschränkungen bezüglich der Zeichen, die gesendet werden können. Wenn ein Zeichen auf der aktuellen Tastaturbelegung nicht existiert, wird es durch Senden eines Unicode-Zeichenpackets oder einer <a href="#asc">ALT+nnnnn</a>-Kombination künstlich erzeugt, abhängig von der AutoHotkey-Version. In den Unicode-Versionen von AutoHotkey können Unicode-Zeichen direkt angegeben werden, bei allen anderen Versionen nur mithilfe der <a href="#sendu">{U+nnnn}-Schreibweise</a>.</p>
<p><strong>BlockInput im Vergleich zu SendInput/SendPlay</strong>: Zwar kann man mit der <a href="BlockInput.htm">BlockInput</a>-Funktion verhindern, dass physische Benutzereingaben den simulierten Eingabeverlauf unterbrechen, allerdings sollte man dafür besser <a href="#SendInputDetail">SendInput</a> oder <a href="#SendPlayDetail">SendPlay</a> verwenden. Denn im Gegensatz zu BlockInput wird die SendInput/Play-Funktion nicht verwerfen, was der Benutzer während des Sendens eingibt; stattdessen werden solche Tastatureingaben zwischengespeichert und danach gesendet.</p>
<p>Beim Senden vieler Tastatureingaben kann ein <a href="../Scripts.htm#continuation">Fortsetzungsbereich</a> hilfreich sein, um den Text besser lesbar und verwaltbar zu machen.</p>
<p>Da das Betriebssystem das Simulieren von STRG+ALT+ENTF nicht erlaubt, kann so etwas wie <code>Send "^!{Delete}"</code> nicht funktionieren.</p>
<p><b>Send könnte nicht funktionieren</b> in Windows Vista oder höher, wenn das aktive Fenster mit administrativen Rechten läuft, und das Skript nicht. Das hängt mit dem Sicherheitsmechanismus "User Interface Privilege Isolation" (UIPI) zusammen.</p>

<h2 id="SendInputDetail">SendInput</h2>
<p>SendInput ist in der Regel die bevorzugte Methode, um Tastatureingaben und Mausklicks zu senden, weil sie bedeutend schneller und zuverlässiger ist. In den meisten Fällen wird SendInput die Tastatureingaben sofort senden, selbst bei langen Zeichenketten. Aufgrund dieser Schnelligkeit ist SendInput auch zuverlässiger, weil die Chance geringer ist, dass ein anderes Fenster unerwartet erscheint und die Tastatureingaben abfängt. Die Zuverlässigkeit erhöht sich nochmals durch die Tatsache, dass die Benutzereingaben während einer SendInput-Funktion bis zum Schluss zwischengespeichert werden.</p>
<p>Im Gegensatz zu den anderen Sendmethoden ist SendInput auf ca. 5000 Zeichen begrenzt (dieser Grenzwert variiert je nach Version des Betriebssystems und Performance-Einstellungen). Zeichen und Ereignisse oberhalb des Limits werden nicht gesendet.</p>
<p><strong>Hinweis</strong>: SendInput ignoriert SetKeyDelay, weil das Betriebssystem keine Verzögerung in diesem Modus unterstützt. Wenn SendInput allerdings aufgrund der unten genannten Bedingungen auf <a href="#SendEvent">SendEvent</a> zurückgreift, wird es <code><a href="SetKeyDelay.htm">SetKeyDelay</a> -1, 0</code> verwenden (wenn aber SendEvent's Tastenverzögerung <code>-1, -1</code> ist, wird <code>-1, -1</code> verwendet). Wenn SendInput auf <a href="#SendPlayDetail">SendPlay</a> zurückgreift, wird es SendPlay's Tastenverzögerung verwenden.</p>
<p id="SendInputUnavail">Wenn ein Skript - <em>außer</em> das Skript, das SendInput ausführt - einen <a href="_InstallKeybdHook.htm">systemnahen Tastatur-Hook</a> installiert hat, wird SendInput automatisch auf <a href="#SendEvent">SendEvent</a> zurückgreifen (oder auf <a href="#SendPlayDetail">SendPlay</a>, wenn <code><a href="SendMode.htm">SendMode</a> "InputThenPlay"</code> wirksam ist). Dieses Verhalten ist notwendig, weil das Vorhandensein eines externen Hooks alle Vorteile von SendInput zunichte machen würde, so dass es sowohl SendPlay als auch SendEvent unterlegen wäre. Da SendInput jedoch einen systemnahen Hook in Programmen außer v1.0.43+ nicht erkennen kann, wird es in solchen Fällen nicht auf einen anderen Modus zurückgreifen, wodurch es unzuverlässiger als SendPlay/Event werden würde.</p>
<p>Wenn SendInput einen Mausklick mithilfe von z. B. <a href="#Click">{Click}</a> sendet, während <code><a href="CoordMode.htm">CoordMode</a> "Mouse", "Relative"</code> aktiv ist (die Standardeinstellung), wird jeder Klick relativ zum Fenster sein, das vor dem Senden aktiv war. Demzufolge, wenn SendInput absichtlich ein anderes Fenster aktiviert (z. B. mit ALT+TAB), werden die Koordinaten der nachfolgenden Klicks innerhalb der gleichen Funktion falsch sein, weil sie weiterhin relativ zum alten statt zum neuen Fenster sind.</p>

<h2 id="SendPlayDetail">SendPlay</h2>
<p><strong>Hinweis:</strong> SendPlay funktioniert möglicherweise überhaupt nicht, wenn UAC aktiviert ist, selbst wenn das Skript mit Administratorrechten läuft. Mehr Informationen dazu finden Sie in der <a href="../FAQ.htm#uac">FAQ</a>.</p>
<p>SendPlay's größter Vorteil ist seine Fähigkeit, Tastatureingaben und Mausklicks bei einer breiteren Auswahl an Spielen "wiedergeben" zu können. Zum Beispiel könnten <a href="../Hotstrings.htm#SendMode">Hotstrings</a> in einem Spiel nur funktionieren, wenn sie die <a href="../Hotstrings.htm#SendMode">SendPlay-Option</a> haben.</p>
<p>SendPlay ist, im Gegensatz zu den anderen Sendemethoden, am ungewöhnlichsten, weil dieser Modus selbst keine Tastatureingaben und Mausklicks simuliert. Stattdessen erstellt es eine Reihe von Ereignissen (Meldungen), die direkt in das aktive Fenster einfließen (so ähnlich wie <a href="ControlSend.htm">ControlSend</a>, aber auf einem niedrigeren Niveau). Demzufolge kann SendPlay keine Hotkeys oder Hotstrings auslösen.</p>
<p>Wie bei <a href="#SendInputDetail">SendInput</a> auch, können sich SendPlay's Tastatureingaben nicht mit den Benutzereingaben vermischen. Wenn der Benutzer also während SendPlay etwas eingibt, werden solche Tastatureingaben bis zum Schluss zwischengespeichert.</p>
<p>Zwar ist SendPlay deutlich langsamer als SendInput, aber schneller als der traditionelle <a href="#SendEvent">SendEvent</a>-Modus (selbst wenn <a href="SetKeyDelay.htm">Tastenverzögerung</a> auf -1 ist).</p>
<p>Die WIN-Tasten (LWin und RWin) werden während SendPlay automatisch blockiert, wenn der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist. Dadurch wird verhindert, dass das Startmenü angezeigt wird, wenn der Benutzer versehentlich eine WIN-Taste während des Sendens drückt. Alle anderen Tasten außer LWin und RWin müssen nicht blockiert werden, weil das Betriebssystem sie automatisch zwischenspeichert, bis SendPlay durchgeführt wurde (via Puffer).</p>
<p>SendPlay verwendet nicht die Standardeinstellungen von SetKeyDelay und SetMouseDelay. Stattdessen gilt standardmäßig überhaupt keine Verzögerung, das wie folgt geändert werden kann:</p>
<pre><a href="SetKeyDelay.htm">SetKeyDelay</a> 0, 10, <strong>"Play"</strong>  <em>; Beachten Sie, dass sowohl 0 als auch -1 das gleiche sind im SendPlay-Modus.</em>
<a href="SetMouseDelay.htm">SetMouseDelay</a> 10, <strong>"Play"</strong></pre>
<p>SendPlay kann die FESTSTELL-, NUM- oder ROLLEN-Taste weder ein- noch ausschalten. SendPlay kann zudem den Status einer Taste, wie von <a href="GetKeyState.htm">GetKeyState</a> gesehen, nicht ändern, es sei denn, die Tastatureingaben werden zu den Fenstern des Skripts gesendet. Selbst dann können Änderungen an den linken/rechten Modifikatortasten (z. B. RControl) nur über ihrem neutralen Gegenstück (z. B. Control) erkannt werden. Außerdem gelten für SendPlay noch weitere Einschränkungen, die auf der <a href="SendMode.htm#Play">SendMode-Seite</a> zu finden sind.</p>
<p>Im Gegensatz zu <a href="#SendInputDetail">SendInput</a> und <a href="#SendEvent">SendEvent</a> kann SendPlay von einem Benutzer unterbrochen werden, indem er STRG+ALT+ENTF oder STRG+ESC drückt. Wenn dies geschieht, werden die restlichen Tastatureingaben nicht gesendet, und danach das Skript fortgesetzt, als ob das SendPlay normal abgeschlossen wurde.</p>
<p>Zwar kann SendPlay LWin- und RWin-Ereignisse senden, allerdings werden sie direkt zum aktiven Fenster gesendet, anstatt ihre interne Betriebssystemfunktion durchzuführen. Um das zu umgehen, nutzt man <a href="#SendEvent">SendEvent</a>. Zum Beispiel würde <code>SendEvent "#r"</code> das Ausführen-Dialogfenster des Startmenüs anzeigen.</p>

<h2>Siehe auch</h2>
<p><a href="SendMode.htm">SendMode</a>, <a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetStoreCapslockMode.htm">SetStoreCapslockMode</a>, <a href="../misc/EscapeChar.htm">Escapezeichen (z. B. `n)</a>, <a href="ControlSend.htm">ControlSend</a>, <a href="BlockInput.htm">BlockInput</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="WinActivate.htm">WinActivate</a></p>
<h2>Beispiele</h2>
<pre class="NoIndent">Send "Mit freundlichen Grüßen,{enter}John Smith"  <em>; Schreibt eine zweizeilige Signatur.</em>
Send "!ds" <em>; Öffnet das Dateimenü und wählt Speichern aus (ALT+D, gefolgt von S).</em>
Send "{End}+{Left 4}" <em>; Springt ans Textende und sendet viermal UMSCHALT+NACH-LINKS.</em>
SendInput "<a href="#Raw">{Raw}</a>Eine Reihe unberarbeiteter Zeichen, die mit der schnellsten Methode (<a href="#SendInputDetail">SendInput</a>) gesendet wurden."</pre>

</body>
</html>
