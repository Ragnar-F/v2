<!DOCTYPE HTML>
<html lang="de">
<head>
<title>TreeView (GUI) - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Das TreeView-Steuerelement zeigt eine Hierarchie von Elementen an, indem untergeordnete Elemente unter ihren übergeordneten Elementen eingerückt werden. Diese Seite enthält die Funktionen, um es zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles</a></li>
  <li><a href="#BuiltIn">Interne Methoden</a>:
    <ul>
      <li><a href="#bifAddModifyDelete">Hinzufügen/Ändern/Löschen von Elementen</a></li>
      <li><a href="#bifGet">Daten aus einer TreeView abrufen</a></li>
      <li><a href="#bifIcon">Symbole setzen</a></li>
    </ul>
  </li>
  <li><a href="#Events">Ereignisse</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Examples">Längeres Beispiel</a></li>
</ul>
<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>Eine Baum-Ansicht zeigt eine Hierarchie von Elementen an, indem untergeordnete Elemente unter ihren übergeordneten Elementen eingerückt werden. Das bekannteste Beispiel dafür ist der Navigationsbereich des Explorers.</p>
<p>Eine typische TreeView sieht wie folgt aus:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>Die Syntax zur Erstellung einer TreeView ist:</p>
<pre class="Syntax" id="GuiAdd">TV := Gui.<span class="func">Add</span>("TreeView", Optionen)</pre>
<p>Das folgende Skript zeigt, wie eine einfache Hierarchie von Elementen erstellt und angezeigt werden kann:</p>
<pre>Gui := GuiCreate()
TV := Gui.Add("TreeView")
<span class="red">P1</span> := <a href="#Add">TV.Add</a>("Erstes Oberelement")
P1C1 := TV.Add("Erstes Unterelement von Oberelement 1", <span class="red">P1</span>)  <em>; Geben Sie P1 an, um dieses Element unterzuordnen.</em>
P2 := TV.Add("Zweites Oberelement")
P2C1 := TV.Add("Erstes Unterelement von Oberelement 2", P2)
P2C2 := TV.Add("Zweites Unterelement von Oberelement 2", P2)
P2C2C1 := TV.Add("Erstes Unterelement von Unterelement 2", P2C2)

Gui.Show  <em>; Anzeigen des Fensters mit TreeView.</em></pre>
<h2 id="Options">Optionen und Styles für den <em>Optionen</em>-Parameter</h2>
<p><strong>Background</strong>: Geben Sie das Wort Background an und fügen Sie direkt danach einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder einen RGB-Wert (das 0x-Präfix ist optional) ein. Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet TreeView als Hintergrundfarbe standardmäßig die Standardhintergrundfarbe des Systems. Mit <code>BackgroundDefault</code> oder <code>-Background</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Mit <code>TV.Opt("+BackgroundDefault")</code> beispielsweise kann die Standardfarbe wiederhergestellt werden.</p>
<p><strong>Buttons</strong>: Geben Sie <code>-Buttons</code> (minus Buttons) an, um die Plus- oder Minuszeichen zu entfernen, die jeweils auf der linken Seite eines Elements mit Unterelementen zu finden sind.</p>
<p><strong>C</strong>: Textfarbe. Geben Sie den Buchstaben C an und fügen Sie direkt danach einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder einen RGB-Wert (das 0x-Präfix ist optional) ein. Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked</strong>: Fügt links neben jedem Element eine CheckBox hinzu. Beim <a href="#Add">Hinzufügen</a> eines Elements kann das Wort <em>Check</em> in die Optionen eingefügt werden, um die CheckBox zu Beginn im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox entweder anklicken oder die Leertaste drücken, um sie in den abgehakten oder nicht-abgehakten Zustand zu versetzen. Um herauszufinden, welches Element aktuell in der TreeView abgehakt ist, rufen Sie <a href="#GetNext">TV.GetNext</a> oder <a href="#Get">TV.Get</a> auf.</p>
<p><strong>HScroll</strong>: Geben Sie <code>-HScroll</code> (minus HScroll) an, um das horizontale Scrollen im Steuerelement zu deaktivieren (zusätzlich wird das Steuerelement keine horizontale Scrollbalken anzeigen).</p>
<p id="ImageList"><strong>ImageList</strong>: Mit dieser Option können Symbole in eine ListView eingefügt werden. Geben Sie das Wort <em>ImageList</em> an und fügen Sie direkt danach eine ImageListID ein, die von <a href="ListView.htm#IL_Create">IL_Create</a> zurückgegeben wird. Diese Option funktioniert nur beim Erstellen einer TreeView (allerdings hat <a href="#SetImageList">TV.SetImageList</a> diese Einschränkung nicht). Hier ein funktionierendes Beispiel:</p>
<pre>Gui := GuiCreate()
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; Erstellt eine ImageList für anfänglich 10 Symbole.</em>
Loop 10  <em>; Lädt die ImageList mit einigen vordefinierten Systemsymbolen.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
TV := Gui.Add("TreeView", "ImageList" . ImageListID)
<a href="#Add">TV.Add</a>("Elementname", 0, "Icon4")  <em>; Fügt ein Element in die TreeView ein und gibt ihm ein Ordnersymbol.</em>
Gui.Show</pre>
<p><strong>Lines</strong>: Geben Sie <code>-Lines</code> (minus Lines) an, um die Verbindungslinien zwischen den Ober- und Unterelementen zu entfernen. Das Entfernen solcher Linien verhindert allerdings auch, dass die Plus-/Minuszeichen bei auf oberster Ebene befindlichen Elementen angezeigt werden.</p>
<p id="ReadOnly"><strong>ReadOnly</strong>: Geben Sie <code>-ReadOnly</code> (minus ReadOnly) an, um die Texte/Namen aller Elemente editierbar zu machen. Um ein Element zu editieren, wählen Sie es aus und drücken Sie <kbd>F2</kbd> (siehe die <a href="#WantF2">WantF2</a>-Option unten). Oder klicken Sie das Element einmal an, um es auszuwählen, warten Sie mindestens eine halbe Sekunde und klicken Sie dann das Element nochmals an, um es zu editieren. Das folgende Beispiel zeigt, wie ein Element, nachdem es editiert wurde, in Bezug auf seine Nachbarelemente alphabetisch neu positioniert werden kann:</p>
<pre>TV := Gui.Add("TreeView", "-ReadOnly")
TV.OnEvent("ItemEdit", "MeinTree_Edit")  <em>; Ruft MeinTree_Edit auf, wann immer der Benutzer mit dem Editieren eines Elements fertig ist.</em>
<em>; ...</em>
MeinTree_Edit(TV, Element)
{
    TV.Modify(TV.GetParent(Element), "Sort")  <em>; Funktioniert auch, wenn das Element kein Oberelement hat.</em>
}</pre>
<p><strong>R</strong>: Reihen-Höhe (bei der Erstellung). Geben Sie den Buchstaben R an und fügen Sie direkt danach die Anzahl der Reihen ein, für die innerhalb des Steuerelements Platz geschaffen werden soll. Zum Beispiel würde <code>R10</code> das Steuerelement 10 Elemente hoch machen.</p>
<p id="WantF2"><strong>WantF2</strong>: Geben Sie <code>-WantF2</code> (minus WantF2) an, um die Möglichkeit zu entfernen, das aktuell ausgewählte Element mit <kbd>F2</kbd> zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, es sei denn, <a href="#ReadOnly">-ReadOnly</a> ist ebenfalls wirksam.</p>
<p><strong>(Namenlose numerische Styles)</strong>: Da die restlichen Styles nur selten verwendet werden, haben sie keine Namen. Siehe <a href="../misc/Styles.htm#TreeView">Style-Tabelle von TreeView</a>.</p>
<h2 id="BuiltIn">Interne Methoden für TreeViews</h2>
<p>Zusätzlich zu den <a href="../objects/GuiControl.htm">Standardmethoden/-eigenschaften eines GUI-Steuerelements</a> können folgende Methoden für eine TreeView benutzt werden. Wenn das zugeordnete <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> weder existiert noch zu einer TreeView gehört, werden die TreeView-Methoden eine <a href="Catch.htm#RuntimeErrors">Ausnahme</a> auslösen.</p>
<h3 id="bifAddModifyDelete">Hinzufügen, Ändern und Löschen von Elementen</h3>
<div class="methodShort" id="Add">
  <h3>Add</h3>
  <p>Fügt ein neues Element in die TreeView ein und gibt dessen eindeutige Element-ID-Nummer zurück.</p>
  <pre class="Syntax">EindeutigeID := TV.<span class="func">Add</span>(Name, <span class="optional">OberelementID, Optionen</span>)</pre>
  <dl>
    <dt>Name</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Der Anzeigetext des Elements, das auch numerisch sein kann (einschließlich numerische <a href="../Variables.htm#Expressions">Ausdrücke</a>).</p>
    </dd>
    <dt>OberelementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID-Nummer des neuen Oberelements (wenn dieser Parameter weggelassen wird oder 0 ist, wird das Element auf der obersten Ebene hinzugefügt).</p>
    </dd>
    <dt>Optionen</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Enthält null oder mehrere Wörter aus der unteren Liste (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Wörter jeweils mit einem Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, setzen Sie ein Minuszeichen davor. Um eine Option hinzuzufügen, lassen Sie das Vorzeichen weg oder setzen Sie ein Pluszeichen davor.</p>
      <p id="Bold"><strong>Bold</strong>: Zeigt den Namen des Elements in fetter Schrift an. Mit <code>TV.Modify(ElementID, "-Bold")</code> kann das Element wieder normalisiert werden. Direkt nach dem Wort <em>Bold</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen.</p>
      <p id="Check"><strong>Check</strong>: Zeigt ein Häkchen links neben dem Element an (wenn die TreeView über <a href="#Checked">CheckBoxen</a> verfügt). Mit <code>TV.Modify(ElementID, "-Check")</code> kann das Häkchen später wieder entfernt werden. Direkt nach dem Wort <em>Check</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Check"</code> das gleiche wie <code>"Check" <strong>.</strong> VarEnhältEins</code> (der hier verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>).</p>
      <p id="Expand"><strong>Expand</strong>: Klappt das Element auf, um seine Unterelemente anzuzeigen (falls vorhanden). Mit <code>TV.Modify(ElementID, "-Expand")</code> kann das Element wieder zugeklappt werden. Wenn es keine Unterelemente gibt, wird <a href="#Modify">TV.Modify</a> eine 0 anstelle der Element-ID zurückgeben. <a href="#Add">TV.Add</a> hingegen kennzeichnet das Element als aufgeklappt, für den Fall, dass später Unterelemente hinzugefügt werden. Im Gegensatz zu "Select" (siehe unten) bewirkt das Aufklappen eines Elements nicht, dass sein Oberelement auch automatisch mit aufgeklappt wird. Direkt nach dem Wort <em>Expand</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Expand"</code> das gleiche wie <code>"Expand" <strong>.</strong> VarEnhältEins</code>.</p>
      <p><strong>First | Sort | N</strong>: Diese Optionen gelten nur für <a href="#Add">TV.Add</a>. Sie bestimmen die Position des neuen Elements relativ zu seinen Nachbarelementen (<em>Nachbarelemente</em> sind alle Elemente auf gleicher Ebene). Wenn keine dieser Optionen vorhanden ist, wird das neue Element als letztes/unterstes Nachbarelement eingefügt. Verwenden Sie ansonsten <em>First</em>, um das Element als erstes/oberstes Nachbarelement einzufügen, oder <em>Sort</em>, um das Element in Bezug auf seine Nachbarelemente in alphabetischer Reihenfolge einzufügen. Gibt man einen reinen Integer-Wert an (<strong>N</strong>), wird er als ID-Nummer des Nachbarelements angesehen, wo danach das neue Element eingefügt werden soll (wenn Integer N nur als einzige Option vorhanden ist, muss er nicht in Anführungszeichen gesetzt werden).</p>
      <p><strong>Icon</strong>: Geben Sie das Wort <em>Icon</em> und direkt danach eine Symbolnummer an, um ein Symbol auf der linken Seite des Elementnamens anzuzeigen. Fehlt diese Option, wird das erste Symbol in der <a href="#ImageList">ImageList</a> verwendet. Um ein leeres Symbol darzustellen, geben Sie eine Nummer an, die größer als die Anzahl der Symbole in der ImageList ist. Wenn das Steuerelement keine ImageList hat, werden weder Symbole angezeigt noch Speicher für so eins reserviert.</p>
      <p id="Select"><strong>Select</strong>: Wählt das Element aus. Da jeweils nur ein einziges Element ausgewählt sein kann, wird jedes zuvor ausgewählte Element automatisch abgewählt. Darüber hinaus wird jedes Oberelement des neu ausgewählten Elements aufgeklappt, falls erforderlich. Mit <a href="#GetSelection">TV.GetSelection</a> kann die aktuelle Auswahl herausgefunden werden.</p>
      <p><strong>Sort</strong>: Bei <a href="#Modify">TV.Modify</a> wird diese Option die Unterelemente des angegebenen Elements in alphabetischer Reihenfolge sortieren. Mit <code>TV.Modify(0, "Sort")</code> können stattdessen alle auf oberster Ebene befindliche Elemente sortiert werden. Wenn es keine Unterelemente gibt, wird eine 0 anstelle der ID des modifizierten Elements zurückgegeben.</p>
      <p><strong>Vis</strong>: Sorgt dafür, dass das Element durch Scrollen der TreeView und/oder Aufklappen seiner Oberelemente sichtbar bleibt, falls erforderlich.</p>
      <p><strong>VisFirst</strong>: Das gleiche wie oben, außer dass die TreeView zusätzlich gescrollt wird, so dass das Element ganz oben erscheint, wenn möglich. Diese Option ist in Verbindung mit <a href="#Modify">TV.Modify</a> in der Regel effektiver als mit <a href="#Add">TV.Add</a>.</p>
    </dd>
  </dl>
  <p>&nbsp;Hinweis: Um das Hinzufügen sehr vieler Elemente leistungsfähiger zu machen, können Sie vor der Operation <code>TV.Opt("-Redraw")</code> und nach der Operation <code>TV.Opt("+Redraw")</code> verwenden.</p>
</div>
<div class="methodShort" id="Modify">
  <h3>Modify</h3>
  <p>Modifiziert die Attribute und/oder den Namen eines Elements, und gibt dessen eigene ID zurück.</p>
  <pre class="Syntax">AktuelleElementID := TV.<span class="func">Modify</span>(ElementID <span class="optional">, Optionen, NeuerName</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das modifiziert werden soll. Sollte nur dieser Parameter vorhanden sein, wird das Element <a href="#Select">ausgewählt</a>.</p>
    </dd>
    <dt>Optionen</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Siehe obere Liste.</p>
    </dd>
    <dt>NeuerName</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Der neue Name des Elements. Lässt man diesen Parameter weg, bleibt der aktuelle Name unverändert.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="Delete">
  <h3>Delete</h3>
  <p>Löscht ein bestimmtes Element und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
  <pre class="Syntax">TV.<span class="func">Delete</span>(<span class="optional">ElementID</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das gelöscht werden soll. Lässt man diesen Parameter weg, werden <strong>alle</strong> Elemente in der TreeView gelöscht.</p>
    </dd>
  </dl>
</div>
<h3 id="bifGet">Daten aus einer TreeView abrufen</h3>
<div class="methodShort" id="GetSelection">
  <h3>GetSelection</h3>
  <p>Gibt die ID-Nummer des ausgewählten Elements zurück.</p>
  <pre class="Syntax">AusgewählteElementID := TV.<span class="func">GetSelection</span>()</pre>
</div>
<div class="methodShort" id="GetCount">
  <h3>GetCount</h3>
  <p>Gibt die Anzahl aller Elemente im Steuerelement zurück.</p>
  <pre class="Syntax">Anzahl := TV.<span class="func">GetCount</span>()</pre>
  <p>&nbsp;Hinweis: Der Rückgabewert wird sofort abgerufen, weil das Steuerelement die Zählung immer im Blick behält.</p>
</div>
<div class="methodShort" id="GetParent">
  <h3>GetParent</h3>
  <p>Gibt das Oberelement eines bestimmten Elements als Element-ID zurück.</p>
  <pre class="Syntax">OberelementID := TV.<span class="func">GetParent</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll. Auf oberster Ebene befindliche Elemente haben keine übergeordneten Elemente und geben daher eine 0 zurück.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetChild">
  <h3>GetChild</h3>
  <p>Gibt die ID-Nummer des ersten/obersten Unterelements eines bestimmten Elements zurück (oder 0, wenn es keine gibt).</p>
  <pre class="Syntax">ErsteUnterelementID := TV.<span class="func">GetChild</span>(OberelementID)</pre>
  <dl>
    <dt>OberelementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Oberelement, das überprüft werden soll.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetPrev">
  <h3>GetPrev</h3>
  <p>Gibt die ID-Nummer des Nachbarelements zurück, das sich über einem bestimmten Element befindet (oder 0, wenn kein Element vorhanden ist).</p>
  <pre class="Syntax">VorherigeElementID := TV.<span class="func">GetPrev</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="GetNext">
  <h3>GetNext</h3>
  <p>Gibt die ID-Nummer des nächsten Elements zurück, das sich unter einem bestimmten Element befindet (oder 0, wenn kein Element vorhanden ist).</p>
  <pre class="Syntax">NächsteElementID := TV.<span class="func">GetNext</span>(<span class="optional">ElementID := 0, ElementTyp := ""</span>)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll. Wenn dieser Parameter weggelassen wird oder 0 ist, wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben.</p>
    </dd>
    <dt>ElementTyp</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Lässt man diesen Parameter weg, wird die ID-Nummer des Nachbarelements, das sich unter dem angegebenen Element befindet, zurückgegeben. Ansonsten kann "Full" oder "F" angegeben werden, um das nächste Element ohne Rücksicht auf dessen Verhältnis zum angegebenen Element abzurufen; oder "Check", "Checked" oder "C", um nur das nächste abgehakte Element zu ermitteln.</p>
    </dd>
  </dl>
  &nbsp;Das folgende Beispiel durchläuft die gesamte Baumstruktur, Element für Element:<pre>ElementID := 0  <em>; Beginnt die Suche beim ersten Element.</em>
Loop
{
    ElementID := TV.GetNext(ElementID, "Full")  <em>; Ersetzen Sie "Full" mit "Checked", um alle abgehakten Elemente zu finden.</em>
    if not ElementID  <em>; Keine weiteren Elemente verfügbar.</em>
        break
    Elementtext := TV.GetText(ElementID)
    MsgBox('Das nächste Element ist ' ElementID ', das den Text "' Elementtext '" beinhaltet.')
}</pre>
</div>
<div class="methodShort" id="GetText">
  <h3>GetText</h3>
  <p>Ermittelt den Text/Namen eines bestimmten Elements.</p>
  <pre class="Syntax">ErmittelterText := TV.<span class="func">GetText</span>(ElementID)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID-Nummer des Elements, dessen Text abgerufen werden soll. <em>ErmittelterText</em> hat eine maximale Länge von 8191.</p>
    </dd>
  </dl>
</div>
<div class="methodShort" id="Get">
  <h3>Get</h3>
  <p>Gibt eine Nummer ungleich 0 zurück (Element-ID), wenn ein bestimmtes Element ein bestimmtes Attribut hat.</p>
  <pre class="Syntax">AktuelleElementID := TV.<span class="func">Get</span>(ElementID, Attribut)</pre>
  <dl>
    <dt>ElementID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Ein Element, das überprüft werden soll.</p>
    </dd>
    <dt>Attribut</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Geben Sie "E", "Expand" oder "Expanded" an, um festzustellen, ob das Element gerade <a href="#Expand">aufgeklappt</a> ist (also wenn seine Unterelemente angezeigt werden); oder "C", "Check" oder "Checked", um festzustellen, ob das Element ein <a href="#Check">Häkchen</a> hat; oder "B" oder "Bold", um festzustellen, ob das Element gerade in <a href="#Bold">fetter</a> Schrift dargestellt wird.</p>
    </dd>
  </dl>
  <p><strong>Tipp</strong>: Da eine IF-Anweisung jeden Wert ungleich 0 als "wahr" ansieht, sind <code>if TV.Get(ElementID, "Checked") = ElementID</code> und <code>if TV.Get(ElementID, "Checked")</code> funktionsgemäß identisch.</p>
</div>
<h3 id="bifIcon">Symbole setzen</h3>
<div class="methodShort" id="SetImageList">
  <h3>SetImageList</h3>
  <p>Setzt oder ersetzt die <a href="ListView.htm#IL">ImageList</a>, und gibt die ImageListID zurück, die zuvor mit diesem Steuerelement verbunden wurde (oder eine 0, wenn dies nicht der Fall ist).</p>
  <pre class="Syntax">VorherigeImageListID := TV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, Symboltyp</span>)</pre>
    <dl>
      <dt>ImageListID</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die zurückgegebene Nummer von <a href="ListView.htm#IL_Create">IL_Create</a>.</p>
      </dd>
      <dt>Symboltyp</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Lässt man diesen Parameter weg, wird standardmäßig 0 verwendet. Verwenden Sie ansonsten eine 2 für Statussymbole (Statussymbole werden nur via <a href="SendMessage.htm">SendMessage</a> unterstützt).</p>
      </dd>
    </dl>
    <p>
      Jede nicht mehr benötigte ImageList kann mit <a href="ListView.htm#IL_Destroy">IL_Destroy</a> zerstört werden.</p>
</div>
<h2 id="Events">Ereignisse</h2>
<p>Die folgenden Ereignisse können erkannt und via <a href="../objects/GuiOnEvent.htm">OnEvent</a> in Verbindung mit einer Callback-Funktion oder Methode registriert werden:</p>
<table class="info">
  <tr><th>Ereignis</th><th>wird ausgelöst wenn...</th></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Click">Click</a></td><td>Das Steuerelement wurde angeklickt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>Das Steuerelement wurde doppelt angeklickt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>Der Benutzer hat einen Rechtsklick auf das Steuerelement gemacht, oder hat die <kbd>Menü</kbd>-Taste oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> gedrückt, während das Steuerelement fokussiert war.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Focus">Focus</a></td><td>Das Steuerelement hat den Tastaturfokus erhalten.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>Das Steuerelement hat den Tastaturfokus verloren.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>Das Häkchen eines Elements wurde gesetzt oder entfernt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>Die Beschriftung eines Elements wird vom Benutzer editiert.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemExpand">ItemExpand</a></td><td>Ein Element wurde auf- oder zugeklappt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>Ein Element wurde ausgewählt.</td></tr>
</table>
<p>Weitere (selten benutzte) Benachrichtigungen können mithilfe von <a href="../objects/GuiOnNotify.htm">OnNotify</a> erkannt werden. Diese Benachrichtigungen sind <a href="https://msdn.microsoft.com/library/ff486107">bei MSDN dokumentiert</a>. In der Regel zeigt MSDN keine numerischen Werte für die Benachrichtigungscodes an; diese können in der Windows SDK oder im Internet nachgeschlagen werden.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p id="Enter">Um die Eingabe einer <kbd>Enter</kbd>-Taste bei einer fokussierten TreeView zu erfassen, können Sie eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> nutzen (die man natürlich verstecken kann). Zum Beispiel:</p>
<pre>Gui.Add("Button", "Hidden Default", "OK").OnEvent("Click", "ButtonOK")
...
ButtonOK(*) {
    global
    if Gui.FocusedCtrl != TV
        return
    MsgBox("Sie haben ENTER gedrückt. Die ID des ausgewählten Elements ist " TV.GetSelection())
}</pre>
<p>Neben der Möglichkeit, mit der Tastatur von Element zu Element zu navigieren, könnte der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten Zeichen eines Elementnamens eingibt. Dabei springt die Auswahl auf das nächst passende Element.</p>
<p>Obwohl ein beliebig langer Text einem TreeView-Element zugewiesen werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Auch wenn die TreeView theoretisch maximal 65536 Elemente enthalten kann, wird die Leistung beim Hinzufügen von Elementen schon lange vorher merklich abnehmen. Diesen Verlust kann man etwas reduzieren, indem man sich den Hinweis bzgl. des Neuzeichnens in <a href="#Add">TV.Add</a> anschaut.</p>
<p id="ILremarks">Im Gegensatz zu den ImageLists einer <a href="ListView.htm">ListView</a> werden ImageLists einer TreeView nicht automatisch zerstört, wenn die TreeView zerstört wird. Demzufolge sollte ein Skript <a href="ListView.htm#IL_Destroy">IL_Destroy</a> nach dem Zerstören eines TreeView-Fensters aufrufen, wenn die ImageList nicht weiter benötigt wird. Dies ist jedoch nicht erforderlich, wenn das Skript bald beendet wird, da alle ImageLists automatisch zu diesem Zeitpunkt zerstört werden.</p>
<p>Ein Skript kann mehr als ein TreeView pro Fenster erstellen.</p>
<p>Schauen Sie sich das <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> an, um in Erfahrung zu bringen, wie eine TreeView größer/kleiner gemacht, versteckt oder ihre Schrift geändert werden kann.</p>
<p>Tree View eXtension (TVX) erweitert TreeViews mit der Möglichkeit, Elemente zu verschieben, einzufügen und zu löschen. Siehe dazu <a href="https://www.autohotkey.com/forum/topic19021.html">www.autohotkey.com/forum/topic19021.html</a>.</p>
<h2>Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="GuiCreate.htm">GuiCreate</a>, <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu-Ereignis</a>, <a href="../objects/GuiControl.htm">Gui-Objekt</a>, <a href="../objects/GuiControl.htm">GuiControl-Objekt</a>, <a href="../misc/Styles.htm#TreeView">Style-Tabelle von TreeView</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExAdvanced">
<p><a href="#ExAdvanced">#1</a>: Das folgende Skript ist aufwendiger als das Beispiel ganz oben. Es erstellt und zeigt eine TreeView an, die alle Startmenüordner von allen Benutzern enthält. Wenn der Benutzer einen Ordner auswählt, wird sein Inhalt auf der rechten Seite angezeigt (wie beim Windows Explorer). Darüber hinaus zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Informationen über den aktuell ausgewählten Ordner an:</p>
<pre><em>; Der folgende Ordner wird der Stammordner für die TreeView. Beachten Sie, dass das Laden lange dauern kann,
; wenn ein komplettes Laufwerk wie C:\ angegeben ist:</em>
Stammordner := A_MyDocuments
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth/2 - TreeViewBreite - 30

<em>; Erstellt das GUI-Fenster und zeigt das Quellverzeichnis (Stammordner) in der Titelleiste:</em>
Gui := GuiCreate("+Resize", Stammordner)  <em>; Erlaubt dem Benutzer, das Fenster zu maximieren oder dessen Größe beliebig anzupassen.</em>

<em>; Erstellt eine ImageList und fügt einige vordefinierte Systemsymbole ein:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; Erstellt eine <a href="#GuiAdd">TreeView</a> und ListView, um den Windows Explorer nachzuahmen:</em>
TV := <a href="#GuiAdd">Gui.Add</a>("TreeView", "r20 w" TreeViewBreite " <a href="#ImageList">ImageList</a>" ImageListID " vTV")
LV := Gui.Add("ListView", "r20 w" ListViewBreite " x+10 vLV", "Name|Bearbeitet")

<em>; Erstellt eine <a href="GuiControls.htm#StatusBar">Statusleiste</a>, um Infos über die Anzahl an Dateien und ihre Gesamtgrößen anzuzeigen:</em>
SB := Gui.Add("StatusBar", "vSB")
<a href="GuiControls.htm#SB_SetParts">SB.SetParts</a>(60, 85)  <em>; Erstellt drei Bereiche in der Leiste (der dritte Bereich füllt die restliche Breite).</em>

<em>; Fügt Ordner und deren Unterordner in die Baumstruktur ein. Zeigt ein Ladebildschirm an, wenn es etwas länger dauert:</em>
M := GuiCreate("ToolWindow -SysMenu", "Lade Baumstruktur ..."), M.Show()
VerzListe := SetzeUnterordnerInBaum(TV, Stammordner, {})
M.Hide()

<em>; Ruft TV_ItemSelect auf, wann immer ein neues Element ausgewählt wird:</em>
TV.OnEvent("ItemSelect", Func("TV_ItemSelect").bind(VerzListe))

<em>; Ruft Gui_Size auf, wann immer die Fenstergröße geändert wird:</em>
Gui.OnEvent("Size", "Gui_Size")

<em>; Setzt die Spaltenbreiten der ListView (optional):</em>
Spalte2Breite := 70  <em>; Kürzen, um nur den YYYYMMDD-Teil sichtbar zu machen.</em>
LV.ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Genug Platz für vertikalen Scrollbalken machen.</em>
LV.ModifyCol(2, Spalte2Breite)

<em>; Zeigt das Fenster. Das Skript wird benachrichtigt, wann immer Benutzer eine geeignete Aktion durchführt:</em>
Gui.Show

SetzeUnterordnerInBaum(TV, Ordner, VerzListe, OberelementID := 0)
{
    <em>; Diese Funktion fügt alle Unterordner eines bestimmten Ordners in die TreeView ein
    ; und speichert deren Pfade verbunden mit einer ID in ein Objekt zur späteren Benutzung.
    ; Außerdem ruft sie sich selbst rekursiv auf, um Unterordner in jeder Ebene zu sammeln.</em>
    Loop Files, Ordner "\*.*", "D"  <em>; Ermittelt alle Unterordner des Ordners.</em>
    {
        ElementID := <a href="#Add">TV.Add</a>(A_LoopFileName, OberelementID, "Icon4")
        VerzListe[ElementID] := A_LoopFilePath
        VerzListe := SetzeUnterordnerInBaum(TV, A_LoopFilePath, VerzListe, ElementID)
    }
    return VerzListe
}

TV_ItemSelect(VerzListe, TV, Element)  <em>; Diese Funktion wird aufgerufen, wenn ein neues Element ausgewählt wird.</em>
{
    <em>; Dateien in die ListView einfügen:</em>
    LV := TV.Gui["LV"]
    LV.Delete  <em>; Alle Reihen leeren.</em>
    LV.Opt("-Redraw")  <em>; Verbessert die Leistung durch Deaktivieren der Neuzeichnung während des Ladens.</em>
    Gesamtgröße := 0  <em>; Vorher für die untere Schleife initialisieren.</em>
    Loop Files, VerzListe[Element] "\*.*"  <em>; Der Einfachheit halber werden die Ordner weggelassen, um nur die Dateien in der Listview anzuzeigen.</em>
    {
        LV.Add(, A_LoopFileName, A_LoopFileTimeModified)
        Gesamtgröße += A_LoopFileSize
    }
    LV.Opt("+Redraw")

    <em>; Aktualisiert die drei Bereiche der Statusleiste, um Infos über den aktuell ausgewählten Ordner anzuzeigen:</em>
    SB := TV.Gui["SB"]
    <a href="GuiControls.htm#SB_SetText">SB.SetText</a>(LV.GetCount() " Dateien", 1)
    SB.SetText(Round(Gesamtgröße / 1024, 1) " KB", 2)
    SB.SetText(VerzListe[Element], 3)
}

Gui_Size(this, MinMax, Breite, Höhe)  <em>; Vergrößert/Verkleinert die ListView und TreeView, wenn der Benutzer das Fenster skaliert.</em>
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
        return
    <em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Steuerelements anpassen.</em>
    this["TV"].Move("H" Höhe - 30)  <em>; -30 für Statusleiste und Abstände.</em>
    this["LV"].Move("H" Höhe - 30 " W" Breite - this["TV"].Pos.W - 30)
}</pre>

</div>
</body>
</html>
