<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop Files - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Loop-Files-Anweisung ruft bestimmte Dateien oder Ordner einzeln ab." />
<meta name="ahk:equiv-v1" content="commands/LoopFile.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop Files</h1>
<p>Ruft bestimmte Dateien oder Ordner einzeln ab.</p>

<pre class="Syntax"><span class="func">Loop Files</span> Dateimuster <span class="optional">, Modus</span></pre>

<h2>Parameter</h2>
<dl>

  <dt>Dateimuster</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Name einer Datei, eines Ordners oder eines Platzhaltermusters wie "C:\Temp\*.tmp". Wenn kein absoluter Pfad angegeben ist, wird <em>Dateimuster</em> im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
      <p>Sowohl Sternchen als auch Fragezeichen werden als Platzhalter unterstützt. Eine Übereinstimmung erfolgt, wenn das Muster entweder im langen/normalen oder <a href="#LoopFileShortName">8.3-kurzen Dateinamen</a> erscheint.</p>
      <p>Wenn dieser Parameter eine einzelne Datei oder ein Ordner ist (also ohne Platzhalter), und enthält <em>Modus</em> ein <code>R</code>, werden mehrere Übereinstimmungen gefunden, wenn der angegebene Dateiname in mehreren Ordnern vorkommt.</p>
  </dd>

  <dt>Modus</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine optionale Zeichenkette, die aus folgenden Buchstaben bestehen kann:</p>
      <p><code>D</code>: Verzeichnisse (Ordner) einbeziehen.<br>
      <code>F</code>: Dateien einbeziehen. Lässt man sowohl F als auch D weg, werden nur Dateien einbezogen, keine Ordner.<br>
      <code>R</code>: Unterverzeichnisse (Unterordner) werden auch mit einbezogen. Es werden alle Unterordner rekursiv durchsucht, nicht nur solche, die dem <em>Dateimuster</em> entsprechen. Lässt man R weg, werden Dateien und Ordner in den Unterordnern nicht mit einbezogen.</p>
  </dd>
  
</dl>

<h2>Verfügbare Sondervariablen innerhalb einer Dateimuster-Schleife</h2>
<p>Die folgenden Variablen existieren innerhalb einer Dateimuster-Schleife. Wenn eine innere Dateimuster-Schleife von einer äußeren Dateimuster-Schleife umschlossen ist, wird die Datei von der innersten Schleife Vorrang haben:</p>
<table class="info">
  <tr id="LoopFileName">
    <td>A_LoopFileName</td>
    <td>Der aktuell abgerufene Name der Datei oder des Ordners (ohne Pfad).</td>
  </tr>
  <tr id="LoopFileExt">
    <td>A_LoopFileExt</td>
    <td>Die Dateiendung (z. B. TXT, DOC oder EXE). Der Punkt (.) ist nicht enthalten.</td>
  </tr>
  <tr id="LoopFilePath">
    <td>A_LoopFilePath</td>
    <td>Der aktuell abgerufene Pfad und Name der Datei oder des Ordners. Enthält <em>Dateimuster</em> einen relativen anstelle eines absoluten Pfades, wird der Pfad in dieser Variable auch relativ sein. Wenn ein 8.3-kurzer Ordnername in <em>Dateimuster</em> angegeben ist, wird er in dieser Variable auch kurz sein (siehe den nächsten Punkt, wie die lange Version ermittelt werden kann).</td>
  </tr>
  <tr id="LoopFileFullPath">
    <td>A_LoopFileFullPath</td>
    <td>Diese Variable unterscheidet sich von A_LoopFilePath wie folgt: 1) Sie enthält immer den absoluten/kompletten Pfad der Datei, auch dann, wenn <em>Dateimuster</em> einen relativen Pfad enthält; 2) 8.3-kurze Ordnernamen in <em>Dateimuster</em> werden in ihren langen Namen umgewandelt; 3) Die Zeichen in <em>Dateimuster</em> werden an die Groß- und Kleinschreibung angepasst, wie sie aktuell im Dateisystem gilt. Diese Variable ist für Dateinamen nützlich -- z. B. solche, die als Befehlszeilenparameter an das Skript übergeben werden -- die in ihren exakten Pfadnamen umgewandelt werden sollen, wie sie vom Explorer angezeigt werden.</td>
  </tr>
  <tr id="LoopFileShortPath">
    <td>A_LoopFileShortPath</td>
    <td><p>Der aktuell abgerufene 8.3-kurze Pfad und Name der Datei oder des Ordners. Zum Beispiel: C:\MEINED~1\ADRESS~1.TXT. Enthält <em>Dateimuster</em> einen relativen anstelle eines absoluten Pfades, wird der Pfad in dieser Variable auch relativ sein.</p>
      <p>Das folgende Beispiel zeigt, was <em>Dateimuster</em> enthalten muss, um den kompletten 8.3-Pfad und -Name einer Datei oder eines Ordners abzurufen:</p>
<pre>Loop Files, "C:\Meine Dokumente\Adressenliste.txt"
    KurzerPfadname := A_LoopFileShortPath</pre>
        <p class="note"><strong>Hinweis</strong>: Diese Variable wird <strong>leer</strong> sein, wenn die Datei keinen kurzen Namen hat. Dies könnte beispielsweise passieren, wenn NtfsDisable8dot3NameCreation in der Registry angegeben ist. Sie wird auch leer sein, wenn <em>Dateimuster</em> einen relativen Pfad enthält und der Schleifenkörper <a href="SetWorkingDir.htm">SetWorkingDir</a> verwendet, um von dem eigentlichen Arbeitsverzeichnis der Schleife wegzuschalten.</p></td>
  </tr>
  <tr id="LoopFileShortName">
    <td>A_LoopFileShortName</td>
    <td>Der 8.3-kurze Name oder alternative Name der Datei. Hat die Datei so einen Namen nicht (weil der lange Name kürzer ist als der 8.3-Name, oder vielleicht, weil die Kurznamengenerierung auf einem NTFS-Dateisystem deaktiviert ist), wird <em>A_LoopFileName</em> stattdessen abgerufen.</td>
  </tr>
  <tr id="LoopFileDir">
    <td>A_LoopFileDir</td>
    <td>Der Pfad des Verzeichnisses, in dem sich <em>A_LoopFileName</em> befindet. Enthält <em>Dateimuster</em> einen relativen anstelle eines absoluten Pfades, wird der Pfad in dieser Variable auch relativ sein. Der umgekehrte Schrägstrich bei einem Root-Verzeichnis ist nicht enthalten. Zum Beispiel: C:</td>
  </tr>
  <tr id="LoopFileTimeModified">
    <td>A_LoopFileTimeModified</td>
    <td>Der Zeitpunkt, wann die Datei modifiziert wurde. <a href="FileSetTime.htm">YYYYMMDDHH24MISS</a>-Format.</td>
  </tr>
  <tr id="LoopFileTimeCreated">
    <td>A_LoopFileTimeCreated</td>
    <td>Der Zeitpunkt, wann die Datei erstellt wurde. <a href="FileSetTime.htm">YYYYMMDDHH24MISS</a>-Format.</td>
  </tr>
  <tr id="LoopFileTimeAccessed">
    <td>A_LoopFileTimeAccessed</td>
    <td>Der Zeitpunkt, wann auf die Datei zugegriffen wurde. <a href="FileSetTime.htm">YYYYMMDDHH24MISS</a>-Format.</td>
  </tr>
  <tr id="LoopFileAttrib">
    <td>A_LoopFileAttrib</td>
    <td>Die <a href="FileGetAttrib.htm">Attribute</a> der aktuell abgerufenen Datei.</td>
  </tr>
  <tr id="LoopFileSize">
    <td>A_LoopFileSize</td>
    <td>Die Größe in Bytes der aktuell abgerufenen Datei. Dateien größer als 4 Gigabyte werden ebenfalls unterstützt.</td>
  </tr>
  <tr id="LoopFileSizeKB">
    <td>A_LoopFileSizeKB</td>
    <td>Die Größe in Kilobytes der aktuell abgerufenen Datei, abgerundet auf den nächsten Integer.</td>
  </tr>
  <tr id="LoopFileSizeMB">
    <td>A_LoopFileSizeMB</td>
    <td>Die Größe in Megabytes der aktuell abgerufenen Datei, abgerundet auf den nächsten Integer.</td>
  </tr>
</table>

<h2>Bemerkungen</h2>
<p>Eine Dateimuster-Schleife ist nützlich, wenn Sie mehrere Dateien und/oder Ordner einzeln abarbeiten wollen.</p>
<p>Alle übereinstimmenden Dateien werden abgerufen, einschließlich versteckter Dateien. Aber Betriebssystem-Features wie der DIR-Befehl ignorieren versteckte Dateien. Um zum Beispiel versteckte, system-spezifische und/oder schreibgeschützte Dateien innerhalb einer Schleife zu überspringen, fügt man folgende If-Anweisung ein:</p>
<pre>if A_LoopFileAttrib ~= "[HRS]"  <em>; Überspringt jede Datei, die H (versteckt), R (schreibgeschützt) oder S (system-spezifisch) ist. Siehe <a href="../Variables.htm#regex">Tilde-Operator</a>.</em>
    continue  <em>; Überspringt diese Datei und geht zur nächsten über.</em></pre>
<p>Um bei einer rekursiven Suche relative statt absolute Pfade von Dateien abzurufen, ist es erforderlich, <a href="SetWorkingDir.htm">SetWorkingDir</a> zu verwenden, um den Basisordner für die nachfolgende Schleife zu bestimmen, und dann die Schleife ohne Pfad anzugeben (z. B. <code>Loop Files, "*.*", "R"</code>). Dies hat zur Folge, dass <a href="#LoopFilePath">A_LoopFilePath</a> einen Dateipfad enthalten wird, der relativ zum Basisordner ist.</p>
<p>Eine Dateimuster-Schleife kann sich selbst unterbrechen, wenn sie Dateien oder Ordner innerhalb ihres eigenen Bereichs erstellt oder umbenennt. Wenn sie Dateien beispielsweise via <a href="FileMove.htm">FileMove</a> oder auf eine andere Art umbenennen würde, könnten solche Dateien zweimal gefunden werden: einmal mit ihrem alten Namen und nochmals mit ihrem neuen Namen. Um das umgehen, ist es ratsam, zuerst eine Liste zu erstellen, bevor man die Dateien umbenennt. Zum Beispiel:</p>
<pre>Dateiliste := ""
Loop Files, "*.jpg"
    Dateiliste .= A_LoopFileName "`n"
Loop Parse, Dateiliste, "`n"
    FileMove A_LoopField, "umbenannt_" A_LoopField</pre>
<p>Dateien in einem NTFS-Dateisystem werden wahrscheinlich immer in alphabetischer Reihenfolge abgerufen. Die Reihenfolge bei anderen Dateisystemen ist unbestimmt. Im Beispiel-Abschnitt unten wird gezeigt, wie die <a href="Sort.htm">Sort</a>-Funktion genutzt werden kann, um eine konsistente Reihenfolge zu gewährleisten.</p>
<p>Dateien und Ordner mit einem kompletten Pfad länger als 259 Zeichen werden übersprungen, als wären sie nicht vorhanden. Dieses Problem tritt jedoch nur selten auf, weil das Betriebssystem solche Pfadnamen normalerweise nicht erlaubt.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>

<h2>Siehe auch</h2>
<p><a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2>Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>Loop Files, A_ProgramFiles "\*.txt", "R"  <em>; Durchsucht Unterordner.</em>
{
    Result := MsgBox(Dateiname = " A_LoopFilePath "`n`nWeiter?",, "y/n")
    if Result = "No"
        break
}</pre>
</div>

<div class="ex" id="ExSize">
<p><a href="#ExSize">#2</a>: Berechnet die Größe eines Ordners mitsamt der Dateien in seinen Unterordnern:</p>
<pre>OrdnerGrößeKB := 0
WelcherOrdner := DirSelect()  <em>; Fordert den Benutzer auf, einen Ordner auszuwählen.</em>
Loop Files, WelcherOrdner "\*.*", "R"
    OrdnerGrößeKB += A_LoopFileSizeKB
MsgBox "Der Ordner " WelcherOrdner " hat eine Größe von " OrdnerGrößeKB " KB."</pre>
</div>

<div class="ex" id="ExSortName">
<p><a href="#ExSortName">#3</a>: Ruft Dateinamen ab, sortiert nach Name (siehe nächstes Beispiel, wie nach Datum sortiert werden kann):</p>
<pre>Dateiliste := ""  <em>; Initialisiert sie als leere Variable.</em>
Loop Files, "C:\*.*"
    Dateiliste .= A_LoopFileName "`n"
Dateiliste := Sort(Dateiliste, "R")  <em>; Die R-Option sortiert in umgekehrter Richtung. Siehe <a href="Sort.htm">Sort</a> für weitere Optionen.</em>
Loop Parse, Dateiliste, "`n"
{
    if A_LoopField = ""  <em>; Ignoriert das leere Element am Ende der Liste.</em>
        continue
    Result := MsgBox("Dateinummer " A_Index " ist " A_LoopField ".  Weiter?",, "y/n")
    if Result = "No"
        break
}</pre>
</div>

<div class="ex" id="ExSortDate">
<p><a href="#ExSortDate">#4</a>: Ruft Dateinamen ab, sortiert nach Änderungsdatum:</p>
<pre>Dateiliste := ""
Loop Files, A_MyDocuments "\Fotos\*.*", "FD"  <em>; Bezieht Dateien und Ordner mit ein</em>
    Dateiliste .= A_LoopFileTimeModified "`t" A_LoopFileName "`n"
Dateiliste := Sort(Dateiliste)  <em>; Sortiert nach Datum.</em>
Loop Parse, Dateiliste, "`n"
{
    if A_LoopField = "" <em>; Ignoriert das letzte LF-Zeichen (leere Element) am Ende der Liste.</em>
        continue
    Dateielement := StrSplit(A_LoopField, A_Tab)  <em>; Teilt es bei einem Tab-Zeichen in zwei Teile auf.</em>
    Result := MsgBox("Die nächste Datei ist (modifiziert am " Dateielement[1] "):`n" Dateielement[2] "`n`nWeiter?",, "y/n")
    if Result = "No"
        break
}</pre>
</div>

<div class="ex" id="ExFileCopy">
<p><a href="#ExFileCopy">#5</a>: Kopiert nur Quelldateien, die neuer sind als ihr Gegenstück, in das Ziel:</p>
<pre>KopiereWennNeuer:
<em>; Der Aufrufer hat die Variablen KopieQuellmuster und KopieZiel für uns gesetzt.</em>
Loop Files, KopieQuellmuster
{
    kopiere_es := false
    if !FileExist(KopieZiel "\" A_LoopFileName)  <em>; Kopiert immer die Zieldatei, wenn sie noch nicht existiert.</em>
        kopiere_es := true
    else
    {
        Zeitstempel := FileGetTime(KopieZiel "\" A_LoopFileName)
        Zeitstempel := DateDiff(A_Now, A_LoopFileTimeModified, "Seconds")  <em>; Subtrahiert die Zeit der Quelldatei mit der Zeit der Zieldatei.</em>
        if Zeitstempel &lt; 0  <em>; Quelldatei ist neuer als Zieldatei.</em>
            kopiere_es := true
    }
    if kopiere_es
    {
        FileCopy A_LoopFilePath, KopieZiel "\" A_LoopFileName, 1   <em>; Kopiert und überschreibt sie bei Bedarf</em>
        if ErrorLevel
            MsgBox '"' A_LoopFilePath '" konnte nicht nach "' KopieZiel '\' A_LoopFileName '" kopiert werden.'
    }
}
Return</pre>
</div>

<div class="ex" id="ExLongPath">
<p><a href="#ExLongPath">#6</a>: Wandelt Dateinamen, die via Kommandozeilenparameter übergeben wurden, in lange Namen um, mit vollständigem Pfad und korrekter Groß-/Kleinschreibung, wie sie im Dateisystem vorkommen.</p>
<pre>Loop A_Args.Length()  <em>; Für jeden Parameter (oder für jede auf ein Skript gezogene Datei):</em>
{
    EingabePfad := A_Args[A_Index]
    Loop Files, EingabePfad, "FD"  <em>; Dateien und Verzeichnisse einbeziehen.</em>
        LangerPfad := A_LoopFilePath
    MsgBox "Der lange Pfadname mit korrekter Groß-/Kleinschreibung der Datei`n" EingabePfad "`nist:`n" LangerPfad
}</pre>
</div>

</body>
</html>
