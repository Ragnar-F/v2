<!DOCTYPE HTML>
<html>
<head>
<title>Loop (Dateiinhalt lesen)</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (Dateiinhalt lesen)</h1>

<p>Ruft die Zeilen einer Textdatei einzeln ab.</p>

<pre class="Syntax">Loop, Read, Eingabedatei [, Ausgabedatei]
LoopRead(Eingabedatei [, Ausgabedatei])</pre>
<h3>Parameter</h3>
<dl>

  <dt>Read</dt>
  <dd><p>Dieser Parameter muss das Wort READ sein, und darf weder ein Ausdruck noch ein Variablenverweis sein.</p></dd>

  <dt>Eingabedatei</dt>
  <dd><p>Name der Textdatei, die im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet wird, wenn kein absoluter Pfad angegeben ist. Windows- und Unix-Formate werden unterstützt; das heißt, dass die Zeilen einer Datei entweder mit einem CR-LF-Paar (`r`n) oder LF-Zeichen (`n) enden können.</p></dd>

  <dt>Ausgabedatei</dt>
  <dd><p>(Optional) Name der Datei, die während der Schleife offen bleibt. Sie wird im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet, wenn kein absoluter Pfad angegeben ist.</p>
      <p>Innerhalb der Schleife braucht der <a href="FileAppend.htm">FileAppend</a>-Befehl nur einen Parameter, um den zu schreibenden Text an die spezielle Datei anzufügen. Diese Art von Anfügen ist leistungsfähiger als <a href="FileAppend.htm">FileAppend</a> im 2-Parameter-Modus, weil es verhindert, dass die Datei bei jeder Operation geschlossen und neu geöffnet wird. Achte darauf, ein LF-Zeichen (`n) nach dem Text einzufügen, falls notwendig.</p>
      <p>Die Datei wird nie geöffnet, wenn nichts zu schreiben ist. Zum Beispiel wenn die Schleife nie durchlaufen wird oder nie den <a href="FileAppend.htm">FileAppend</a>-Befehl verwendet.</p>
          <p><strong>End-of-Line-Übersetzung (EOL)</strong>: Um die EOL-Übersetzung zu deaktivieren, musst du ein Sternchen vor dem Dateinamen setzen. Dieser Modus schreibt jedes Zeilenumbruchszeichen (`n) als einzelnes LF-Zeichen (LF), anstatt üblicherweise als CR+LF. Zum Beispiel: <code><strong>*</strong>C:\Meine Unix-Datei.txt</code>. Selbst wenn das Sternchen nicht angegeben ist - die EOL-Übersetzung wird automatisch deaktiviert, wenn das <u>erste</u> in der Schleife vorkommende <a href="FileAppend.htm">FileAppend</a> ein CR-LF-Paar (`r`n) schreibt.</p>
      <p><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>Ausgabedatei</em> bewirkt, dass ein von <a href="FileAppend.htm">FileAppend</a> geschriebener Text zur Standardausgabe (stdout) gesendet wird. Zwar kann so eine Augabe auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden, allerdings erscheint sie nicht in der Eingabeaufforderung, von wo aus sie gestartet wurde. Siehe <a href="FileAppend.htm">FileAppend</a> für mehr Details.</p>
      <p><strong>Escapezeichen-versehene Kommas</strong>: Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>Ausgabedatei</em> mit einem Escapezeichen versehen werden (`,).</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Eine Datei-lesende Schleife ist nützlich, wenn du alle Zeilen in einer Textdatei einzeln abarbeiten willst. Die Datei wird die ganze Zeit offen gelassen, um zu verhindern, dass sie für jede neue Zeile neu eingelesen werden muss.</p>
<p id="LoopReadLine">Die Built-in-Variable <strong>A_LoopReadLine</strong> ist nur in einer Datei-lesenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Zeile ohne das CR-LF-Paar (`r`n) am Ende. Wenn eine innere Datei-lesende Schleife von einer äußeren Datei-lesenden Schleife umschlossen ist, wird die Zeile von der innersten Schleife Vorrang haben.</p>
<p>Es können Zeilen gelesen werden, die bis zu 65.534 Zeichen lang sind. Wenn eine Zeile diese Länge überschreitet, werden die restlichen Zeichen während des nächsten Schleifendurchlaufs gelesen.</p>
<p>In einer Datei-lesenden Schleife wird oft der <a href="StrSplit.htm">StrSplit</a>-Befehl oder eine <a href="LoopParse.htm">parsende Schleife</a> verwendet, um den Inhalt von jeder Zeile zu parsen, die in <em>Eingabedatei</em> gefunden wurde. Wenn jede Zeile in <em>Eingabedatei</em> beispielsweise aus mehreren tab-getrennten Feldern besteht, können solche Felder wie folgt einzeln abgerufen werden:</p>
<pre>Loop, read, C:\Datenbank-Export.txt
{
    Loop, parse, %A_LoopReadLine%, %A_Tab%
    {
        MsgBox, Feldnummer %A_Index% ist %A_LoopField%.
    }
}</pre>
<p>Um eine komplette Datei in eine Variable zu laden, verwende <a href="FileRead.htm">FileRead</a>, weil es deutlich leistungsfähiger ist als eine Schleife (besonders bei großen Dateien).</p>
<p>Um mehrere Dateien gleichzeitig offen zu haben, muss DllCall() wie in <a href="DllCall.htm#file">diesem Beispiel</a> verwendet werden.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite findest du Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>
<p>Mit <a href="FileEncoding.htm">FileEncoding</a> kannst du kontrollieren, wie die Datei decodiert ist, wenn sie keine Bytereihenfolge-Markierung hat.</p>

<h3>Siehe auch</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1: Zeilen, die in der ersten Datei das Wort FAMILIE enthalten, werden in die zweite Datei geschrieben.
; Hebe die Kommentierung der ersten Zeile auf, um die Zeilen zu überschreiben,
; anstatt sie an die vorhandene Datei anzufügen.
;FileDelete, C:\Dokumente\Familie-Adressen.txt</em>

Loop, read, C:\Dokumente\Adressliste.txt, C:\Dokumente\Familie-Adressen.txt
{
    if InStr(A_LoopReadLine, "Familie"), FileAppend("%A_LoopReadLine%`n")
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #2: Ruft die letzte Zeile einer Textdatei ab.</em>
Loop, read, C:\Logdatei.txt
    letzteZeile := A_LoopReadLine  <em>; Sobald die Schleife endet, wird diese Variable die letzte Zeile beinhalten.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #3: Das folgende Beispiel zeigt, wie alle FTP- und HTTP-URLs
; aus einer Text- oder HTML-Datei extrahiert werden können:</em>
FileSelect, Quelldatei, 3,, Wähle eine Text- oder HTML-Datei zum Analysieren aus:
if Quelldatei = ""
    return  <em>; In diesem Fall beenden.</em>

SplitPath, %Quelldatei%,, Quelldateipfad,, QuelldateiOhneEndung
Zieldatei := "%Quelldateipfad%\%QuelldateiOhneEndung% Extrahierte Links.txt"

if FileExist(Zieldatei)
{
    Result := MsgBox("Vorhandene Datei überschreiben? Drücke Nein, um die Links nur anzufügen.`n`nDATEI: %Zieldatei%",, 4)
    if Result = "Yes"
        FileDelete, %Zieldatei%
}

Linkanzahl := 0
Loop, read, %Quelldatei%, %Zieldatei%
{
    URLSuchZeichenkette := A_LoopReadLine
    Gosub, URLSuche
}
MsgBox %Linkanzahl% Links wurden gefunden und in "%Zieldatei%" geschrieben.
return


URLSuche:
<em>; Das wird auf diese Weise gemacht, weil einige URLs andere URLs eingebettet haben:</em>
URLStart1 := InStr(URLSuchZeichenkette, "http://")
URLStart2 := InStr(URLSuchZeichenkette, "ftp://")
URLStart3 := InStr(URLSuchZeichenkette, "www.")

<em>; Findet die Startposition ganz links:</em>
URLStart := URLStart1  <em>; Setzt den Standardwert.</em>
Loop
{
    <em>; Es hilft der Performance (zumindest in einem Skript mit vielen Variablen), wenn</em>
    <em>; "URLStart%A_Index%" nur einmal aufgelöst wird:</em>
    ArrayElement := URLStart%A_Index%
    if ArrayElement = ""  <em>; Ende des <a href="../misc/Arrays.htm#pseudo">Pseudo-Arrays</a> erreicht.</em>
        break
    if !ArrayElement  <em>; Dieses Element ist disqualifiziert.</em>
        continue
    if !URLStart
        URLStart := ArrayElement
    else <em>; URLStart beinhaltet eine gültige Position, also mit ArrayElement vergleichen.</em>
    {
        if ArrayElement
            if ArrayElement &lt; URLStart
                URLStart := ArrayElement
    }
}

if !URLStart  <em>; Keine URLs in der URLSuchZeichenkette.</em>
    return

<em>; Extrahiert ansonsten diese URL:</em>
URL := SubStr(URLSuchZeichenkette, URLStart)  <em>; Entfernt den beginnenden/irrelevanten Teil.</em>
Loop, parse, %URL%, %A_Tab%%A_Space%&lt;&gt;  <em>; Findet das erste Leer-, Tab- oder Winkelzeichen (falls vorhanden).</em>
{
    URL := A_LoopField
    break  <em>; Führt nur eine Schleifeniteration durch, um das erste "Feld" zu holen.</em>
}
<em>; Wenn die obige Schleife aufgrund eines nicht-vorhandenen Endungszeichen keine Iteration hat,
; bleibt der Inhalt der URL-Variable unberührt.</em>

<em>; Wenn die URL mit einem Anführungszeichen endet, wird sie entfernt.  Vorerst wird StrReplace verwendet, aber
; beachte, dass Anführungszeichen in URLs legitim sind, so dass sie dadurch
; beschädigt werden könnten:</em>
StrReplace, SaubereURL, %URL%, `"
FileAppend, %SaubereURL%`n
Linkanzahl += 1

<em>; Schaut nach, ob noch andere URLs in dieser Zeile vorkommen:</em>
StringLen, ZuEntfernendeZeichen, URL
ZuEntfernendeZeichen += URLStart
URLSuchZeichenkette := SubStr(URLSuchZeichenkette, ZuEntfernendeZeichen)
Gosub, URLSuche  <em>; Ruft sich nochmals selbst auf.</em>
return</pre>

</body>
</html>
