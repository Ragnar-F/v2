<!DOCTYPE HTML>
<html>
<head>
<title>FileOpen</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<style type="text/css">.fopt{width:4em;text-align:center}.fnum{width:4em;text-align:right}</style>
</head>
<body>

<h1>FileOpen</h1>

<p>Öffnet eine Datei.</p>
<pre class="Syntax">File := <span class="func">FileOpen</span>(Dateiname, Flags <span class="optional">, Codierung</span>)</pre>

<h3>Parameter</h3>
<dl>

  <dt>Dateiname</dt>
  <dd>
    <p>Name der zu öffnenden Datei, die sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist.</p>
    <p>Geben Sie ein Sternchen (oder zwei) wie unten gezeigt an, um die Standardeingabe, Standardausgabe oder Standardfehlerausgabe zu öffnen:</p>
    <pre>
FileOpen("*", "r")   <em>; für stdin</em>
FileOpen("*", "w")   <em>; für stdout</em>
FileOpen("**", "w")  <em>; für stderr</em></pre>
  </dd>

  <dt>Flags</dt>
  <dd><p>Entweder eine Zeichenkette mit Zeichen für den gewünschten Zugriffsmodus, gefolgt von anderen Optionen (optional getrennt durch Leerzeichen und Tabulatoren); oder eine Kombination (Summe) von numerischen Flags. Unterstützte Werte werden in den folgenden Tabellen beschrieben.</p></dd>

  <dt>Codierung</dt>
  <dd><p>Der Zeichensatz, der zur Textverarbeitung verwendet werden soll, falls die Datei keine UTF-8- oder UTF-16-<a href="http://de.wikipedia.org/wiki/Byte_Order_Mark">Byte-Order-Markierung</a> enthält, oder wenn das <code>h</code> (Handle) benutzt wird. Fehlt dieser Parameter, wird der aktuelle Wert von <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet.</p></dd>

</dl>
<h3>Flags</h3>
  <h4>Zugriffsmodi (schließen sich gegenseitig aus)</h4>
<table class="info">
  <tr><th style="width:4em">Flag</th><th style="width:4em">Nummer</th><th style="text-align:left">Beschreibung</th></tr>
  <tr><td class="fopt">r</td><td class="fnum">0</td><td><i>Lesen</i>: Schlägt fehl, falls die Datei noch nicht vorhanden ist.</td></tr>
  <tr><td class="fopt">w</td><td class="fnum">1</td><td><i>Schreiben</i>: Erstellt eine neue Datei oder <b style="color:red">überschreibt die vorhandene Datei</b>.</td></tr>
  <tr><td class="fopt">a</td><td class="fnum">2</td><td><i>Anfügen</i>: Erstellt eine neue Datei, falls diese noch nicht vorhanden ist, ansonsten wird der Datei-Pointer ans Ende der Datei gesetzt.</td></tr>
  <tr><td class="fopt">rw</td><td class="fnum">3</td><td><i>Lesen/Schreiben</i>: Erstellt eine neue Datei, falls diese noch nicht vorhanden ist.</td></tr>
  <tr><td class="fopt">h</td><td>&nbsp;</td><td>Kennzeichnet, dass <i>Dateiname</i> ein Datei-Handle ist, der in ein Objekt eingebunden werden kann. Ignoriert Freigabemodus-Flags und verhindert, dass in der Datei oder im Stream des Handle eine Byte-Order-Markierung (BOM) gesucht wird. Das Datei-Handle wird <b>nicht</b> automatisch geschlossen, wenn das File-Objekt gelöscht wird oder das Aufrufen von <a href="../objects/File.htm#Close">Close</a> keine Wirkung hat. Beachten Sie, dass <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> und <a href="../objects/File.htm#Length">Length</a> nicht verwendet werden sollten, wenn <i>Dateiname</i> ein Handle für ein nicht-suchendes Device wie Pipe- oder Kommunikation-Device ist.</td></tr>
</table>
  <h4>Freigabemodus-Flags</h4>
<table class="info">
  <tr><th>Flag</th><th>Nummer</th><th style="text-align:left">Beschreibung</th></tr>
  <tr><td class="fopt" style="white-space:nowrap">-rwd</td><td>&nbsp;</td><td>Sperrt die Datei für Lese-, Schreib- und/oder Löschzugriff. Es sind beliebige Kombinationen mit <code>r</code>, <code>w</code> und <code>d</code> möglich. Die Angabe von <code>-</code> ist das gleiche wie, als würde man <code>-rwd</code> angeben. Falls weggelassen, wird jeder Zugriff freigegeben.</td></tr>
  <tr><td>&nbsp;</td><td class="fnum">0</td><td>Ist <i>Flags</i> numerisch, bewirkt das Fehlen von Freigabemodus-Flags, dass die Datei gesperrt wird.</td></tr>
  <tr><td>&nbsp;</td><td class="fnum">0x100</td><td><i>Lesezugriff</i> freigeben.</td></tr>
  <tr><td>&nbsp;</td><td class="fnum">0x200</td><td><i>Schreibzugriff</i> freigeben.</td></tr>
  <tr><td>&nbsp;</td><td class="fnum">0x400</td><td><i>Löschzugriff</i> freigeben.</td></tr>
</table>
  <h4>Zeilenumbruchsoptionen (EOL)</h4>
<table class="info">
  <tr><th>Flag</th><th>Nummer</th><th style="text-align:left">Beschreibung</th></tr>
  <tr><td class="fopt"><code>`n</code></td><td class="fnum">4</td><td>Ersetzt beim Schreiben <code>`r`n</code> mit <code>`n</code>  und beim Lesen <code>`n</code> mit <code>`r`n</code>.</td></tr>
  <tr><td class="fopt"><code>`r</code></td><td class="fnum">8</td><td>Ersetzt beim Schreiben das alleinstehende <code>`r</code> mit <code>`n</code>.</td></tr>
</table>

<h3>Rückgabewert</h3>
<p>Wurde die Datei erfolgreich geöffnet, wird der Rückgabewert ein <a href="../objects/File.htm">File-Objekt</a> sein.</p>
<p>Schlägt die Funktion fehl, wird der Rückgabewert eine 0 sein und <a href="../Variables.htm#LastError">A_LastError</a> einen Fehlercode enthalten.</p>
<p>Mit <code>if File</code> oder <code>IsObject(File)</code> kann man überprüfen, ob die Funktion erfolgreich war.</p>

<h3>Bemerkungen</h3>
<p><a href="../objects/File.htm#ReadLine">File.ReadLine</a> unterstützt immer <code>`n</code>, <code>`r`n</code> und <code>`r</code> als Zeilenenden, allerdings sind sie nicht im Rückgabewert enthalten, egal ob die Optionen <code>`r</code> oder <code>`n</code> benutzt werden oder nicht. Die Optionen haben nur Einfluss auf die Zeilenendenumwandlung innerhalb eines Textes, der von <a href="../objects/File.htm#Read">File.Read</a> zurückgegeben oder von <a href="../objects/File.htm#Write">File.Write</a> oder <a href="../objects/File.htm#WriteLine">File.WriteLine</a> geschrieben wurde.</p>
<p>Beim Erstellen einer UTF-8- oder UTF-16-Datei wird eine Byte-Order-Markierung (BOM) in die Datei geschrieben, <b>es sei denn</b>, <i>Codierung</i> (oder <a href="FileEncoding.htm">A_FileEncoding</a>, falls <i>Codierung</i> weggelassen wird) enthält "UTF-8-RAW" oder "UTF-16-RAW".</p>
<p>Sobald eine Datei, die eine UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) hat, mit Lesezugriff geöffnet wird, wird die BOM von der Ausgabe ausgeschlossen, indem der Datei-Pointer daneben gesetzt wird. Folglich würde <code>File.Position</code> unmittelbar nach Öffnen der Datei 3 oder 2 melden.</p>

<h3>Siehe auch</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent" id="writeread"><em>; Beispiel: Dieses Skript schreibt etwas Text in eine Datei und liest ihn zurück in den Speicher.
; Es stellt die gleiche Funktionalität wie dieses <a href="DllCall.htm#file">DllCall-Beispiel</a> bereit.</em>

Dateiname := FileSelect("S16",, "Neue Datei erstellen:")
if (Dateiname = "")
	return
File := FileOpen(Dateiname, "w")
if !IsObject(File)
{
	MsgBox "Kann '" Dateiname "' nicht zum Schreiben öffnen."
	return
}
TestZeichenkette := "Das ist eine Zeichenkette.`r`n"  <em>; Wenn eine Datei auf diese Weise geschrieben wird, sollte `r`n anstelle von `n verwendet werden, um eine neue Zeile zu beginnen.</em>
File.Write(TestZeichenkette)
File.Close()

<em>; Nachdem die Datei geschrieben wurde, soll deren Inhalt zurück in den Speicher gelesen werden.</em>
File := FileOpen(Dateiname, "r-d") <em>; Liest die Datei ("r"), gibt alle Zugriffe außer Löschen ("-d") frei</em>
if !IsObject(File)
{
	MsgBox "Kann '" Dateiname "' nicht zum Lesen öffnen."
	return
}
ZuLesendeZeichen := StrLen(TestZeichenkette)
TestZeichenkette := File.Read(ZuLesendeZeichen)
File.Close()
MsgBox "Die folgende Zeichenkette wurde aus der Datei gelesen: " TestZeichenkette</pre>

<pre class="NoIndent"><em>; Öffnet das Skript im Schreibschutzmodus und liest die erste Zeile:</em>
File := FileOpen(A_ScriptFullPath, "r")
MsgBox File.ReadLine()

<em>; Öffnet ein Konsolenfenster für diese Demonstration:</em>
DllCall("AllocConsole")
<em>; Öffnet die stdin/stdout-Ströme der Anwendung.</em>
stdin  := FileOpen("*", "r")
stdout := FileOpen("*", "w")
stdout.Write("Bitte Anfrage eingeben.`n\&gt; ")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Abfrage := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Die Anfrage war '" Abfrage "'. Einen schönen Tag noch.")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Sleep 5000
</pre>
</body>
</html>
