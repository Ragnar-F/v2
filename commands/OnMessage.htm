<!DOCTYPE HTML>
<html>
<head>
<title>OnMessage</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>OnMessage</h1>

<p>Bestimmt eine <a href="../Functions.htm">Funktion</a> oder ein <a href="../objects/Functor.htm">Funktionsobjekt</a>, die automatisch aufgerufen werden sollen, wenn das Skript die angegebene Meldung empfängt.</p>

<pre class="Syntax"><span class="func">OnMessage</span> Meldenummer <span class="optional">, Funktion, MaxThreads</span></pre>
<h3>Parameter</h3>
<dl>

  <dt>Meldenummer</dt>
  <dd><p>Die Nummer einer Meldung zwischen 0 und 4294967295 (0xFFFFFFFF), die überwacht oder abgefragt werden soll. Sofern das Überwachen einer <a href="../misc/SendMessageList.htm">Systemmeldung</a> nicht erforderlich ist (also eine unter 0x400), sollte man am besten eine Nummer verwenden, die größer ist als 4096 (0x1000). Diese Methode verringert die Chance, dass interne Meldungen von AutoHotkey gestört werden.</p></dd>

  <dt>Funktion</dt>
  <dd><p>Der Name einer <a href="../Functions.htm">Funktion</a>, oder ein <a href="../objects/Functor.htm">Funktionsobjekt</a>. Um einen direkt geschriebenen Funktionsnamen zu übergeben, muss er in Anführungszeichen gesetzt werden.</p>
  </dd>

  <dt id="MaxThreads">MaxThreads</dt>
  <dd><p>Normalerweise lässt man diesen Parameter (Integer) weg, um die überwachende Funktion jeweils auf einen einzigen <a href="../misc/Threads.htm">Thread</a> zu begrenzen. Diese Methode ist üblicherweise am sinnvollsten, weil das Skript sonst Meldungen in chronologisch falscher Reihenfolge abarbeiten würde, wann immer die überwachende Funktion sich selbst unterbricht. Demzufolge kann <em>Critical</em> als Alternative zu <em>MaxThreads</em> verwendet werden, wie es <a href="#Critical">weiter unten</a> beschrieben wird.</p>
  <p>Standardmäßig werden mehrere Funktionen, die für eine einzige <em>MdlgNummer</em> registriert sind, in der Reihenfolge aufgerufen, wie sie registriert wurden. Um die zu registrierende Funktion vor allen anderen bereits registrierten Funktionen aufzurufen, fügt man einen negativen Wert in <em>MaxThreads</em> ein. Zum Beispiel würde <code>OnMessage Mldg, Fn,-2</code> die Funktion <code>Fn</code> vor allen anderen registrierten Funktionen für <em>Mldg</em> aufrufen, und maximal 2 Threads für <em>Fn</em> erlauben. Wenn die Funktion allerdings bereits registriert ist, wird die Reihenfolge nicht geändert, sofern sie nicht de- und dann neuregistriert wurde.</p></dd>

</dl>

<h3 id="Usage">Verwendung</h3>

<p>Beliebig viele Funktionen oder <a href="../objects/Functor.htm">Funktionsobjekte</a> können eine <em>Meldenummer</em> überwachen.</p>
<p>Beide folgenden Zeilen registrieren ein Funktionsobjekt, das <strong>nach</strong> allen zuvor registrierten Funktionen aufgerufen wird:</p>
<pre class="Syntax"><span class="func">OnMessage</span> Meldenummer, Funktion     <em>; Option 1 - MaxThreads weglassen</em>
<span class="func">OnMessage</span> Meldenummer, Funktion, 1  <em>; Option 2 - MaxThreads auf 1 setzen</em></pre>
<p>Folgendes registriert ein Funktionsobjekt, das <strong>vor</strong> allen zuvor registrierten Funktionen aufgerufen wird:</p>
<pre class="Syntax"><span class="func">OnMessage</span> Meldenummer, Funktion, -1</pre>
<p>Um die Registrierung eines Funktionsobjekts rückgängig zu machen, fügt man 0 in <em>MaxThreads</em> ein:</p>
<pre class="Syntax"><span class="func">OnMessage</span> Meldenummer, Funktion, 0</pre>

<h3 id="Failure">Misserfolg</h3>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Funktion</em>:</p>
<ol>
  <li>kein Objekt oder Name einer benutzerdefinierten Funktion ist; oder</li>
  <li>mehr als vier Parameter akzeptieren muss.</li>
</ol>

<h3>Die Parameter der Funktion</h3>
<p>Eine <a href="../Functions.htm">Funktion</a>, die in OnMessage zum Überwachen von einer oder mehreren Meldungen angegeben wurde, akzeptiert bis zu vier Parameter:</p>
<pre>MeineMeldeüberwachung(wParam, lParam, msg, hwnd)
{
    ... Funktionsbereich ...
}</pre>
<p>Zwar können die Parameter einen beliebigen Namen haben, allerdings müssen sie in einer bestimmten Reihenfolge zugewiesen werden:</p>
<p>Parameter #1: WPARAM-Wert der Meldung.<br>
Parameter #2: LPARAM-Wert der Meldung.<br>
Parameter #3: Meldungsnummer, die dort gebraucht wird, wo eine Funktion mehr als eine Meldung überwacht.<br>
Parameter #4: HWND (eindeutige ID) des Fensters oder Steuerelements, zu dem die Meldung gesendet wurde. Das HWND kann in Verbindung mit <a href="../misc/WinTitle.htm#ahk_id">ahk_id</a> verwendet werden.</p>
<p>WPARAM und LPARAM sind vorzeichenlose 32-Bit-Integer (von 0 bis 2<sup>32</sup>-1) oder vorzeichenbehaftete 64-Bit-Integer (von -2<sup>63</sup> bis 2<sup>63</sup>-1), abhängig davon, ob die skript-ausführende EXE-Datei 32- oder 64-Bit ist. Wenn bei einem 32-Bit-Skript ein eingehender Parameter als vorzeichenbehafteter Integer vorgesehen ist, können negative Zahlen zum Beispiel wie folgt offenbart werden:</p>
<pre>if (A_PtrSize = 4 &amp;&amp; wParam &gt; 0x7FFFFFFF)  <em>; Das Überprüfen von <a href="../Variables.htm#PtrSize">A_PtrSize</a> stellt sicher, dass das Skript 32-Bit ist.</em>
    wParam := -(~wParam) - 1</pre>
<p>Sie können eine oder mehrere Parameter vom Ende der Liste weglassen, wenn Sie die entsprechende Information nicht benötigen. Zum Beispiel würde eine Funktion, definiert als <code>MeineMeldeüberwachung(wParam, lParam)</code>, nur die ersten zwei Parameter empfangen, und eine, definiert als <code>MeineMeldeüberwachung()</code>, gar keine von  ihnen.</p>

<h3>Weitere verfügbare Informationen für die Funktion</h3>
<p>Neben den oben genannten Parametern kann die Funktion auch auf die interne Variable <a href="../Variables.htm#EventInfo">A_EventInfo</a> zurückgreifen, die 0 enthalten wird, wenn die Meldung via SendMessage gesendet wurde. Wenn sie via PostMessage gesendet wurde, enthält die Variable die <a href="../Variables.htm#TickCount">Tick-Count-Zeit</a>, die während des Sendens gegolten hat.</p>
<p>Das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> einer überwachenden Funktion ist zu Beginn das übergeordnete Fenster, zu dem die Meldung gesendet wurde (selbst wenn sie zu einem Steuerelement gesendet wurde). Ist das Fenster versteckt, aber kein GUI-Fenster (z. B. das Hauptfenster des Skripts), muss zuvor <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> aktiviert werden. Zum Beispiel:</p>
<pre>DetectHiddenWindows True
MeldeÜbergeordFenster := WinExist()  <em>; Dies speichert die eindeutige ID des Fensters, zu dem die Meldung gesendet wurde.</em></pre>

<h3>Was die Funktion per <em>Return</em> zurückgeben sollte</h3>
<p>Verwendet eine überwachende Funktion <a href="Return.htm">Return</a> ohne Parameter oder mit einem leeren Wert wie "" (oder verwendet sie überhaupt kein Return), wird die eingehende Meldung beim Erreichen des Funktionsendes normal fortgesetzt. Das gleiche passiert, wenn man das Ende der Funktion via <a href="Exit.htm">Exit</a> erzwingt oder einen Laufzeitfehler verursacht (der beispielsweise durch <a href="Run.htm">Ausführen</a> einer nicht-existierenden Datei ausgelöst werden kann). Vewendet man als Rückgabewert hingegen einen Integer, wird dieser Wert sofort als Antwort gesendet; das heißt, dass das Programm die Meldung nicht weiter fortsetzen wird. Zum Beispiel könnte eine Funktion, die WM_LBUTTONDOWN (0x201) überwacht, einen Integer zurückgeben, um das Zielfenster daran zu hindern, benachrichtigt zu werden, dass ein Mausklick erfolgt ist. In vielen Fällen (z. B. als eine Meldung, empfangen via <a href="PostMessage.htm">PostMessage</a>) ist es egal, welcher Integer zurückgegeben wird; aber im Zweifelsfall ist eine 0 am sichersten.</p>
<p>Der Bereich von gültigen Rückgabewerten ist abhängig davon, ob die skript-ausführende EXE-Datei 32- oder 64-Bit ist. Bei einem 32-Bit-Skript (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 4</code>) müssen die Rückgabewerte in einem Bereich von -2<sup>31</sup> und 2<sup>32</sup>-1 sein, und bei einem 64-Bit-Skript  (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 8</code>) in einem Bereich von -2<sup>63</sup> und 2<sup>63</sup>-1.</p>
<p>Mehrere Funktionen, die eine bestimmte Meldungsnummer überwachen, werden nacheinander aufgerufen, bis eine von denen einen nicht-leeren Wert zurückgibt.</p>

<h3 id="Remarks">Allgemeine Bemerkungen</h3>
<p>Im Gegensatz zu einem normalen Funktionsaufruf wird die überwachende Funktion, wenn sie eine neue Meldung empfängt, als neuer <a href="../misc/Threads.htm">Thread</a> aufgerufen. Aus diesem Grund starten Einstellungen wie <a href="SendMode.htm">SendMode</a> und <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> innerhalb der Funktion mit ihren Standardwerten. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Meldungen, die via SendMessage (statt PostMessage) zu einem Steuerelement gesendet wurden, werden nicht überwacht, weil das Betriebssystem diese Meldungen direkt auf das Steuerelement überträgt, ohne dass jemand etwas mitbekommt. Für system-generierte Meldungen ist das selten ein Problem, weil die meisten von ihnen via PostMessage gesendet werden.</p>
<p>Skripte mit aktiver Meldungsüberwachung sind automatisch <a href="../Scripts.htm#persistent">persistent</a>; das heißt, dass das Skript nur mit einem <a href="ExitApp.htm">ExitApp</a> beendet werden kann.</p>
<p id="Critical">Kommt eine Meldung an, während die Funktion noch läuft, wird die Funktion nicht erneut aufgerufen (außer wenn <a href="#MaxThreads">MaxThreads</a> größer als 1 ist); stattdessen wird die Meldung so behandelt, als wurde sie nicht überwacht. Wenn dies nicht erwünscht ist, muss man <a href="Critical.htm">Critical</a>  in der ersten Zeile der Funktion verwenden, um eine Meldung größer gleich 0x312 zwischenspeichern zu können. Alternativ könnte <a href="Thread.htm">Thread Interrupt</a> das gleiche bewirken, sofern die Funktion genug Zeit zum Beenden hat. Eine Meldung kleiner als 0x312 kann hingegen nicht via Critical oder "Thread Interrupt" zwischengespeichert werden (Critical kann allerdings verwendet werden, um die Meldungen <a href="Critical.htm#Interval">seltener</a> überprüfen zu lassen, so dass die Funktion mehr Zeit zum Beenden hat). Um zu garantieren, dass solche Meldungen nicht verloren gehen, muss die Funktion innerhalb von 6 Millisekunden zum Ende kommen (dieses Limit kann mit <a href="Critical.htm#Interval"><em>Critical 30</em></a> erhöht werden). Eine Möglichkeit, dies zu tun, ist es, einen zukünftigen Thread in die Warteschlange zu setzen, indem man eine überwachte Meldungsnummer größer als 0x312 via <a href="PostMessage.htm">PostMessage</a> sendet. Die Funktion dieser Meldung sollte <a href="Critical.htm">Critical</a> in der ersten Zeile verwenden, um sicherzustellen, dass ihre Meldungen zwischengespeichert werden.</p>
<p>Kommt eine überwachte Meldung kleiner als 0x312 an, während das Skript absolut unterbrechungsfrei ist - z. B. während ein <a href="../objects/Menu.htm#Show">Menü</a> angezeigt wird, <a href="SetKeyDelay.htm">KeyDelay</a>/<a href="SetMouseDelay.htm">MouseDelay</a> im Gange ist oder die Zwischenablage <a href="_ClipboardTimeout.htm">offen</a> ist - wird die Funktion der Meldung nicht aufgerufen und die Meldung so behandelt, als wurde sie nicht überwacht. Im Gegensatz dazu wird eine überwachte Meldung größer gleich 0x312 während diesen unterbrechungsfreien Perioden zwischengespeichert; das heißt, dass ihre Funktion aufgerufen wird, wenn das Skript wieder unterbrochen werden kann.</p>
<p>Kommt eine überwachte Meldung kleiner als 0x312 an, während das Skript aufgrund von <a href="Thread.htm">Thread Interrupt</a> oder <a href="Critical.htm">Critical</a> unterbrechungsfrei ist, wird der aktuelle Thread unterbrochen, so dass die Funktion aufgerufen werden kann. Im Gegensatz dazu wird eine überwachte Meldung größer gleich 0x312 zwischengespeichert, bis der Thread endet oder wieder unterbrochen werden kann.</p>
<p>Die <a href="../misc/Threads.htm">Priorität</a> von OnMessage-Threads ist immer 0. Demzufolge werden keine Meldungen überwacht oder zwischengespeichert, wenn der aktuelle Thread eine Priorität höher als 0 hat.</p>
<p>Seien Sie vorsichtig, wenn Sie Systemmeldungen (solche unter 0x400) überwachen. Kommt eine überwachende Funktion beispielsweise nicht schnell genug zum Ende, kann die Antwort auf die Meldung länger dauern als vom System erwartet, was zu Nebeneffekten führen könnte. Unerwünschtes Verhalten kann auch auftreten, wenn eine überwachende Funktion die Meldung durch Zurückgeben eines Integers nicht weiter fortsetzen lässt, während das System etwas anderes erwartet.</p>
<p>Zeigt das Skript ein Dialogfenster wie <a href="MsgBox.htm">MsgBox</a> an, werden Meldungen, die via PostMessage zu einem Steuerelement gesendet werden, nicht überwacht. Zeigt das Skript beispielsweise eine MsgBox an und klickt der Benutzer innerhalb eines GUI-Fensters auf einen Button, wird die WM_LBUTTONDOWN-Meldung direkt zum Button gesendet, ohne dass die überwachende Funktion aufgerufen wird.</p>
<p>Zwar kann ein externes Programm direkt via PostThreadMessage() oder anderen API-Funktionen Meldungen zu einem Skript-Thread senden, allerdings könnten dabei Meldungen verloren gehen, wenn das Skript ein Dialogfenster wie <a href="MsgBox.htm">MsgBox</a> anzeigt. Stattdessen ist es besser, Meldungen zum Hauptfenster des Skripts oder zu einem seiner GUI-Fenster zu senden.</p>
<h3>Siehe auch</h3>
<p><a href="RegisterCallback.htm">RegisterCallback</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="PostMessage.htm">Post/SendMessage</a>, <a href="../Functions.htm">Funktionen</a>, <a href="../misc/SendMessageList.htm">Liste mit Fenstermeldungen</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Critical.htm">Critical</a>, <a href="DllCall.htm">DllCall</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel: Das folgende Skript zeigt, wie Mausklicks innerhalb eines GUI-Fensters überwacht werden können.
; Verwandtes Thema: <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu</a>-Ereignis</em>

Gui := GuiCreate(, "Beispielfenster")
Gui.Add("Text",, "Klicken Sie irgendwo auf das Fenster.")
Gui.Add("Edit", "w200")
Gui.OnEvent("Close", "Gui_Close")
Gui.Show
OnMessage 0x201, "WM_LBUTTONDOWN"

WM_LBUTTONDOWN(wParam, lParam, msg, hwnd)
{
    X := lParam &amp; 0xFFFF
    Y := lParam &gt;&gt; 16
    Gui := GuiFromHwnd(hwnd)
    GuiControl := GuiCtrlFromHwnd(hwnd)
    if GuiControl
    {
        Gui := GuiControl.Gui
        Steuerelement := "`n(im Steuerelement " . GuiControl.ClassNN . ")"
    }
    ToolTip "Sie haben im GUI-Fenster '" Gui.Title "' auf die Koordinaten " X "x" Y " geklickt." Steuerelement
}

Gui_Close() {
    ExitApp
}</pre>

<pre class="NoIndent" id="shutdown"><em>; Beispiel: Das folgende Skript zeigt, wie man das Abmelden/Herunterfahren des Systems erkennen und unterbrechen kann (es wurde gemeldet, dass dies NICHT in Windows Vista und höher funktioniert).
; Verwandtes Thema: <a href="OnExit.htm">OnExit</a></em>

<em>; Das folgende DllCall ist optional: sie teilt dem OS mit, dass dieses Skript <i>zuerst</i> beendet werden soll (bevor alle anderen Anwendungen beendet werden).</em>
DllCall "kernel32.dll\SetProcessShutdownParameters", UInt, 0x4FF, UInt, 0
OnMessage 0x11, "WM_QUERYENDSESSION"
return

WM_QUERYENDSESSION(wParam, lParam)
{
    ENDSESSION_LOGOFF := 0x80000000
    if (lParam &amp; ENDSESSION_LOGOFF)  <em>; Benutzer meldet sich ab.</em>
        Ereignis := "Abmelden"
    else  <em>; System wird entweder heruntergefahren oder neu gestartet.</em>
        Ereignis := "Herunterfahren"
    Result := MsgBox(Ereignis " im Gange. Erlauben?",, 4)
    <em>; Das Betriebssystem kann erst mit dem Herunterfahren/Abmelden fortfahren, wenn der Benutzer auf Ja klickt.</em>
    return Result = "Yes"
}</pre>

<pre class="NoIndent"><em>; Beispiel: Zeigt, wie ein Skript eine benutzerdefinierte Meldung und bis zu zwei Zahlen von einem anderen Skript oder Programm empfängt
; (Schauen Sie sich das Beispiel danach an, wie man Zeichenketten sendet).</em>

OnMessage 0x5555, "Meldeüberwachung"
OnMessage 0x5556, "Meldeüberwachung"

MeldÜberwachung(wParam, lParam, msg)
{
    <em>; Damit die Funktion schnell zum Ende kommen kann, ist es besser, ein ToolTip zu verwenden,</em>
    <em>; weil so etwas wie eine MsgBox dies verhindern würde:</em>
    ToolTip "Meldung " msg " angekommen:`nWPARAM: " wParam "`nLPARAM: " lParam
}

<em>; Mit den folgenden Zeilen innerhalb eines anderen Skripts kann die Funktion im oberen Skript ausgeführt werden:</em>
SetTitleMatchMode 2
DetectHiddenWindows True
if WinExist("Empfänger.ahk ahk_class AutoHotkey")
    PostMessage 0x5555, 11, 22  <em>; Aufgrund von WinExist wird die Meldung zum "<a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>" gesendet.</em>
DetectHiddenWindows False  <em>; Kann nach PostMessage wieder deaktiviert werden.</em></pre>

<pre class="NoIndent" id="SendString"><em>; Beispiel: Sendet eine Zeichenkette mit beliebiger Länge an ein anderes Skript.  Um dieses Beispiel
; zu nutzen, speichert und startet man beide folgenden Skripte und drückt WIN+LEERTASTE,
; um eine InputBox anzuzeigen, die den Benutzer zur Eingabe einer Zeichenkette auffordert.</em>

<em>; Speicheren Sie das folgende Skript als "<strong>Empfänger.ahk</strong>" und starten Sie es:</em>
#SingleInstance
OnMessage 0x4a, "Empfange_WM_COPYDATA"  <em>; 0x4a ist WM_COPYDATA</em>
return

Empfange_WM_COPYDATA(wParam, lParam)
{
    ZeichenketteAdresse := NumGet(lParam + 2*A_PtrSize)  <em>; Ermittelt die Adresse des lpData-Elements in CopyDataStruct.</em>
    Datenkopie := StrGet(ZeichenketteAdresse)  <em>; Kopiert die Zeichenkette aus der Struktur.</em>
    <em>; Zeige die Zeichenkette via ToolTip statt MsgBox an, so dass wir rechtzeitig fertig werden:</em>
    ToolTip A_ScriptName "`nhat die folgende Zeichenkette empfangen:`n" Datenkopie
    return true  <em>; Die Rückgabe einer 1 (wahr) ist der übliche Weg, um diese Meldung zu bestätigen.</em>
}

<em>; Speicheren Sie das folgende Skript als "<strong>Sender.ahk</strong>" und starten Sie es:  Drücken Sie danach den Hotkey WIN+LEERTASTE.</em>
ZielSkriptTitel := "Empfänger.ahk ahk_class AutoHotkey"

#space::  <em>; Hotkey: WIN+LEERTASTE. Drücken Sie ihn, um eine InputBox zur Eingabe einer Zeichenkette anzuzeigen.</em>
ZuSendendeZeichenkette := InputBox("Tragen Sie den zu sendenden Text ein:", "Text via WM_COPYDATA senden")
if ErrorLevel  <em>; Benutzer hat den Abbrechen-Button gedrückt.</em>
    return
Ergebnis := Sende_WM_COPYDATA(ZuSendendeZeichenkette, ZielSkriptTitel)
if Ergebnis = ""
    MsgBox "SendMessage fehlgeschlagen oder Zeit überschritten. Gibt es den folgenden Fenstertitel?:`n" ZielSkriptTitel
else if Ergebnis = 0
    MsgBox "Meldung wurde gesendet, aber das Zielfenster hat mit 0 geantwortet, was bedeuten könnte, dass sie ignoriert wurde."
return

Sende_WM_COPYDATA(ByRef ZuSendendeZeichenkette, ByRef ZielSkriptTitel)  <em>; ByRef verbraucht in diesem Fall weniger Speicher.
; Diese Funktion sendet die angegebene Zeichenkette zum angegebenen Fenster und gibt die Anwort zurück.
; Die Antwort ist 1, wenn das Zielfenster die Meldung akzeptiert hat, oder 0, wenn die Meldung ignoriert wurde.</em>
{
    VarSetCapacity(KopieDatenStrukt, 3*A_PtrSize, 0)  <em>; Richtet den Speicherbereich der Struktur ein.</em>
    <em>; Zuerst wird das cbData-Element der Struktur auf die Größe der Zeichenkette gesetzt, einschließlich dem Null-Terminator.</em>
    GrößeInBytes := (StrLen(ZuSendendeZeichenkette) + 1) * 2
    NumPut(GrößeInBytes, KopieDatenStrukt, A_PtrSize)  <em>; Muss für das OS getan werden.</em>
    NumPut(&amp;ZuSendendeZeichenkette, KopieDatenStrukt, 2*A_PtrSize)  <em>; Lässt lpData auf die Zeichenkette selbst verweisen.</em>
    Vorher_DetectHiddenWindows := A_DetectHiddenWindows
    Vorher_TitleMatchMode := A_TitleMatchMode
    DetectHiddenWindows True
    SetTitleMatchMode 2
    TimeoutWert := 4000  <em>; Optional. Zeit in Millisekunden, die Empfänger.ahk zum Antworten hat. Standard ist 5000
    ; Muss Send verwenden, nicht Post.</em>
    Rückgabewert := SendMessage(0x4a, 0, &amp;KopieDatenStrukt,, ZielSkriptTitel,,,, TimeoutWert) <em>; 0x4a ist WM_COPYDATA.</em>
    DetectHiddenWindows Vorher_DetectHiddenWindows  <em>; Stellt die ursprüngliche Einstellung wieder her.</em>
    SetTitleMatchMode Vorher_TitleMatchMode         <em>; Hier auch.</em>
    return Rückgabewert  <em>; Gibt SendMessage's Antwort zum Aufrufer zurück.</em>
}</pre>

<pre class="NoIndent"><em>; Beispiel: Siehe <a href="../scripts/WinLIRC.htm">WinLIRC-Client-Skript</a>, wie OnMessage zum Empfangen von Meldungen verwendet
; werden kann, die über die Netzwerkverbindung gesendet wurden.</em></pre>

</body>
</html>
