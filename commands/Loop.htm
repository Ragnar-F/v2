<!DOCTYPE HTML>
<html>
<head>
<title>Loop</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop</h1>

<p>Führt eine Reihe von Befehlen wiederholend aus - entweder die angegebene Anzahl an Wiederholungen oder bis ein <a href="Break.htm">Break</a> auftritt.</p>

<pre class="Syntax">Loop [, Anzahl]
Loop(Anzahl)</pre>
<h3>Parameter</h3>
<dl>

  <dt>Anzahl</dt>
  <dd><p>Wieviele Durchläufe (Iterationen) die Schleife machen soll (kann ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein). Fehlt dieser Parameter, läuft die Schleife endlos weiter, bis ein <a href="Break.htm">Break</a> oder <a href="Return.htm">Return</a> auftritt. Beachte aber, dass ein explizit leerer Wert oder eine Zahl kleiner als 1 die Schleife komplett überspringen lässt.</p>
      <p>Wenn <em>Anzahl</em> ein Ausdruck ist, wird er einmal ausgewertet, bevor die Schleife beginnt.</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Nach einer Schleife erfolgt für gewöhnlich ein <a href="Block.htm">Block</a> - bestehend aus mehreren Anweisungen, die den <em>Schleifenkörper</em> bilden. Hat die Schleife nur eine Anweisung, ist ein Block nicht notwendig (in diesem Fall zählt ein "if" und das dazugehörige "else" als eine Anweisung).</p>
<p>Dieser Befehl wird häufig als Endlosschleife benutzt; mit dem <a href="Break.htm">Break</a>-Befehl irgendwo im <em>Schleifenkörper</em> kann man bestimmen, wann die Schleife gestoppt werden soll.</p>
<p><a href="Break.htm">Break</a> und <a href="Continue.htm">Continue</a> sind besser geeignet als <a href="Goto.htm">Goto</a>, weil sie ein Skript üblicherweise besser lesbar und verwaltbar machen. Um eine "Do...While"-Schleife zu simulieren, muss die letzte Anweisung des <em>Schleifenkörpers</em> zu einer IF-Anweisung gemacht werden, die in Abhängigkeit einer Bedingung den <a href="Break.htm">Break</a>-Befehl ausführt. Mit der gleichen Technik kann eine "While"-Schleife erstellt werden - dafür ist aber der <a href="While.htm">While</a>-Befehl besser geeignet.</p>
<p>Die Built-in-Variable <strong>A_Index</strong> enthält die Nummer des aktuellen Schleifendurchlaufs. Sie enthält eine 1, wenn der <em>Schleifenkörper</em> das erste Mal durchgeführt wurde. Beim zweiten Mal enthält sie eine 2; und so weiter. Wenn eine innere Schleife von einer äußeren Schleife umschlossen ist, hat die innere Schleife Vorrang. A_Index funktioniert in jeder Schleifenvariante, einschließlich <a href="LoopFile.htm">Dateimuster-Schleifen</a> und <a href="LoopReg.htm">Registry-Schleifen</a>; außerhalb einer Schleife enthält A_Index eine 0.</p>
<p>Man kann in A_Index einen beliebigen Integer-Wert speichern. Wenn <em>Anzahl</em> angegeben ist, beeinflusst eine Änderung von A_Index die aktuelle Anzahl der Durchläufe, die durchgeführt werden. Zum Beispiel würde <code>A_Index := 3</code> eine Schleife dazu bringen, sich so zu verhalten, als wäre sie im dritten Durchlauf (A_Index wird im nächsten Durchlauf eine 4 sein), während <code>A_Index--</code> verhindert, dass die Schleife jemals den nächsten Durchlauf erreicht.</p>
<p>Je nach Bedarf kann der "<a href="Block.htm#otb">One True Brace Style</a>" bei normalen Schleifen verwendet werden (aber nicht bei speziellen wie <a href="LoopFile.htm">Dateimuster-Schleife</a> und <a href="LoopParse.htm">Parsende Schleife</a>). Zum Beispiel:</p>
<pre>Loop <strong>{</strong>
    ...
<strong>}</strong>
Loop WiederholungsAnzahl <strong>{</strong>
    ...
<strong>}</strong></pre>
<p>Spezialisierte Schleifen: Mit Schleifen können Dateien, Ordner oder Registry-Einträge automatisch abgerufen werden (einzeln). Siehe <a href="LoopFile.htm">Dateimuster-Schleife</a> und <a href="LoopReg.htm">Registry-Schleife</a> für Details. <a href="LoopReadFile.htm">Datei-lesende Schleifen</a> können den kompletten Inhalt einer Datei zeilenweise durchgehen. <a href="LoopParse.htm">Parsende Schleifen</a> können einzelne Felder einer Zeichenkette durchgehen.</p>
<h3>Siehe auch</h3>
<p><a href="Until.htm">Until</a>, <a href="While.htm">While-Schleife</a>, <a href="For.htm">For-Schleife</a>, <a href="LoopFile.htm">Dateimuster-Schleife</a>, <a href="LoopReg.htm">Registry-Schleife</a>, <a href="LoopReadFile.htm">Datei-lesende Schleife</a>, <a href="LoopParse.htm">Parsende Schleife</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent">Loop, 3
{
    MsgBox, Iterationsnummer ist %A_Index%.  <em>; A_Index wird 1, 2 und 3 sein.</em>
    Sleep, 100
}

Loop
{
    if a_index &gt; 25
        break  <em>; Unterbricht die Schleife.</em>
    if a_index &lt; 20
        continue <em>; Überspringt das darunter und startet eine neue Iteration.</em>
    MsgBox, a_index = %a_index% <em>; Dies wird nur die Nummern von 20 bis 25 anzeigen.</em>
}</pre>

</body>
</html>
