<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObject - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComObject-Funktion wrappt ein Wert, SafeArray oder COM-Objekt, um es für das Skript oder für eine COM-Methode nutzbar zu machen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObject</h1>

<p>Wrappt ein Wert, SafeArray oder COM-Objekt, um es für das Skript oder für eine COM-Methode nutzbar zu machen.</p>
<pre class="Syntax">ComObject := <span class="func">ComObject</span>(VarTyp, Wert <span class="optional">, Flags</span>)</pre>

<p><strong>Erweitert:</strong> Wrappt oder entwrappt einen unbearbeiteten <a href="https://msdn.microsoft.com/de-DE/de/library/dd318520.aspx">IDispatch</a>-Pointer, um ihn für das Skript nutzbar zu machen.</p>
<pre class="Syntax">ComObject := <span class="func">ComObject</span>(DispPtr)</pre>

<h2>Parameter</h2>
<dl>

  <dt>VarTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein Integer-Wert, der den Typ des Wertes kennzeichnet. Auf der <a href="ComObjType.htm#vt">ComObjType</a>-Seite finden Sie eine Liste mit allen möglichen Typen.</p>
  </dd>

  <dt>Wert</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Der Wert, der gewrappt werden soll. Zurzeit werden nur Integer- oder Pointer-Werte unterstützt.</p>
  </dd>

  <dt>Flags</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Flags haben Einfluss auf das Verhalten des Wrapper-Objekts; siehe <a href="ComObjFlags.htm">ComObjFlags</a>, um mehr darüber zu erfahren.</p>
  </dd>

  <dt>DispPtr</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Unbearbeiteter IDispatch-Pointer.</p>
  </dd>

</dl>

<h2 id="Returns">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Gibt einen Wrapper-Objekt zurück, das einen <a href="ComObjType.htm">Variantentyp</a> und Wert, oder einen Pointer enthält.</p>
<p>Dieses Objekt hat zwei Nutzen:</p>
<ol>
  <li>Einige COM-Methoden erfordern möglicherweise bestimmte Wertetypen, die kein direktes Äquivalent innerhalb von AutoHotkey haben. Diese Funktion ermöglicht es, den Typ eines Wertes bei der Übergabe an eine COM-Methode anzugeben. Zum Beispiel erstellt <code>ComObject(0xB, -1)</code> ein Objekt, das den booleschen COM-Wert <em>True</em> repräsentieren würde.</li>
  <li>Ein Skript kann deutlich besser mit einem COM-Objekt oder SafeArray interagieren (via <a href="../Objects.htm#Usage_Objects">Objektsyntax</a>), wenn es gewrappt wurde. Die meisten Skripte müssen dies nicht manuell tun, weil <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjArray.htm">ComObjArray</a> und andere COM-Methoden, die ein Objekt zurückgeben, automatisch ein Wrapper-Objekt erstellen.</li>
</ol>

<h2 id="ByRef">ByRef</h2>
<p>Wenn der <a href="ComObjType.htm"><em>VarTyp</em></a> eines Wrapper-Objekts den VT_BYREF-Flag (0x4000) enthält, kann mit leeren eckigen Klammern <code>[]</code> der verwiesene Wert gelesen oder geschrieben werden.</p>
<p>Beim Erstellen einer Referenz muss <em>Wert</em> die Speicheradresse einer Variable oder Puffer mit ausreichender Kapazität sein, um einen Wert des angegebenen Typs enthalten zu können. Zum Beispiel könnte man wie folgt eine Variable erstellen, in der eine VBScript-Funktion etwas schreiben kann:</p>
<pre>VarSetCapacity(var, 24, 0)
vref := ComObject(0x400C, &amp;var)  <em>; 0x400C ist eine Kombination von VT_BYREF und VT_VARIANT.</em>

vref[] := "Eingabewert"
sc.Run("Beispiel", vref)  <em>; sc sollte wie im <a href="#ByRefEx">unteren Beispiel</a> initialisiert werden.</em>
MsgBox vref[]</pre>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>Wenn mit dieser Funktion ein <a href="https://msdn.microsoft.com/de-DE/de/library/dd318520.aspx">IDispatch</a>- oder IUnknown-Interface-Pointer gewrappt wurde, wird das Wrapper-Objekt absofort dafür verantwortlich sein, den Pointer bei Bedarf automatisch freizugeben. Wenn man <em>VarTyp</em> weglässt, wird das Objekt <a href="ComObjQuery.htm">aufgefordert</a>, sein IDispatch-Interface zurückzugeben, sofern verfügbar; wenn es das macht, wird <em>DispPtr</em> sofort freigegeben. Wenn das Skript daraufhin beabsichtigt, den Pointer nach dem Aufruf dieser Funktion weiterzuverwenden, muss es zuerst <code><a href="ObjAddRef.htm">ObjAddRef</a>(DispPtr)</code> aufrufen.</p>
<p>Den aktuellen <em>VarTyp</em> eines Wrapper-Objekts kann man mithilfe von <a href="ComObjType.htm">ComObjType</a> ermitteln.</p>
<p>Den aktuellen <em>Wert</em> eines Wrapper-Objekts kann man mithilfe von <a href="ComObjValue.htm">ComObjValue</a> ermitteln.</p>
<p><b>Bekannte Einschränkung:</b> Jedes Mal, wenn ein COM-Objekt gewrappt wurde, wird ein neues Wrapper-Objekt erstellt. Vergleiche und Zuweisungen wie <code>obj1 == obj2</code> und <code>array[obj1] := Wert</code> behandeln die zwei Wrapper-Objekte getrennt voneinander, selbst wenn sie das gleiche COM-Objekt enthalten.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="https://msdn.microsoft.com/de-de/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h2>Beispiele</h2>
<pre class="NoIndent" id="ByRefEx">
<em>; Einleitung - ScriptControl benötigt eine 32-Bit-Version von AutoHotkey.</em>
code := "
(
Sub Beispiel(Var)
    MsgBox Var
    Var = "Ausgabewert!"
End Sub
)"
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; Beispiel: VARIANT-ByRef an eine COM-Funktion übergeben.</em>
var := ComVar()
var[] := "Eingabewert"
sc.Run("Beispiel", var.ref)
MsgBox var[]

<em>; ComVar: Erstellt ein Objekt, mit dem ein Wert via ByRef übergeben werden kann.
;   ComVar[] bekommt den Wert.
;   ComVar[] := Val setzt den Wert.
;   ComVar.ref bekommt ein ByRef-Objekt, das eine COM-Funktion nutzen kann.</em>
ComVar(Type:=0xC)
{
    static <a href="../Objects.htm#Custom_Objects">base</a> := { __Get: "ComVarGet", __Set: "ComVarSet", __Delete: "ComVarDel" }
    <em>; Erstellt ein Array mit 1 VARIANT.  Durch diese Methode kann der interne Code sich um
    ; alle Umwandlungen zwischen VARIANT und AutoHotkey's interne Typen kümmern.</em>
    arr := <a href="ComObjArray.htm">ComObjArray</a>(Type, 1)
    <em>; Sperrt das Array und bekommt einen Pointer, der auf das VARIANT verweist.</em>
    DllCall("oleaut32\SafeArrayAccessData", "ptr", <a href="ComObjValue.htm">ComObjValue</a>(arr), "ptr*", arr_data)
    <em>; Speichert das Array und ein Objekt, mit dem das VARIANT-ByRef übergeben werden kann.</em>
    return { ref: ComObject(0x4000|Type, arr_data), _: arr, base: base }
}
ComVarGet(cv, <a href="../Functions.htm#Variadic">p*</a>) { <em>; Wird aufgerufen, wenn das Skript auf ein unbekanntes Feld zugreift.</em>
    if !p.Length  <em>; Keine Namen/Parameter, also cv[]</em>
        return cv._[0]
}
ComVarSet(cv, v, p*) { <em>; Wird aufgerufen, wenn das Skript ein unbekanntes Feld setzt.</em>
    if !p.Length  <em>; Keine Namen/Parameter, also cv[]:=v</em>
        return cv._[0] := v
}
ComVarDel(cv) { <em>; Wird aufgerufen, wenn das Objekt freigegeben wird.
    ; Notwendig, damit das interne Array freigegeben werden kann.</em>
    DllCall("oleaut32\SafeArrayUnaccessData", "ptr", ComObjValue(cv._))
}

</pre>

</body>
</html>
