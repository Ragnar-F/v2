<!DOCTYPE HTML>
<html>
<head>
<title>WinGet</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>WinGet</h1>

<p>Funktionen zum Abrufen von Fensterinformationen oder einer Liste bestimmter Fenster. Alle Funktionen benutzen die folgende Syntax; ersetze <i>WinGetX</i> einfach mit dem entsprechenden Funktionsnamen.</p>

<pre class="Syntax">AusgabeVar := <span class="func">WinGetX</span>(<span class="optional">Fenstertitel, Fenstertext, Titelausnahme, Textausnahme</span>)</pre>

<h3>Parameter</h3>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der Variable, in der der Rückgabewert der Funktion gespeichert werden soll.</p></dd>

  <dt>Fenstertitel</dt>
  <dd><p>Ein Fenstertitel oder sonstige Kriterien, die das Zielfenster ermitteln sollen. Siehe <a href="../misc/WinTitle.htm">Fenstertitel</a>.</p></dd>

  <dt>Fenstertext</dt>
  <dd><p>In diesem Parameter kann eine Zeichenkette angegeben werden, die in einem Textelement des Zielfensters vorkommt (abrufbar mit Windows Spy). Versteckte Textelemente werden auch erkannt, sofern <a href="DetectHiddenText.htm">DetectHiddenText</a> aktiv ist.</p></dd>

  <dt>Titelausnahme</dt>
  <dd><p>Ignoriert Fenster, deren Titel diesen Wert enthalten.</p></dd>

  <dt>Textausnahme</dt>
  <dd><p>Ignoriert Fenster, deren Textelemente diesen Wert enthalten.</p></dd>

</dl>

<h3>Funktionen</h3>
<p id="ID"><strong>WinGetID</strong>: Ein Ersatz für <a href="WinExist.htm">WinExist</a>. Ermittelt die eindeutige ID-Nummer (HWND/Handle) eines Fensters. Werden keine passenden Fenster gefunden, wird <em>AusgabeVar</em> leer gemacht. <code>WinGetID("A")</code> ist eine schnelle Möglichkeit, die ID des aktiven Fensters zu ermitteln. Um das HWND eines Steuerelements herauszufinden (für <a href="PostMessage.htm">Post/SendMessage</a> oder <a href="DllCall.htm">DllCall</a>), kannst du <a href="Control.htm#GetHwnd">ControlGetHwnd</a> oder <a href="MouseGetPos.htm">MouseGetPos</a> verwenden.</p>
<p id="IDLast"><strong>WinGetIDLast</strong>: Das gleich wie oben, außer dass bei mehreren Treffern die ID des letzten/untersten Fensters abgerufen wird. Wenn nur eine Übereinstimmung vorhanden ist, verhält es sich wie <em>ID</em>. Dieses Konzept ist vergleichbar mit dem, das von <a href="WinActivateBottom.htm">WinActivateBottom</a> verwendet wird.</p>
<p id="PID"><strong>WinGetPID</strong>: Ermittelt die <a href="Process.htm">Prozess-ID (PID)</a> eines Fensters.</p>
<p id="ProcessName"><strong>WinGetProcessName</strong>: Ermittelt den Namen des Prozesses (z. B. notepad.exe), dem ein Fenster zugeteilt ist. Wenn keine passenden Fenster gefunden werden, wird <em>AusgabeVar</em> leer gemacht.</p>
<p id="ProcessPath"><strong>WinGetProcessPath</strong>: Ähnlich wie <em>ProcessName</em>, aber es wird nicht nur der Name, sondern auch der vollständige Pfad abgerufen.</p>
<p id="Count"><strong>WinGetCount</strong>: Ermittelt die Anzahl vorhandener Fenster, die mit <em>Fenstertitel</em>, <em>Fenstertext</em>, <em>Titelausnahme</em> und <em>Textausnahme</em> übereinstimmen (0, wenn keine gefunden werden). Um alle Fenster im Betriebssystem zählen zu können, müssen alle vier Titel-/Text-Parameter weggelassen werden. Solange <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> deaktiviert ist, werden versteckte Fenster nicht wahrgenommen.</p>
<p id="List"><strong>WinGetList</strong>: Ermittelt alle Fenster, die mit <em>Fenstertitel</em>, <em>Fenstertext</em>, <em>Titelausnahme</em> und <em>Textausnahme</em> übereinstimmen (0, wenn keine gefunden werden), und speichert sie in ein <a href="../Objects.htm#Usage_Simple_Arrays">Array</a>. Um alle Fenster im Betriebssystem zählen zu können, müssen alle vier Titel-/Text-Parameter weggelassen werden. </p>
<p id="MinMax"><strong>WinGetMinMax</strong>: Ermittelt den minimierten/maximierten Zustand eines Fensters. <em>AusgabeVar</em> wird leer gemacht, wenn keine passende Fenster gefunden werden, ansonsten ist eine der folgenden Zahlen enthalten:<br>
  -1: Das Fenster ist minimiert (<a href="WinRestore.htm">WinRestore</a> kann die Minimierung aufheben). <br>
  1: Das Fenster ist maximiert (<a href="WinRestore.htm">WinRestore</a> kann die Maximierung aufheben).<br>
  0: Das Fenster ist weder minimiert noch maximiert.</p>
<p id="Controls"><strong>WinGetControls</strong>: Ermittelt die Namen aller Steuerelemente in einem Fenster und speichert sie in ein <a href="../Objects.htm#Usage_Simple_Arrays">Array</a>. Werden keine passenden Fenster gefunden, wird <em>AusgabeVar</em> leer gemacht. Wenn das Fenster keine Steuerelemente hat, wird das Ergebnis ein leeres Array sein. Ansonsten besteht jeder Name des Steuerelements aus dessen Klassenname und Sequenznummer (ClassNN), wie in Windows Spy angezeigt.</p>
<p>Steuerelemente werden nach ihrer Z-Reihenfolge sortiert, das üblicherweise der Navigation mit der Tabulatortaste entspricht, sofern vom Fenster unterstützt.</p>
<p>Das Steuerelement, das sich zurzeit unter dem Mauszeiger befindet, kann mit <a href="MouseGetPos.htm">MouseGetPos</a> abgerufen werden.</p>
<p id="ControlsHwnd"><strong>WinGetControlsHwnd</strong>: Das gleiche wie oben, außer dass das <a href="Control.htm#GetHwnd">Fenster-Handle (HWND)</a> von jedem Steuerelement abgerufen wird, anstatt dessen ClassNN.</p>
<p id="Transparent"><strong>WinGetTransparent</strong>: Ermittelt die Transparenzstärke eines Fensters (siehe <a href="WinSet.htm">WinSet</a>, wie es transparent gemacht werden kann). <em>AusgabeVar</em> wird leer gemacht, wenn: 1) das Betriebssystem älter als Windows XP ist; 2) keine passenden Fenster gefunden werden; 3) das Fenster nicht transparent ist; oder 4) andere Bedingungen auftreten (durch das Verhalten des Betriebssystems), z. B. wenn das transparent gemachte Fenster minimiert, wiederhergestellt und/oder skaliert wurde. Ansonsten wird eine Zahl zwischen 0 und 255 gespeichert - 0 wäre ein durchsichtiges Fenster und 255 ein undurchsichtiges Fenster. Zum Beispiel:</p>
<pre>MouseGetPos,,, MausFenster
Transparent := WinGetTransparent("ahk_id " MausFenster)  <em>; Transparenz eines Fensters unterhalb des Mauszeigers.</em></pre>
<p id="TransColor"><strong>WinGetTransColor</strong>: Ermittelt die im Fenster als transparent markierte Farbe (siehe <a href="WinSet.htm#TransColor">WinSet</a>, wie eine transparente Farbe gesetzt werden kann). <em>AusgabeVar</em> wird leer gemacht, wenn: 1) das Betriebssystem älter als Windows XP ist; 2) keine passenden Fenster gefunden werden; 3) das Fenster keine transparente Farbe hat; oder 4) andere Bedingungen auftreten (durch das Verhalten des Betriebssystems), z. B. wenn das transparent gemachte Fenster minimiert, wiederhergestellt und/oder skaliert wurde. Ansonsten wird eine 6-stellige hexadezimale RGB-Farbe gespeichert (z. B. 0x00CC99). Zum Beispiel:</p>
<pre>MouseGetPos,,, MausFenster
TransFarbe := WinGetTransColor("ahk_id " MausFenster)  <em>; Transparente Farbe eines Fensters unterhalb des Mauszeigers.</em></pre>
<p id="Style"><strong>WinGetStyle</strong> oder <strong>WinGetExStyle</strong>: Ermittelt einen Integer, der den Style oder erweiterten Style eines Fensters repräsentiert. Wenn keine passenden Fenster gefunden werden, wird <em>AusgabeVar</em> leer gemacht. Das folgende Beispiel stellt fest, ob ein Fenster den WS_DISABLED-Style hat:</p>
<pre>if (WinGetStyle("Mein Fenstertitel") &amp; 0x8000000)  <em>; 0x8000000 ist WS_DISABLED.</em>
  ... das Fenster ist deaktiviert, entsprechende Maßnahme werden durchgeführt.</pre>
<p>Das nächste Beispiel stellt fest, ob ein Fenster den WS_EX_TOPMOST-Style hat (immer im Vordergund):</p>
<pre>if (WinGetExStyle("Mein Fenstertitel") &amp; 0x8)  <em>; 0x8 ist WS_EX_TOPMOST.</em>
  ... das Fenster ist immer im Vordergrund, entsprechende Maßnahme werden durchgeführt.</pre>
<p>Die <a href="../misc/Styles.htm">Style-Tabelle</a> beinhaltet eine Auflistung einiger Styles.</p>
<h3>Bemerkungen</h3>
<p>Die ID-Nummer eines Fensters ist nur gültig, während es existiert. Wenn man also eine Anwendung neustarten würde, bekämen all ihre Fenster neue ID-Nummern.</p>
<p>Alle ID-Nummern, die mit diese Funktionen abgerufen werden, sind numerisch (ohne den Präfix "ahk_id").</p>
<p>Die ID des Fensters, das sich unter dem Mauszeiger befindet, kann mit <a href="MouseGetPos.htm">MouseGetPos</a> abgerufen werden.</p>
<p>Fenstertitel und -texte unterscheiden zwischen Groß- und Kleinschreibung. Solange <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> deaktiviert ist, werden versteckte Fenster nicht wahrgenommen.</p>
<h3>Siehe auch</h3>
<p><a href="WinGetClass.htm">WinGetClass</a>, <a href="Process.htm">Process</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="MouseGetPos.htm">MouseGetPos</a>, <a href="Control.htm">Control-Funktionen</a>, <a href="ControlFocus.htm">ControlFocus</a>, <a href="GroupAdd.htm">GroupAdd</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1: Maximiert das aktive Fenster und meldet dessen eindeutige ID:</em>
AktiveID := WinGetID("A")
WinMaximize "ahk_id " AktiveID
MsgBox "Die ID des aktiven Fensters ist " AktiveID

<em>; Beispiel #2: Zeigt Infos über jedes Fenster im Betriebssystem an:</em>
id := WinGetList(,, "Program Manager")
Loop id.Length()
{
    diese_ID := id[A_Index]
    WinActivate "ahk_id " diese_ID
    diese_Klasse := WinGetClass("ahk_id " diese_ID)
    dieser_Titel := WinGetTitle("ahk_id " diese_ID)
    Result := MsgBox(Format("
    (
      Gehe alle Fenster durch
      {1} von {2}
      ahk_id {3}
      ahk_class {4}
      {5}
  
      Weiter?
    )", A_Index, id.Length(), diese_ID, diese_Klasse, dieser_Titel),, 4)
    if Result = "No"
        break
}

<em>; Beispiel #3: Zeigt alle Steuerelementnamen eines Fensters an:</em>
for n, ctrl in WinGetControls("A")
{
    Result := MsgBox("Steuerelement #" n " ist '" ctrl "'. Weiter?",, 4)
    if Result = "No"
        break
}

<em>; Beispiel #4: Zeigt in Echtzeit eine Steuerelementliste des aktiven Fensters an:</em>
SetTimer "überwacheAktivesFenster", 200

überwacheAktivesFenster() {
    Steuerelementliste := ""
    Steuerelemente := WinGetControls("A")
    if !Steuerelemente {
        ToolTip "Kein sichtbares Fenster aktiv."
        return
    }
    if !Steuerelemente.Length() {
        ToolTip "Das aktive Fenster hat keine Steuerelemente."
        return
    }
    Loop Steuerelemente.Length()
        Steuerelementliste .= Steuerelemente[A_Index] . "`n"
    ToolTip Steuerelementliste
}</pre>

</body>
</html>
