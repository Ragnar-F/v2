<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ListView (GUI) - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="In seiner bekanntesten Form zeigt das ListView-Steuerelement eine tabellarische Ansicht mit Reihen und Spalten an. Diese Seite enthält die Methoden, um es zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>

<body>
<h1>ListView</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles</a></li>
  <li><a href="#View">Anzeigemethoden</a>: Report (Standard), Icon, Tile, Small-Icon und List.</li>
  <li><a href="#BuiltIn">Interne Methoden</a>:
    <ul>
      <li><a href="#bifRow">Reihenmethoden (Hinzufügen, Ändern und Löschen von Reihen)</a></li>
      <li><a href="#bifCol">Spaltenmethoden</a></li>
      <li><a href="#bifGet">Daten aus einer ListView bekommen</a></li>
      <li><a href="#bifIcon">Symbole setzen</a></li>
    </ul>
  </li>
  <li><a href="#Events">Ereignisse</a></li>
  <li><a href="#IL">ImageLists</a> (Symbole in die ListView einfügen)</li>
  <li><a href="#Remarks">ListView-Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>
<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>ListView ist eines der umfangreichsten Steuerelemente, das vom Betriebssystem zur Verfügung gestellt wird. In seiner bekanntesten Form zeigt es eine tabellarische Ansicht mit Reihen und Spalten an - das bekannteste Beispiel davon ist die Listenansicht des Explorers (Detailansicht).</p>
<p>Eine typische ListView sieht wie folgt aus:</p>
<img src="../static/ctrl_listview.png" alt="ListView" />
<p>Zwar muss man sich erst einlesen, aber die grundlegenden Features einer ListView sind einfach zu bedienen. Die Syntax zum Erstellen einer ListView ist:</p>
<pre class="Syntax" id="GuiAdd">LV := Gui.<span class="func">Add</span>("ListView", Optionen, "Spaltentitel1|Spaltentitel2|...")</pre>
<p>Das folgende Beispiel zeigt, wie eine ListView erstellt und angezeigt werden kann, die eine Liste mit Dateien aus dem Benutzerordner "Eigene Dokumente" enthält:</p>
<pre><em>; Erstellt das Fenster.</em>
Gui := GuiCreate()

<em>; Erstellt eine ListView mit den zwei Spalten, Name und Größe:</em>
LV := Gui.Add("ListView", "r20 w700", "Name|Größe (KB)")

<em>; Benachrichtigt das Skript, wann immer der Benutzer eine Reihe doppelt anklickt:</em>
LV.OnEvent("DoubleClick", "LV_DoubleClick")

<em>; Sammelt eine Liste mit Dateien von einem Ordner und fügt sie in die ListView ein:</em>
Loop Files, A_MyDocuments "\*.*"
    <a href="#Add">LV.Add</a>(, A_LoopFileName, A_LoopFileSizeKB)

<a href="#ModifyCol">LV.ModifyCol</a>  <em>; Passt die Breiten der Spalten an den Inhalt der Reihen an.</em>
LV.ModifyCol(2, "Integer")  <em>; Kennzeichnet aus Sortierungsgründen die Spalte 2 als Integer.</em>

<em>; Zeigt das Fenster an.</em>
Gui.Show

LV_DoubleClick(LV, Reihennummer)
{
    Reihentext := <a href="#GetText">LV.GetText</a>(Reihennummer)  <em>; Ermittelt den Text aus dem ersten Feld der Reihe.</em>
    ToolTip("Sie haben die Reihennummer " Reihennummer " doppelt angeklickt. Text: '" Reihentext "'")
}</pre>
<h2 id="Options">Optionen und Styles für den <em>Optionen</em>-Parameter</h2>
<p><strong>Background</strong>: Geben Sie das Wort Background an und fügen Sie direkt danach einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder einen RGB-Wert (das 0x-Präfix ist optional) ein. Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Fehlt diese Option, verwendet ListView als Hintergrundfarbe standardmäßig die Standardhintergrundfarbe des Systems. Mit <code>BackgroundDefault</code> oder <code>-Background</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Mit <code>LV.Opt("+BackgroundDefault")</code> beispielsweise kann die Standardfarbe wiederhergestellt werden.</p>
<p><strong>C</strong>: Textfarbe. Geben Sie den Buchstaben C an und fügen Sie direkt danach einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder einen RGB-Wert (das 0x-Präfix ist optional) ein. Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked:</strong> Stellt eine nicht-abgehakte CheckBox auf der linken Seite jeder Reihe bereit. Beim <a href="#Add">Hinzufügen</a> einer Reihe kann das Wort <em>Check</em> in den Optionen angegeben werden, um die CheckBox zu Beginn im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox entweder anklicken oder die Leertaste drücken, um sie in den abgehakten oder nicht-abgehakten Zustand zu versetzen.</p>
<p id="Count"><strong>Count:</strong> Geben das Wort Count an und fügen Sie direkt danach die Anzahl der Reihen ein, die die ListView letztendlich enthalten soll. Diese Gesamtanzahl ist kein Limit: Nach Erreichen dieser Anzahl können weiterhin neue Reihen hinzugefügt werden. Stattdessen dient diese Option eher als Hinweis für das Steuerelement, dass es den Speicher nur einmal reservieren muss, und nicht jedes Mal, wenn eine neue Reihe hinzugefügt wird, was die Leistung beim Hinzufügen neuer Reihen deutlich verbessert (es könnte auch die Performance beim Sortieren verbessern). Um die Leistung weiter zu verbessern, nutzt man <code>LV.Opt("-Redraw")</code>, bevor eine große Anzahl von Reihen hinzugefügt werden. Verwenden Sie anschließend <code>LV.Opt("+Redraw")</code>, um das Neuzeichnen wieder zu aktivieren (was auch das Steuerelement neu zeichnet).</p>
<p><strong>Grid:</strong> Stellt horizontale und vertikale Linien bereit, um die Abgrenzungen zwischen den Reihen und Spalten hervorzuheben.</p>
<p><strong>Hdr:</strong> Geben Sie <code>-Hdr</code> (minus Hdr) an, um die Spaltenüberschriften zu verstecken. Mit <code>LV.Opt("+Hdr")</code> können die Spaltenüberschriften später wieder sichtbar gemacht werden.</p>
<p id="LVS_EX"><strong>LV:</strong> Geben Sie die Zeichenkette LV an und fügen Sie direkt danach die Nummer eines <a href="../misc/Styles.htm#LVS_EX">erweiterten ListView-Styles</a> ein. Diese Styles unterscheiden sich vollständig von den gewöhnlichen erweiterten Styles. Zum Beispiel würde <code><strong>-E</strong>0x200</code> den generischen erweiterten Style WS_EX_CLIENTEDGE entfernen, um den Standardrahmen des Steuerelements zu beseitigen. <code><strong>-LV</strong>0x20</code> würde hingegen <a href="#frs">LVS_EX_FULLROWSELECT</a> entfernen.</p>
<p><strong>LV0x10</strong>: Geben Sie <code>-LV0x10</code> an, um die Möglichkeit zu entfernen, die Spaltenüberschriften nach links oder rechts zu verschieben, um sie neu zu ordnen. Normalerweise ist das in der Regel nicht notwendig, weil die physische Neuanordnung der Spalten keinen Einfluss auf die vom Skript gesehene Spaltenanordnung hat. Zum Beispiel würde das Skript die erste Spalte immer als Spalte 1 sehen, selbst wenn der Benutzer sie physisch nach rechts verschoben hat.</p>
<p id="frs"><strong>LV0x20</strong>: Geben Sie <code>-LV0x20</code> an, damit eine Reihe nur ausgewählt werden kann, wenn ihr erstes Feld angeklickt wird (normalerweise können <em>alle</em> Felder angeklickt werden, um die Reihe auszuwählen). Der Vorteil davon ist, dass der Benutzer leichter ein Rechteck über mehrere Reihen ziehen kann, um sie auszuwählen.</p>
<p><strong>Multi:</strong> Geben Sie <code>-Multi</code> (minus Multi) an, um die Möglichkeit zu entfernen, mehr als eine Reihe auszuwählen.</p>
<p><strong>NoSortHdr:</strong> Verhindert, dass die Spaltenüberschriften angeklickt werden können. Außerdem werden sie nicht mehr als normale Schaltflächen dargestellt, sondern bekommen ein flacheres Aussehen. Im Gegensatz zu den meisten anderen ListView-Styles kann dieser Style nicht geändert werden, nachdem die ListView erstellt wurde.</p>
<p id="NoSort"><strong>NoSort:</strong> Deaktiviert die automatische Sortierung, die auftritt, wenn der Benutzer eine Spaltenüberschrift anklickt. Die Spaltenüberschrift verhält sich in visueller Hinsicht aber immer noch wie eine Schaltfläche (sofern NoSortHdr nicht vorhanden ist). Darüber hinaus wird das <a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a>-Ereignis weiterhin ausgelöst, so dass das Skript mit einer benutzerdefinierten Sortierung oder einer anderen Aktion reagieren kann.</p>
<p id="ReadOnly"><strong>ReadOnly:</strong> Geben Sie <code>-ReadOnly</code> (minus ReadOnly) an, um den Text in der ersten Spalte editierbar zu machen. Um eine Reihe zu editieren, wählt man sie aus und drückt die <kbd>F2</kbd>-Taste (siehe die <a href="#WantF2">WantF2</a>-Option unten). Oder wählen Sie eine Reihe per Linksklick aus, warten Sie mindestens eine halbe Sekunde, und klicken Sie dann die gleiche Reihe nochmals an, um sie editieren zu können.</p>
<p><strong>R</strong>: Reihen-Höhe (bei der Erstellung). Geben Sie den Buchstaben R an und fügen Sie direkt danach die Anzahl der Reihen ein, für die innerhalb des Steuerelements Platz geschaffen werden soll. Zum Beispiel würde <code>R10</code> das Steuerelement 10 Reihen hoch machen. Falls das ListView mit einer anderen <a href="#View">Anzeigemethode</a> als Report erstellt wurde, wird die Größe des Steuerelements angepasst, so dass Symbolreihen anstelle von Textreihen hineinpassen. Hinweis: Fügt man <a href="#IL">Symbole</a> in den Reihen einer ListView ein, wird die Höhe jeder Reihe zunehmen, wodurch diese Option ungenau wird.</p>
<p id="Sort"><strong>Sort:</strong> Das Steuerelement wird in Bezug zu den Inhalten der ersten Spalte alphabetisch sortiert.</p>
<p id="SortDesc"><strong>SortDesc:</strong> Das gleiche wie oben, nur in absteigender Reihenfolge.</p>
<p id="WantF2"><strong>WantF2</strong>: Geben Sie <code>-WantF2</code> (minus WantF2) an, um die Möglichkeit zu entfernen, die aktuell fokussierte Reihe mit <kbd>F2</kbd> zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, wenn <code>-<a href="#ReadOnly">ReadOnly</a></code> auch angegeben ist.</p>
<p><strong>(Namenlose numerische Styles)</strong>: Da die restlichen Styles nur selten verwendet werden, haben sie keine Namen. In der <a href="../misc/Styles.htm#ListView">ListView-Style-Tabelle</a> finden Sie eine Liste mit Styles.</p>
<h2 id="View">Anzeigemethoden</h2>
<p>Eine ListView hat fünf Anzeigemethoden, von denen die Report-Ansicht am häufigsten verwendet wird (Standardeinstellung). Um eine der anderen Ansichten zu nutzen, fügt man ihr Name in den Optionen ein. Die Ansicht kann auch geändert werden, nachdem das Steuerelement erstellt wurde. Zum Beispiel: <code>LV.Opt("+IconSmall")</code>.</p>
<p><strong>Icon:</strong> Zeigt eine Große-Symbole-Ansicht. In dieser und allen anderen Ansichten - außer <em>Report</em> - sind nur die Texte der ersten Spalte sichtbar. Um Symbole in diesem Modus darzustellen, muss der ListView eine <a href="#IL">ImageList</a> mit großen Symbolen zugewiesen werden.</p>
<p><strong>Tile</strong>: Zeigt eine Große-Symbole-Ansicht, aber mit ergonomischen Unterschieden - zum Beispiel wird der Text von jedem Element auf der rechten statt unteren Seite des Symbols dargestellt. <a href="#Checked">Checkboxes</a> funktionieren nicht in dieser Ansicht.</p>
<p><strong>IconSmall</strong>: Zeigt eine Kleine-Symbole-Ansicht.</p>
<p><strong>List:</strong> Zeigt eine Kleine-Symbole-Ansicht im Listenformat, in der die Symbole in Spalten dargestellt werden. Die Anzahl der Spalten hängt von der Breite des Steuerelements und der Breite des längsten Texteintrags ab.</p>
<p><strong>Report:</strong> Wechselt wieder zur Report-Ansicht (in moderneren Windows-Versionen auch als Details-Ansicht bekannt), die zu Beginn die Standardeinstellung ist. Zum Beispiel: <code>LV.Opt("+Report")</code>.</p>
<h2 id="BuiltIn">Interne Methoden für ListViews</h2>
<p>Zusätzlich zu den <a href="../objects/GuiControl.htm">Standardmethoden/-eigenschaften eines GUI-Steuerelements</a> können folgende Methoden für eine ListView benutzt werden. Wenn das zugeordnete <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> weder existiert noch zu einer ListView gehört, werden die ListView-Methoden eine <a href="Catch.htm#RuntimeErrors">Ausnahme</a> auslösen.</p>
<p id="RowNumber">Der auf dieser Seite verwendete Begriff "Reihennummer" bezieht sich auf die aktuelle Position einer Reihe innerhalb des ListViews. Die oberste Reihe ist 1, die zweite Reihe ist 2 und so weiter. Nachdem eine Reihe hinzugefügt wurde, neigen sie dazu, aufgrund von Sortieren, Löschen und Einfügen von anderen Reihen geändert zu werden. Um daher eine oder mehrere Reihen basierend auf ihre Inhalte zu lokalisieren, ist es am besten, <a href="#GetText">LV.GetText</a> in einer Schleife zu verwenden.</p>
<h3 id="bifRow">Reihenmethoden</h3>
  <div class="methodShort" id="Add">
    <h3>Add</h3>
    <p>Fügt eine neue Reihe an das untere Ende der Liste ein, und gibt die neue <a href="#RowNumber">Reihennummer</a> zurück, die nicht unbedingt die letzte Reihe repräsentieren muss, wenn ListView den <a href="#Sort">Sort</a>- oder <a href="#SortDesc">SortDesc</a>-Style hat.</p>
    <pre class="Syntax">NeueReihennummer := LV.<span class="func">Add</span>(<span class="optional">Optionen, Spalte1, Spalte2, ...</span>)</pre>
    <dl>
      <dt id="RowOptions">Optionen</dt>
      <dd>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Eine Zeichenkette mit null oder mehreren Wörtern aus der unteren Liste (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Wörter jeweils mit einem Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, muss ein Minuszeichen davor gesetzt werden. Um eine Option hinzuzufügen, lässt man das Vorzeichen weg oder setzt ein Pluszeichen davor.</p>
<p><strong>Check</strong>: Zeigt ein Häkchen in der Reihe an (sofern die ListView über <a href="#Checked">Checkboxen</a> verfügt). Mit <code>LV.Modify(Reihennummer, "-Check")</code> kann das Häkchen später wieder entfernt werden.</p>
<p id="ColN"><strong>Col</strong>: Geben Sie das Wort Col und direkt danach die Spaltennummer an, um den Startpunkt für die Parameter <em>Spalte1</em> und so weiter zu bestimmen. Diese Option wird häufig in Verbindung mit <a href="#Modify">LV.Modify</a> verwendet, um einzelne Felder in einer Reihe zu ändern, ohne dabei Felder zu beeinflussen, die links danebenliegen.</p>
<p id="Focus"><strong>Focus</strong>: Setzt den Tastaturfokus auf die Reihe (wird oft in Verbindung mit Select verwendet). Mit <code>LV.Modify(Reihennummer, "-Focus")</code> kann der Fokus später entfernt werden.</p>
<p><strong>Icon</strong>: Geben Sie das Wort Icon und direkt danach eine Symbolnummer an, um ein Symbol auf der linken Seite der ersten Spalte dieser Reihe anzuzeigen. Fehlt diese Option, wird das erste Symbol aus der <a href="#IL">ImageList</a> verwendet. Um ein leeres Symbol darzustellen, fügt man eine Nummer ein, die größer ist als die Anzahl der Symbole in der ImageList. Fehlt dem Steuerelement eine ImageList mit kleinen Symbolen, wird weder ein Symbol angezeigt noch dafür Platz in der <a href="#View">Report-Ansicht</a> reserviert.</p>
<p><strong>Select</strong>: Wählt die Reihe aus. Mit <code>LV.Modify(Reihennummer, "-Select")</code> kann die Auswahl später aufgehoben werden. Beim Auswählen der Reihen sollte man am besten sicherstellen, dass immer mindestens eine Reihe die <a href="#Focus">Fokus-Eigenschaft</a> hat, damit die MENÜ-Taste ihr <a href="../objects/GuiOnEvent.htm#ContextMenu">Kontextmenü</a> (falls vorhanden) in der Nähe der fokussierten Reihe anzeigen kann. Direkt nach dem Wort <em>Select</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Select"</code> das gleiche wie <code>"Select" <strong>.</strong> VarEnthältEins</code> (der hier verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>). Diese Vorgehensweise funktioniert auch bei <em>Focus</em> und <em>Check</em>.</p>
<p id="Vis"><strong>Vis</strong>: Sorgt dafür, dass eine bestimmte Reihe durch Scrollen der ListView komplett sichtbar ist, falls notwendig. Diese Option funktioniert nur bei LV.Modify; zum Beispiel: <code>LV.Modify(Reihennummer, "Vis")</code>.</p>
      </dd>
      <dt>Spalte1, Spalte2, ...</dt>
      <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Die Spalten der neuen Reihe, die Text oder numerisch sein können (einschließlich numerische Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>). Um ein beliebiges Feld leer zu machen, fügt man "" oder Gleichwertiges ein. Falls zu wenig Felder zum Füllen der Spalten vorhanden sind, bleiben die Spalten am Ende leer. Zuviel angegebene Felder werden einfach ignoriert.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Insert">
    <h3>Insert</h3>
    <p>Fügt eine neue Reihe bei einer bestimmten Reihennummer ein, und gibt die neue <a href="#RowNumber">Reihennummer</a> zurück.</p>
    <pre class="Syntax">NeueReihennummer := LV.<span class="func">Insert</span>(Reihennummer <span class="optional">, Optionen, Spalte1, Spalte2, ...</span>)</pre>
    <dl>
      <dt>Reihennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die Reihennummer der neu einzufügenden Reihe. Alle Reihen, die auf oder unterhalb der <em>Reihennummer</em> sind, werden nach unten verschoben, um Platz für die neue Reihe zu schaffen. Wenn <em>Reihennummer</em> größer als die Anzahl der Reihen in der Liste ist (sogar so hoch wie 2147483647), wird die neue Reihe an das untere Ende der Liste gesetzt.</p>
      </dd>
      <dt>Optionen</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Siehe <a href="#RowOptions">Reihenoptionen</a>.</p>
      </dd>
      <dt>Spalte1, Spalte2, ...</dt>
      <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Die Spalten der neuen Reihe, die Text oder numerisch sein können (einschließlich numerische Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>). Um ein beliebiges Feld leer zu machen, fügt man "" oder Gleichwertiges ein. Falls zu wenig Felder zum Füllen der Spalten vorhanden sind, bleiben die Spalten am Ende leer. Zuviel angegebene Felder werden einfach ignoriert.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Modify">
    <h3>Modify</h3>
    <p>Ändert die Attribute und/oder den Text einer Reihe, und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
    <pre class="Syntax">LV.<span class="func">Modify</span>(Reihennummer <span class="optional">, Optionen, Spalte1, Spalte2, ...</span>)</pre>
    <p>Hinweis: Wenn nur die ersten beiden Parameter vorhanden sind, werden nur die Attribute der Reihe geändert, aber nicht ihr Text.</p>
    <dl>
      <dt>Reihennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Eine Reihe, die modifiziert werden soll. Wenn <em>Reihennummer</em> eine 0 ist, werden <u>alle</u> Reihen im Steuerelement geändert (in diesem Fall ist der Rückgabewert bei vollem Erfolg eine 1, und eine 0, wenn ein Teil der Operation fehlgeschlagen ist).</p>
      </dd>
      <dt>Optionen</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Mit der <a href="#ColN">ColN-Option</a> können bestimmte Spalten aktualisiert werden, ohne dabei andere zu beeinflussen. Als Optionen können die <a href="#RowOptions">Reihen-Optionen</a> verwendet werden.</p>
      </dd>
      <dt>NeueSpalte1, NeueSpalte2, ...</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Die neuen Spalten der angegebenen Reihe, die Text oder numerisch sein können (einschließlich numerische Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>). Um ein beliebiges Feld leer zu machen, fügt man "" oder Gleichwertiges ein. Wenn zu wenig Parameter zum Füllen der Spalten vorhanden sind, bleiben die Spalten am Ende unverändert. Zuviel angegebene Felder werden einfach ignoriert.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Delete">
    <h3>Delete</h3>
    <p>Löscht eine bestimmte Reihe und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
    <pre class="Syntax">LV.<span class="func">Delete</span>(<span class="optional">Reihennummer</span>)</pre>
    <dl>
      <dt>Reihennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Eine Reihe, die gelöscht werden soll. Lässt man diesen Parameter weg, werden <strong>alle</strong> Reihen in der ListView gelöscht.</p>
      </dd>
    </dl>
  </div>
  <h3 id="bifCol">Spaltenmethoden</h3>
  <div class="methodShort" id="ModifyCol">
    <h3>ModifyCol</h3>
    <p>Ändert die Attribute und/oder den Text einer bestimmten Spalte und ihrer Spaltenüberschrift, und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
    <pre class="Syntax">LV.<span class="func">ModifyCol</span>(<span class="optional">Spaltennummer, Optionen, Spaltentitel</span>)</pre>
    <p>Hinweis: Lässt man alle Parameter weg, wird die Breite jeder Spalte an den Inhalt der Reihen angepasst. Wenn nur der erste Parameter vorhanden ist, wird nur die Größe der angegebenen Spalte automatisch angepasst. Die automatische Größenanpassung funktioniert nur in der Report- bzw. Detail-Ansicht.</p>
    <dl>
      <dt>Spaltennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Eine Spalte, die modifiziert werden soll. Die erste Spalte beginnt bei 1 (nicht 0).</p>
      </dd>
      <dt id="ColOptions">Optionen</dt>
      <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette mit null oder mehreren Wörtern aus der unteren Liste (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Wörter jeweils mit einem Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, muss ein Minuszeichen davor gesetzt werden. Um eine Option hinzuzufügen, lässt man das Vorzeichen weg oder setzt ein Pluszeichen davor.</p>
    <p><strong>Spalten-Optionen: Allgemein</strong></p>
    <p><strong>N</strong>: Geben Sie für N die neue Breite der Spalte an (in Pixel). Diese Nummer muss nicht in Anführungszeichen gesetzt werden, wenn sie die einzige Option ist. Zum Beispiel wären die folgenden Zeilen beide gültig: <code>LV.ModifyCol(1, 50)</code>, <code>LV.ModifyCol(1, "50 Integer")</code>.</p>
    <p><strong>Auto</strong>: Passt die Breite der Spalte an ihren Inhalten an. Diese Option funktioniert nur in der Report- bzw. Detail-Ansicht.</p>
    <p><strong>AutoHdr</strong>: Passt die Breite der Spalte an ihren Inhalten und ihrer Spaltenüberschrift an - je nachdem, was breiter ist. Wendet man diese Option bei der letzten Spalte an, wird ihre Breite mindestens so groß sein wie der restliche Platz der ListView. Diese Option sollte am besten nur angewendet werden, nachdem die Reihen eingefügt wurden, weil dadurch jeder Scrollbalken, der neu erschienen ist, beim Ändern der Größe der letzten Spalte einbezogen wird. Diese Option funktioniert nur in der Report- bzw. Detail-Ansicht.</p>
    <p><strong>Icon</strong>: Geben Sie das Wort Icon und direkt danach eine Symbolnummer aus der <a href="#IL">ImageList</a> an, um ein Symbol neben der Spaltenüberschrift anzuzeigen. Geben Sie <code>-Icon</code> (minus Icon) an, um alle vorhandenen Symbole zu entfernen.</p>
    <p><strong>IconRight</strong>: Zeigt das Symbol nicht auf der linken, sondern auf der rechten Seite der Spalte an.</p>
    <p><strong>Spalten-Optionen: Datentyp</strong></p>
    <p><strong>Float</strong>: Beim Sortieren werden die Felder der Spalte als Floating-Point-Zahlen angesehen (hexadezimales Format wird nicht unterstützt). Die Sortierleistung ist bei Float- und Text-Spalten bis zu 25-mal langsamer als die bei Integer-Spalten.</p>
    <p id="Integer"><strong>Integer</strong>: Beim Sortieren werden die Felder der Spalte als Integer angesehen. Um richtig sortiert zu werden, muss jeder Integer im 32-Bit-Format sein; also innerhalb des Bereiches von -2147483648 bis 2147483647. Jegliche Werte, die keine Integer sind, werden beim Sortieren als 0 angesehen (es sei denn, sie beginnen mit einer Zahl, dann wird diese verwendet). Die Zahlen können entweder dezimal oder hexadezimal (z. B. <code>0xF9E0</code>) sein.</p>
    <p id="Text"><strong>Text</strong>: Beim Sortieren werden die Felder der Spalte als Text angesehen - dies gilt standardmäßig für jede Spalte. Nur die ersten 8190 Zeichen des Textes werden beim Sortieren berücksichtigt (es sei denn, die <a href="#Logical"><em>Logical</em>-Option</a> wird genutzt, dann gilt ein Limit von 4094).</p>
    <p><strong>Spalten-Optionen: Ausrichtung</strong></p>
    <p><strong>Center</strong>: Zentriert den Text in der Spalte. Um eine Integer- oder Float-Spalte zu zentrieren, fügt man das Wort Center nach dem Wort Integer oder Float ein.</p>
    <p><strong>Left</strong>: Macht den Text der Spalte linksbündig, was die Standardeinstellung für jede neu erstellte Spalte ist. In älteren Betriebssystemen muss die erste Spalte eventuell immer linksbündig zu sein.</p>
    <p><strong>Right</strong>: Macht den Text der Spalte rechtsbündig. Bei Integer- und Float-Spalten muss dieses Attribut nicht angegeben werden, weil sie standardmäßig bereits rechtsbündig sind. Dieser Standard kann durch so etwas wie <code>"Integer Left"</code> oder <code>"Float Center"</code> überschrieben werden.</p>
    <p><strong>Spalten-Optionen: Sortierung</strong></p>
    <p id="Case"><strong>Case</strong>: Die Sortierung der Spalte erfolgt Groß-/Kleinschreibung-sensitiv (betrifft nur <a href="#Text">Text</a>-Spalten). Lässt man die Optionen <em>Case</em>, <em>CaseLocale</em> und <em>Logical</em> weg, werden die Großbuchstaben von A bis Z und die entsprechenden Kleinbuchstaben beim Sortieren gleichwertig behandelt.</p>
    <p><strong>CaseLocale</strong>: Die Sortierung der Spalte erfolgt nicht-Groß-/Kleinschreibung-sensitiv gemäß den aktuellen Sprach- und Regionseinstellungen des Benutzers (betrifft nur <a href="#Text">Text</a>-Spalten). In den meisten englischen und westeuropäischen Regionen beispielsweise werden die Großbuchstaben A bis Z, einschließlich ANSI-Zeichen wie Ä und Ü, und die entsprechenden Kleinbuchstaben gleichwertig behandelt. Diese Methode verwendet zudem eine "Wortsortierung" - Bindestriche und Apostrophe werden so behandelt, dass Wörter wie "coop" und "co-op" zusammen bleiben.</p>
    <p id="Desc"><strong>Desc</strong>: Absteigende Reihenfolge. Wenn der Benutzer die Spalte das erste Mal sortiert, wird sie in absteigender Reihenfolge angezeigt.</p>
    <p id="Logical"><strong>Logical</strong>: Das gleiche wie <em>CaseLocale</em>, außer dass Ziffernfolgen im Text nicht als normale Zeichen, sondern als echte Zahlen behandelt werden. Zum Beispiel wäre die Zeichenkette "T33" größer als "T4". <em>Logical</em> und <em>Case</em> schließen sich gegenseitig aus: Nur das vor kurzem angegebene wird aktiv sein.</p>
    <p><strong>NoSort</strong>: Verhindert, dass ein automatischer Sortierungseffekt auftritt, wenn der Benutzer auf diese Spalte klickt. Allerdings wird das <a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a>-Ereignis weiterhin ausgelöst, so dass das Skript mit einer benutzerdefinierten Sortierung oder einer anderen Aktion reagieren kann. Um die Sortierung für alle Spalten zu deaktivieren, fügt man <a href="#NoSort">NoSort</a> in den ListView-Optionen ein.</p>
    <p><strong>Sort</strong>: Sortiert die Spalte sofort in aufsteigender Reihenfolge (selbst wenn sie die <a href="#Desc">Desc</a>-Option hat).</p>
    <p><strong>SortDesc</strong>: Sortiert die Spalte sofort in absteigender Reihenfolge.</p>
    <p><strong>Uni</strong>: Unidirektionale Sortierung. Verhindert, dass ein zweiter Klick auf der gleichen Spalte die Sortierungsrichtung umkehrt.</p>
      </dd>
      <dt>Spaltentitel</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Die neue Spaltenüberschrift. Lässt man diesen Parameter weg, bleibt sie unverändert.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="InsertCol">
    <h3>InsertCol</h3>
    <p>Fügt eine neue Spalte bei einer bestimmten Spaltennummer ein, und gibt deren neue Positionsnummer zurück.</p>
    <pre class="Syntax">NeueSpaltennummer := LV.<span class="func">InsertCol</span>(Spaltennummer <span class="optional">, Optionen, Spaltentitel</span>)</pre>
    <dl>
      <dt>Spaltennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die Spaltennummer der neu einzufügenden Spalte. Alle Spalten, die auf oder rechts von der <em>Reihennummer</em> sind, werden nach rechts verschoben, um Platz für die neue Spalte zu schaffen. Die erste Spalte ist 1 (nicht 0). Die maximale Anzahl von Spalten in einer ListView ist 200. Wenn <em>Spaltennummer</em> größer ist als die Anzahl der vorhandenen Spalten im Steuerelement, wird die neue Spalte rechts neben der letzten Spalte gesetzt. Der Inhalt der neu eingefügten Spalte ist zu Beginn leer, es sei denn, es handelt sich um die erste Spalte, dann wird der Inhalt der alten ersten Spalte in die neue erste Spalte verschoben.</p>
      </dd>
      <dt>Optionen</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Die Attribute der neuen Spalte - egal ob sie z. B. <a href="#Integer">Integer-Sortierung</a> verwendet oder nicht - haben zu Beginn immer ihre Standardwerte, sofern sie nicht via <em><a href="#ColOptions">Optionen</a></em> geändert wurden.</p>
      </dd>
      <dt>Spaltentitel</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Die neue Spaltenüberschrift.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="DeleteCol">
    <h3>DeleteCol</h3>
    <p>Löscht eine bestimmte Spalte und all die Inhalte darunter, und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
    <pre class="Syntax">LV.<span class="func">DeleteCol</span>(Spaltennummer)</pre>
    <dl>
      <dt>Spaltennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Eine Spalte, die gelöscht werden soll. Wurde eine Spalte einmal entfernt, werden die Nummern der Spalten, die rechts danebenliegen, um 1 reduziert. Demzufolge würde das zweimalige Aufrufen von <code>LV.DeleteCol(2)</code> die zweite und dritte Spalte entfernen.</p>
      </dd>
    </dl>
  </div>
  <h3 id="bifGet">Daten aus einer ListView bekommen</h3>
  <div class="methodShort" id="GetCount">
    <h3>GetCount</h3>
    <p>Gibt die Anzahl der Reihen oder Spalten im Steuerelement zurück.</p>
    <pre class="Syntax">Anzahl := LV.<span class="func">GetCount</span>(<span class="optional">Modus</span>)</pre>
    <dl>
      <dt>Modus</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Lässt man diesen Parameter weg, wird die Anzahl der Reihen im Steuerelement zurückgegeben. Wenn dieser Parameter "S" oder "Select" ist, wird die Zählung nur die ausgewählten/hervorgehobenen Reihen einbeziehen. Wenn dieser Parameter "Col" oder "Column" ist, wird die Anzahl der Spalten im Steuerelement zurückgegeben. Der Rückgabewert wird sofort abgerufen, weil das Steuerelement solche Zählungen immer im Blick behält.</p>
      </dd>
    </dl>
    <p>Diese Methode wird häufig in der obersten Zeile einer Schleife verwendet - in diesem Fall würde die Funktion nur einmal aufgerufen werden (vor dem ersten Durchlauf). Zum Beispiel:</p>
    <pre>Loop LV.GetCount
{
    AbgerufenerText := LV.GetText(A_Index)
    if InStr(AbgerufenerText, "beliebiger Filtertext")
        LV.Modify(A_Index, "Select")  <em>; Markiert jede Reihe, die im ersten Feld den Filtertext enthält.</em>
}</pre>
    <p>Das folgende Beispiel zeigt, wie die Spaltenbreiten einer ListView abgerufen werden können, um sie z. B. in eine INI-Datei zu speichern, so dass sie zwischen den Sitzungen erhalten bleiben:</p>
    <pre>Gui.Opt("+LastFound")
Loop LV.GetCount("Column")
{
    Spaltenbreite := SendMessage(4125, A_Index - 1, 0, "SysListView321")  <em>; 4125 ist LVM_GETCOLUMNWIDTH.</em>
    MsgBox("Die Spalte " A_Index " hat eine Breite von " Spaltenbreite ".")
}</pre>
  </div>
  <div class="methodShort" id="GetNext">
    <h3>GetNext</h3>
    <p>Gibt die Reihennummer der nächsten ausgewählten, abgehakten oder fokussierten Reihe zurück, ansonsten 0.</p>
    <pre class="Syntax">Reihennummer := LV.<span class="func">GetNext</span>(<span class="optional">Startreihennummer, Reihentyp</span>)</pre>
    <dl>
      <dt>Startreihennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Wenn dieser Parameter weggelassen wird oder kleiner als 1 ist, beginnt die Suche am Anfang der Liste. Ansonsten beginnt die Suche bei der Reihe nach <em>Startreihennummer</em>.</p>
      </dd>
      <dt>Reihentyp</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
        <p>Lässt man den Parameter weg, wird die nächste ausgewählte/hervorgehobene Reihe gesucht. Verwenden Sie ansonsten "C" oder "Checked", um die nächste abgehakte Reihe zu finden; oder "F" oder "Focused", um die fokussierte Reihe zu finden (es gibt nie mehr als eine fokussierte Reihe in der gesamten Liste, und manchmal gibt es überhaupt keine).</p>
      </dd>
    </dl>
    <p>Das folgende Beispiel meldet alle ausgewählten Reihen in der ListView:</p>
    <pre>Reihennummer := 0  <em>; Veranlasst den ersten Schleifendurchlauf, die Suche am Anfang der Liste zu beginnen.</em>
Loop
{
    Reihennummer := LV.GetNext(Reihennummer)  <em>; Setzt die Suche bei der nächsten Reihe fort.</em>
    if not Reihennummer  <em>; Oben wurde null zurückgegeben, also gibt es keine weiteren ausgewählten Reihen.</em>
        break
    Text := LV.GetText(Reihennummer)
    MsgBox('Die nächste ausgewählte Reihe ist #' Reihennummer ', die im ersten Feld "' Text '" enthält.')
}</pre>
    <p>Das nächste Beispiel ist eine alternative Methode, mit der man herausfinden kann, ob eine bestimmte Reihennummer abgehakt ist:</p>
    <pre>Gui.Opt("+LastFound")
Elementstatus := SendMessage(4140, Reihennummer - 1, 0xF000, "SysListView321")  <em>; 4140 ist LVM_GETITEMSTATE. 0xF000 ist LVIS_STATEIMAGEMASK.</em>
IstAbgehakt := (Elementstatus &gt;&gt; 12) - 1  <em>; Setzt IstAbgehakt auf 1 (true), wenn <i>Reihennummer</i> abgehakt ist, ansonsten auf 0 (false).</em></pre>
  </div>
  <div class="methodShort" id="GetText">
    <h3>GetText</h3>
    <p>Ermittelt den Text, der auf einer bestimmten Reihe und Spalte zu finden ist.</p>
    <pre class="Syntax">ErmittelterText := LV.<span class="func">GetText</span>(Reihennummer <span class="optional">, Spaltennummer</span>)</pre>
    <dl>
      <dt>Reihennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die Nummer der Reihe, dessen Text abgerufen werden soll. Wenn dieser Parameter eine 0 ist, wird die Spaltenüberschrift abgerufen. <em>ErmittelterText</em> hat eine maximale Länge von 8191.</p>
      </dd>
      <dt>Spaltennummer</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die Nummer der Spalte, auf der sich die angegebene Reihe befindet. Lässt man den Parameter weg, wird standardmäßig 1 verwendet (der Text in der ersten Spalte). Die vom Skript gesehenen Spaltennummern bleiben erhalten, selbst wenn der Benutzer die Spalten verschieben würde. Zum Beispiel wäre die originale erste Spalte weiterhin die Nummer 1, selbst wenn der Benutzer sie nach rechts verschieben würde.</p>
      </dd>
    </dl>
  </div>
  <h3 id="bifIcon">Symbole setzen</h3>
  <div class="methodShort" id="SetImageList">
    <h3>SetImageList</h3>
    <p>Setzt oder ersetzt die <a href="#IL">ImageList</a>, und gibt die ImageListID zurück, die zuvor mit diesem Steuerelement verbunden wurde (oder eine 0, wenn dies nicht der Fall ist).</p>
    <pre class="Syntax">VorherigeImageListID := LV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, Symboltyp</span>)</pre>
    <dl>
      <dt>ImageListID</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Die zurückgegebene Nummer von <a href="ListView.htm#IL_Create">IL_Create</a>.</p>
      </dd>
      <dt>Symboltyp</dt>
      <dd>
        <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
        <p>Lässt man den zweiten Parameter weg, wird der Typ von großen oder kleinen Symbolen in der ImageList automatisch festgelegt. Verwenden Sie ansonsten eine 0 für große Symbole, eine 1 für kleine Symbole und eine 2 für Statussymbole (Statussymbole werden nur via <a href="SendMessage.htm">SendMessage</a> unterstützt).</p>
      </dd>
    </dl>
<p>Diese Methode wird normalerweise aufgerufen, bevor man Reihen in die ListView einfügt.</p>
    <p>Eine ListView kann bis zu zwei ImageLists haben: für kleine Symbole und/oder große Symbole. Damit könnte ein Skript den Benutzer zwischen den Symbolansichten wechseln zu lassen. Um mehr als eine ImageList in die ListView einzufügen, ruft man LV.SetImageList ein zweites Mal auf und übergibt die ImageListID der zweiten Liste. Eine ListView mit einer ImageList für große und kleine Symbole sollte sicherstellen, dass beide Listen die Symbole in gleicher Reihenfolge enthalten. Das liegt daran, dass mit der gleichen ID-Nummer sowohl auf die großen als auch auf die kleinen Versionen eines bestimmten Symbols verwiesen wird.</p>
<p>Üblicherweise zeigen alle <a href="#View">Anzeigemethoden</a> (außer Icon und Tile) kleine Symbole an. Diese Standardeinstellung kann man überschreiben, wenn man eine Liste für große Symbole an LV.SetImageList übergibt und eine 1 (kleine Symbole) im zweiten Parameter angibt. Dabei wird auch jede Reihe in der ListView höher gemacht, um Platz für große Symbole zu schaffen.</p>
    <p>
      Jede nicht mehr benötigte ImageList kann mit <a href="ListView.htm#IL_Destroy">IL_Destroy</a> zerstört werden.</p>
  </div>

<h2 id="Events">Ereignisse</h2>
<p>Die folgenden Ereignisse können erkannt und via <a href="../objects/GuiOnEvent.htm">OnEvent</a> in Verbindung mit einer Callback-Funktion oder Methode registriert werden:</p>
<table class="info">
  <tr><th>Ereignis</th><th>wird ausgelöst wenn...</th></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Click">Click</a></td><td>Das Steuerelement wurde angeklickt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>Das Steuerelement wurde doppelt angeklickt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ColClick">ColClick</a></td><td>Eine Spaltenüberschrift wurde angeklickt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>Der Benutzer hat einen Rechtsklick auf das Steuerelement gemacht, oder hat die <kbd>Menü</kbd>-Taste oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> gedrückt, während das Steuerelement fokussiert war.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#Focus">Focus</a></td><td>Das Steuerelement hat den Tastaturfokus erhalten.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>Das Steuerelement hat den Tastaturfokus verloren.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>Das Häkchen eines Elements wurde gesetzt oder entfernt.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>Die Beschriftung eines Elements wird vom Benutzer editiert.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemFocus">ItemFocus</a></td><td>Ein anderes Element wurde fokussiert.</td></tr>
  <tr><td><a href="../objects/GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>Ein Element wurde aus- oder abgewählt.</td></tr>
</table>
<p>Weitere (selten benutzte) Benachrichtigungen können mithilfe von <a href="../objects/GuiOnNotify.htm">OnNotify</a> erkannt werden. Diese Benachrichtigungen sind <a href="https://msdn.microsoft.com/library/ff485962">bei MSDN dokumentiert</a>. In der Regel zeigt MSDN keine numerischen Werte für die Benachrichtigungscodes an; diese können in der Windows SDK oder im Internet nachgeschlagen werden.</p>

<h2 id="IL">ImageList <span class="headnote">(Symbole in die ListView einfügen)</span></h2>
<p>Eine ImageList (übersetzt Bildliste) ist eine Gruppe von gleich großen Symbolen, die im Speicher abgelegt sind. Zu Beginn ist jede ImageList leer. Das Skript ruft IL_Add wiederholend auf, um Symbole mit fortlaufenden Nummern in die Liste einzufügen, beginnend bei 1. Auf so eine Nummer bezieht sich das Skript, wenn es ein bestimmtes Symbol auf einer Reihe oder Spaltenüberschrift anzeigen soll. Das folgende Beispiel zeigt, wie Symbole in den Reihen einer ListView eingefügt werden können:</p>
<pre>Gui := GuiCreate()  <em>; Erstellt ein GUI-Fenster.</em>
LV := Gui.Add("ListView", "h200 w180", "Symbol &amp; Nummer|Beschreibung")  <em>; Erstellt eine ListView.</em>
ImageListID := <a href="#IL_Create">IL_Create</a>(10)  <em>; Erstellt eine ImageList für 10 kleine Symbole.</em>
LV.<a href="#SetImageList">SetImageList</a>(ImageListID)  <em>; Weist die obige ImageList der aktuellen ListView zu.</em>
Loop 10  <em>; Fügt mehrere Symbole aus der DLL in die ImageList ein.</em>
    <a href="#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index) 
Loop 10  <em>; Fügt Reihen in die ListView ein (für jedes Symbol eine Reihe).</em>
    LV.Add("Icon" . A_Index, A_Index, "n/a")
LV.ModifyCol("Hdr")  <em>; Passt die Breiten der Spalten automatisch an.</em>
Gui.Show</pre>
<h3 id="IL_Create">IL_Create</h3>
  <p>Erstellt eine neue zunächst leere ImageList, und gibt die eindeutige ID der ImageList zurück (oder eine 0 bei Misserfolg).</p>
  <pre class="Syntax">EindeutigeID := <span class="func">IL_Create</span>(<span class="optional">AnfänglicheAnzahl := 2, WachsendeAnzahl := 5, GroßeSymbole := false</span>)</pre>
  <dl>
    <dt>AnfänglicheAnzahl</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die Anzahl der Symbole, die die Liste zu Beginn enthalten wird (lässt man diesen Parameter weg, wird standardmäßig 2 verwendet).</p>
    </dd>
    <dt>WachsendeAnzahl</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die Anzahl der Symbole, mit der die Liste erweitert werden soll, um der die Liste jedes Mal erweitert werden soll, wenn ihre Kapazität überschritten wird (lässt man diesen Parameter weg, wird standardmäßig 5 verwendet).</p>
    </dd>
    <dt>GroßeSymbole</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
      <p>Wenn dieser Parameter True ist, wird die ImageList große Symbole enthalten. Wenn dieser Parameter 0 (false) ist, wird die ImageList kleine Symbole enthalten (Standardeinstellung, wenn dieser Parameter weggelassen wird). Symbole, die man in die Liste einfügt, werden automatisch skaliert, damit sie mit den System-Abmessungen für kleine und große Symbole übereinstimmen.</p>
    </dd>
  </dl>
<h3 id="IL_Add">IL_Add</h3>
  <p>Fügt ein Symbol oder Bild in eine bestimmte ImageList ein und gibt die neue Indexnummer des Symbols zurück (1 ist das erste Symbol, 2 das zweite Symbol und so weiter).</p>
  <pre class="Syntax">Symbolindex := <span class="func">IL_Add</span>(ImageListID, Dateiname <span class="optional">, Symbolnummer := 1, BildSkalieren</span>)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID einer ImageList, die via <a href="#IL_Create">IL_Create</a> erstellt wurde.</p>
    </dd>
    <dt>Dateiname</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Der Name eines Symbols (.ICO), Cursors (.CUR) oder animierten Cursors (.ANI) (zurzeit werden animierte Cursor in einer ListView nicht wirklich animiert), oder ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> wie <code>"HBITMAP:" handle</code>. Folgende Dateitypen sind auch für Symbole geeignet: EXE, DLL, CPL, SCR und andere Typen, die Symbolressourcen enthalten.</p>
    </dd>
    <dt>Symbolnummer</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Um anstelle der ersten Symbolgruppe eine andere in der Datei zu nutzen, müssen Sie für <em>Symbolnummer</em> die entsprechende Nummer angeben. Wenn <em>Symbolnummer</em> negativ ist, wird der absolute Wert dieser Nummer als Ressourcen-ID eines Symbols innerhalb einer ausführbaren Datei vermutet. Die folgende Beispielanweisung lädt das Standardsymbol aus der zweiten Symbolgruppe: <code>IL_Add(ImageListID, "C:\Meine Anwendung.exe", 2)</code>.</p>
    </dd>
    <dt>BildSkalieren</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
      <p>Nicht-Symbol-Bilder wie BMP, GIF und JPG können ebenfalls geladen werden. In diesem Fall sollten die letzten beiden Parameter vorhanden sein, um korrektes Verhalten zu gewährleisten: <em>Symbolnummer</em> sollte die Nummer der Farbmaske/Transparenzfarbe sein (für die meisten Bilder am besten 0xFFFFFF, also weiß); und <em>BildSkalieren</em> sollte ungleich 0 sein, um das Bild auf ein einzelnes Symbol zu skalieren; oder 0, um das Bild über mehrere Symbole aufzuteilen.</p>
      <p>Unterstützte Bildformate sind ANI, BMP, CUR, EMF, Exif, GIF, ICO, JPG, PNG, TIF, und WMF.</p>
    </dd>
  </dl>
<h3 id="IL_Destroy">IL_Destroy</h3>
  <p>Löscht eine bestimmte ImageList, und gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>
  <pre class="Syntax">Erfolg := <span class="func">IL_Destroy</span>(ImageListID)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
      <p>Die ID einer ImageList, die via <a href="#IL_Create">IL_Create</a> erstellt wurde.</p>
    </dd>
  </dl>
  <p>
    Hinweis: Normalerweise ist es nicht notwendig, ImageLists zu zerstören, denn wenn sie einmal mit einer ListView verbunden sind, werden sie automatisch zerstört, wenn die ListView oder ihr übergeordnetes Fenster zerstört wird. Wenn eine ImageList bei mehreren ListViews verwendet wird (wenn <code>0x40</code> in deren Optionen ist), sollte das Skript die ImageList explizit zerstören, nachdem alle ListViews zerstört wurden. Ersetzt das Skript eine der alten ImageLists mit einer neuen, sollte es explizit die alte ImageList zerstören.</p>
<h2 id="Remarks">ListView-Bemerkungen</h2>
<p><a href="../objects/Gui.htm#Submit">Gui.Submit</a> hat keine Auswirkung auf ein ListView-Steuerelement.</p>
<p>Nachdem eine Spalte sortiert wurde - z. B. durch Anklicken der Spaltenüberschrift oder Aufrufen von <code>LV.<a href="#ModifyCol">ModifyCol</a>(1, "Sort")</code> - werden alle danach eingefügten Reihen am unteren Ende der Liste erscheinen, anstatt die aktuelle Sortierungsreihenfolge zu berücksichtigen. Die Ausnahme davon sind die Styles <a href="#Sort">Sort</a> und <a href="#SortDesc">SortDesc</a>, weil sie neu hinzugefügte Reihen an die korrekte Position verschieben.</p>
<p id="Enter">Um die Eingabe einer <kbd>Enter</kbd>-Taste bei einer fokussierten ListView zu erfassen, nutzt man eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> (die man natürlich verstecken kann). Zum Beispiel:</p>
<pre>Gui.Add("Button", "Hidden Default", "OK").OnEvent("Click", "LV_Enter")
...
LV_Enter(*) {
    global
    if Gui.FocusedCtrl != LV
        return
    MsgBox("Sie haben ENTER gedrückt. Die fokussierte Reihennummer ist " LV.GetNext(0, "Focused"))
}</pre>
<p>Neben der Möglichkeit, mit der Tastatur von Reihe zu Reihe zu navigieren, könnte der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten Zeichen eines Feldes aus der ersten Spalte eingibt. Dabei springt die Auswahl auf die nächst passende Reihe.</p>
<p>Zwar kann man ein Text mit beliebiger Länge in den Feldern einer ListView speichern, allerdings werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Die maximale Anzahl an Reihen ist nur durch den verfügbaren Systemspeicher begrenzt. Siehe <a href="#Count">Count</a>-Option, wie man die Leistung beim Hinzufügen von Reihen erheblich verbessern kann.</p>
<p>Es ist möglich, ein Bild hinter einer ListView zu verwenden (quasi zum Einrahmen der ListView). Um das zu tun, erstellt man das <a href="GuiControls.htm#Picture">Picture-Steuerelement</a> nach der ListView und fügt <code>0x4000000</code> (WS_CLIPSIBLINGS) in den <em>Optionen</em> des Picture-Steuerelements ein.</p>
<p>Ein Skript kann mehr als eine ListView pro Fenster erstellen.</p>
<p>Spalten sollten am besten nicht direkt mit <a href="SendMessage.htm">SendMessage</a> eingefügt oder entfernt werden. Dies liegt daran, dass das Programm mehrere <a href="#Integer">Sortierungseinstellungen</a> für jede Spalte verwaltet, die dann nicht mehr synchron wären. Verwenden Sie stattdessen die <a href="#bifCol">internen Spaltenmethoden</a>.</p>
<p>Schauen Sie sich das <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> an, um in Erfahrung zu bringen, wie eine ListView größer/kleiner gemacht, versteckt oder ihre Schrift geändert werden kann.</p>
<p>Mit <a href="ControlGetList.htm">ControlGetList</a> können Texte aus externen ListViews (das sind solche, die nicht zum Skript gehören) extrahiert werden.</p>
<h2>Siehe auch</h2>
<p><a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="GuiCreate.htm">GuiCreate</a>, <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu-Ereignis</a>, <a href="../objects/GuiControl.htm">Gui-Objekt</a>, <a href="../objects/GuiControl.htm">GuiControl-Objekt</a>, <a href="../misc/Styles.htm#ListView">Style-Tabelle von ListView</a></p>
<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre><em>; Das folgende Beispiel zeigt, wie mit einer 0 als Reihennummer alle Reihen aus- oder abgewählt werden können:</em>
LV.<a href="#Modify">Modify</a>(0, "Select")   <em>; Wählt alle aus.</em>
LV.Modify(0, "-Select")  <em>; Wählt alle ab.</em>
LV.Modify(0, "-Check")  <em>; Entfernt die Häkchen von allen <a href="#Checked">Checkboxen</a>.</em>

<em>; Passt die Breite der Spalten an den Inhalt der Reihen an:</em>
LV.<a href="#ModifyCol">ModifyCol</a>  <em>; Es gibt keine Parameter in diesem Modus.</em></pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a href="#ExAdvanced">#2</a>: Das folgende Skript ist aufwendiger als das Beispiel ganz oben. Es zeigt Dateien aus einem Ordner an, den der Benutzer aussuchen kann, und weist jeder Datei je nach Typ ein Symbol zu. Der Benutzer kann eine Datei doppelt anklicken, oder einen Rechtsklick auf eine oder mehrere Dateien machen, um das Kontextmenü anzuzeigen:</p>
<pre><em>; Erstellt ein GUI-Fenster:</em>
Gui := GuiCreate("+Resize")  <em>; Erlaubt dem Benutzer, das Fenster zu maximieren oder dessen Größe beliebig anzupassen.</em>

<em>; Erstellt einige Schaltflächen:</em>
B1 := Gui.Add("Button", "Default", "Ordner laden")
B2 := Gui.Add("Button", "x+20", "Liste leeren")
B3 := Gui.Add("Button", "x+20", "Ansicht wechseln")

<em>; Erstellt die ListView und ihre Spalten via <a href="#GuiAdd">Gui Add</a>:</em>
LV := <a href="#GuiAdd">Gui.Add</a>("ListView", "xm r20 w700 vLV", "Name|Ordner|Größe (KB)|Typ")
<a href="#ModifyCol">LV.ModifyCol</a>(3, "Integer")  <em>; Kennzeichnet aus Sortierungsgründen die Spalte "Größe" als Integer.</em>

<em>; Erstellt eine ImageList, mit der die ListView einige Symbole anzeigen kann:</em>
ImageListID1 := <a href="#IL_Create">IL_Create</a>(10)
ImageListID2 := IL_Create(10, 10, true)  <em>; Eine Liste mit großen Symbolen, verbunden mit den kleinen Symbolen.</em>

<em>; Verbindet die ImageLists mit der ListView, so dass sie später die Symbole anzeigen kann:</em>
<a href="#SetImageList">LV.SetImageList</a>(ImageListID1)
LV.SetImageList(ImageListID2)

<em>; Steuerelement-Ereignisse hinzufügen:</em>
LV.OnEvent("<a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>", "StarteDatei")
LV.OnEvent("<a href="../objects/GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a>", "ZeigeKontextmenü")
B1.OnEvent("Click", Func("LadeOrdner").bind(ImageListID1, ImageListID2))
B2.OnEvent("Click", (*) =&gt; <a href="#Delete">LV.Delete</a>())
B3.OnEvent("Click", "WechsleAnsicht")

<em>; Fenster-Ereignisse hinzufügen:</em>
Gui.OnEvent("Size", "Gui_Size")

<em>; Zeigt das Fenster an:</em>
Gui.Show()

LadeOrdner(ImageListID1, ImageListID2, this, *)
{
    static SymbolMap := Map()
    LV := this.Gui["LV"]
    this.Gui.Opt("+OwnDialogs")  <em>; Zwingt den Benutzer, das folgende Dialogfenster zu schließen, bevor er das Hauptfenster benutzen kann.</em>
    Ordner := DirSelect(, 3, "Wähle einen Ordner aus, das eingelesen werden soll:")
    if not Ordner  <em>; Der Benutzer hat das Dialogfenster abgebrochen.</em>
        return

    <em>; Überprüft, ob das letzte Zeichen im Ordnernamen ein umgekehrter Schrägstrich ist, das bei Root-Verzeichnissen
    ; wie C:\ vorkommt. Ist dies der Fall, muss es entfernt werden, um später einen doppelten Schrägstrich zu verhindern.</em>
    if SubStr(Ordner, -1, 1) = "\"
        Ordner := SubStr(Ordner, 1, -1)  <em>; Entfernt den Schrägstrich am Ende.</em>

    <em>; Berechnet die notwendige Pufferspeichergröße für die SHFILEINFO-Struktur.</em>
    sfi_größe := A_PtrSize + 688
    sfi := BufferAlloc(sfi_größe)

    <em>; Sammelt eine Liste mit Dateinamen vom ausgewählten Ordner und fügt sie in die ListView ein:</em>
    LV.Opt("-Redraw")  <em>; Verbessert die Leistung durch Deaktivieren der Neuzeichnung während des Ladens.</em>
    Loop Files, Ordner "\*.*"
    {
        Dateiname := A_LoopFilePath  <em>; Muss in eine schreibbare Variable gespeichert werden, damit sie unten verwendet werden kann.</em>

        <em>; Erstellt eine eindeutige Endungs-ID, um Zeichen in einem Variablennamen zu vermeiden, die illegal sind,
        ; wie z. B. Bindestriche. Zudem ist diese Methode leistungsfähiger, weil das Finden eines Elements
        ; in einem Array keine Such-Schleife erfordert.</em>
        SplitPath(Dateiname,,, Dateiendung)  <em>; Ermittelt die Dateiendung.</em>
        if Dateiendung ~= "^(EXE|ICO|ANI|CUR)$"
        {
            EndungsID := Dateiendung  <em>; Spezial-ID als Platzhalter.</em>
            Symbolnummer := 0  <em>; Markiert es als "nicht gefunden", damit jeder Typ ein einzigartiges Symbol haben kann.</em>
        }
        else  <em>; Sonstige Endung/Dateityp, also ihre eindeutige ID berechnen.</em>
        {
            EndungsID := 0  <em>; Initialisieren, um Endungen zu behandeln, die kürzer sind als andere.</em>
            Loop 7     <em>; Limitiert die Endung auf 7 Zeichen, so dass sie in einem 64-Bit-Wert passt.</em>
            {
                Endungszeichen := SubStr(Dateiendung, A_Index, 1)
                if not Endungszeichen  <em>; Keine weiteren Zeichen.</em>
                    break
                <em>; Erlangt eine eindeutige ID durch Zuweisen von unterschiedlichen Bit-Positionen für jedes Zeichen:</em>
                EndungsID := EndungsID | (Ord(Endungszeichen) &lt;&lt; (8 * (A_Index - 1)))
            }
            <em>; Überprüft, ob diese Dateiendung bereits ein Symbol in den ImageLists hat. Ist dies der Fall,
            ; können mehrere Aufrufe verhindert werden, was die Ladeleistung deutlich verbessert,
            ; besonders bei einem Ordner mit mehreren hundert Dateien:</em>
            Symbolnummer := SymbolMap.Has(EndungsID) ? SymbolMap[EndungsID] : 0
        }
        if not Symbolnummer  <em>; Es gibt noch kein Symbol für diese Endung, also wird es geladen.</em>
        {
            <em>; Ermittelt das kleine Symbol in hoher Qualität, das mit dieser Dateiendung verbunden ist:</em>
            if not DllCall("Shell32\SHGetFileInfoW", "Str", Dateiname
            , "Uint", 0, "Ptr", sfi, "UInt", sfi_größe, "UInt", 0x101)  <em>; 0x101 ist SHGFI_ICON+SHGFI_SMALLICON</em>
                Symbolnummer := 9999999  <em>; Setzt die Nummer außerhalb des gültigen Bereichs, um ein leeres Symbol anzuzeigen.</em>
            else <em>; Symbol erfolgreich geladen.</em>
            {
                <em>; Extrahiert das hIcon-Element aus der Struktur:</em>
                hIcon := NumGet(sfi, 0)
                <em>; Fügt das HICON direkt in die Listen der kleinen und großen Symbolen ein.
                ; Unten wird +1 verwendet, um die Indexnummer von 0-basiert zu 1-basiert umzuwandeln:</em>
                Symbolnummer := DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID1, "Int", -1, "Ptr", hIcon) + 1
                DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID2, "Int", -1, "Ptr", hIcon)
                <em>; Da es nun in die ImageLists kopiert wurde, sollte das Original zerstört werden:</em>
                DllCall("DestroyIcon", "Ptr", hIcon)
                <em>; Cacht das Symbol, um Speicher zu sparen und Ladeleistung zu erhöhen:</em>
                SymbolMap[EndungsID] := Symbolnummer
            }
        }

        <em>; Erstellt die neue Reihe in der ListView und weist ihr die oben ermittelte Symbolnummer zu:</em>
        <a href="#Add">LV.Add</a>("Icon" . Symbolnummer, A_LoopFileName, A_LoopFileDir, A_LoopFileSizeKB, Dateiendung)
    }
    LV.Opt("+Redraw")  <em>; Reaktiviert die Neuzeichnung (es wurde oben deaktiviert).</em>
    LV.ModifyCol()  <em>; Passt die Breiten der Spalten an den Inhalt der Reihen an.</em>
    LV.ModifyCol(3, 65)  <em>; Macht die Spalte "Größe" etwas breiter, um die Spaltenüberschrift komplett sichtbar zu machen.</em>
}

WechsleAnsicht(this, *)
{
    static IconView
    LV := this.Gui["LV"]
    if not IconView
        LV.Opt("+Icon")        <em>; Wechselt zur Symbolansicht.</em>
    else
        LV.Opt("+Report")      <em>; Wechselt wieder zur Detail-Ansicht.</em>
    IconView := not IconView   <em>; Kehrt den Wert für die nächste Benutzung um.</em>
}

StarteDatei(LV, Reihennummer)
{
    Dateiname := <a href="#GetText">LV.GetText</a>(Reihennummer, 1) <em>; Ermittelt den Text des ersten Feldes.</em>
    Dateiverz := LV.GetText(Reihennummer, 2)  <em>; Ermittelt den Text des zweiten Feldes.</em>
    try Run(Dateiverz "\" Dateiname)
    if A_LastError
        MsgBox(Dateiverz "\" Dateiname " konnte nicht geöffnet werden.")
}

ZeigeKontextmenü(LV, Element, IstRechtsklick, X, Y)  <em>; Als Reaktion auf Rechtsklick oder MENÜ-Taste.</em>
{
    <em>; Erstellt ein aufklappbares Menü, das als Kontextmenü verwendet wird:</em>
    static Kontextmenü := <a href="MenuCreate.htm">MenuCreate</a>()
    <a href="../objects/Menu.htm#Add">Kontextmenü.Add</a>("Öffnen", "ÖffnenOderEigenschaften")
    Kontextmenü.Add("Eigenschaften", "ÖffnenOderEigenschaften")
    Kontextmenü.Add("Aus ListView entfernen", "ReihenLeeren")
    <a href="../objects/Menu.htm#Default">Kontextmenü.Default</a> := "Öffnen"  <em>; Zeigt "Öffnen" in fetter Schrift an, um zu kennzeichnen, dass ein Doppelklick das gleiche bewirkt.
    ; Zeigt das Menü bei den Koordinaten X und Y an. Diese Koordinaten
    ; sind auch dann korrekt, wenn der Benutzer die MENÜ-Taste drückt:</em>
    <a href="../objects/Menu.htm#Show">Kontextmenü.Show</a>(X, Y)

    ÖffnenOderEigenschaften(Menüpunktname, *)  <em>; Der Benutzer hat "Öffnen" oder "Eigenschaften" im Kontextmenü ausgewählt.</em>
    {
        Dateiname := LV.GetText(Element, 1) <em>; Ermittelt den Text des ersten Feldes.</em>
        Dateiverz := LV.GetText(Element, 2)  <em>; Ermittelt den Text des zweiten Feldes.</em>
        if (Menüpunktname = "Öffnen")  <em>; Benutzer hat "Öffnen" im Kontextmenü ausgewählt.</em>
            try Run(Dateiverz "\" Dateiname)
        else
            try Run("properties " Dateiverz "\" Dateiname)
        if A_LastError
            MsgBox("Angeforderte Aktion auf " Dateiverz "\" Dateiname " konnte nicht durchgeführt werden.")
    }

    ReihenLeeren(*)  <em>; Der Benutzer hat "Leeren" im Kontextmenü ausgewählt.</em>
    {
        Reihennummer := 0  <em>; Veranlasst den ersten Schleifendurchlauf, die Suche am Anfang zu beginnen.</em>
        Loop
        {
            <em>; Da das Löschen einer Reihe die Reihennummer aller anderen Reihen darüber reduziert,
            ; sollten sie um 1 subtrahiert werden, so dass die Suche die gleiche Reihennummer einbezieht,
            ; die zuvor gefunden wurde (falls die benachbarten Reihen ausgewählt sind):</em>
            Reihennummer := LV.GetNext(Reihennummer - 1)
            if not Reihennummer  <em>; Oben wurde null zurückgegeben, also gibt es keine weiteren ausgewählten Reihen.</em>
                break
            LV.Delete(Reihennummer)  <em>; Entfernt die Reihe aus der ListView.</em>
        }
    }
}

Gui_Size(this, MinMax, Breite, Höhe)  <em>; Vergrößert/verkleinert die ListView, wenn sich die Fenstergröße ändert.</em>
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
        return
    <em>; Ansonsten wurde die Fenstergröße geändert oder maximiert. Passt die Größe der ListView an den neuen Werten an.</em>
    this["LV"].Move("W" Breite - 20 " H" Höhe - 40)
}</pre>

</div>
</body>
</html>
