<!DOCTYPE HTML>
<html lang="de">
<head>
<title>GUI-Steuerelemente - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="GUI-Steuerelemente sind Interaktionselemente, die man via Add-Methode des Gui-Objekts in einem GUI-Fenster einfügen kann." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<style>
  img {
    margin: 0 1.5em;
    border: 1px solid silver;
  }
</style>
</head>
<body>

<h1><a href="../objects/Gui.htm">GUI</a>-Steuerelemente</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Text">Text</a>, <a href="#Edit">Edit</a>, <a href="#UpDown">UpDown</a>, <a href="#Picture">Picture</a></li>
  <li><a href="#Button">Button</a>, <a href="#Checkbox">Checkbox</a>, <a href="#Radio">Radio</a></li>
  <li><a href="#DropDownList">DropDownList</a>, <a href="#ComboBox">ComboBox</a></li>
  <li><a href="#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
  <li><a href="#Link">Link</a>, <a href="#Hotkey">Hotkey</a>, <a href="#DateTime">DateTime</a></li>
  <li><a href="#MonthCal">MonthCal</a>, <a href="#Slider">Slider</a>, <a href="#Progress">Progress</a></li>
  <li><a href="#GroupBox">GroupBox</a>, <a href="#Tab">Tab3</a>, <a href="#StatusBar">StatusBar</a></li>
  <li><a href="#ActiveX">ActiveX</a> (z. B. Internet Explorer Control)</li>
  <li><a href="#Custom">Custom</a></li>
</ul>

<h2 id="Text">Text</h2>
<p>Beschreibung: Ein Bereich mit randlosem Text, den der Benutzer nicht editieren kann. Oft verwendet, um andere Steuerelemente zu beschriften.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Text",, "Bitte tragen Sie Ihren Namen ein:")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_text.png" alt="Text" />
<p>Geben Sie im letzten Parameter die darzustellende Zeichenkette an. Die Zeichenkette kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen zu beginnen. Außerdem kann mithilfe eines <a href="../Scripts.htm#continuation">Fortsetzungsbereichs</a> eine lange Zeile in mehreren kurzen Zeilen aufgeteilt werden.</p>
<p>Wenn in <em>Optionen</em> eine Breite (W), aber keine <a href="../objects/Gui.htm#R">Zeilen (R)</a> oder Höhe (H) angegeben ist, wird der Text bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>

<p>Mit dem <a href="../objects/GuiOnEvent.htm#Click">Click-Ereignis</a> kann man erkennen, wann der Benutzer den Text anklickt. Zum Beispiel:</p>
<pre>Gui := GuiCreate()
FakeLink := Gui.Add("Text", "", "Klicken Sie hier, um Google zu starten.")
FakeLink.SetFont("underline cBlue")
FakeLink.OnEvent("Click", "LaunchGoogle")

<em>; Alternativ kann auch das <a href="#Link">Link</a>-Steuerelement verwendet werden:</em>
Gui.Add("Link",, 'Klicken Sie &lt;a href="www.google.com"&gt;hier&lt;/a&gt;, um Google zu starten.')
Gui.Show()

LaunchGoogle() {
    Run("www.google.com")
}</pre>
<p>Text-Steuerelemente unterstützen auch das <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick-Ereignis</a>.</p>
<p id="SS_NOTIFY">Nur Text-Steuerelemente mit dem SS_NOTIFY-Style (0x100) senden Klick- und Doppelklickbenachrichtigungen, daher wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> automatisch diesen Style hinzufügen, wenn ein Click- oder DoubleClick-Callback registriert wird. In Windows Vista und höher bewirkt der SS_NOTIFY-Style, dass der Text des Steuerelements bei einem Doppelklick in die Zwischenablage kopiert wird.</p>
<p>Mit einem Und-Zeichen (&amp;) kann einer der Buchstaben im Text unterstrichen werden. Zum Beispiel:</p>
<pre>Gui.Add("Text",, "&amp;Vorname:")
Gui.Add("Edit")</pre>
<p>Das Beispiel oben führt dazu, dass der Buchstabe V unterstrichen und das <a href="../objects/Gui.htm#ShortcutKey">Tastenkürzel</a> <kbd>Alt</kbd>+<kbd>V</kbd> aktiviert wird. Dieses Tastenkürzel kann der Benutzer drücken, um den Tastaturfokus auf das erste danach erstellte eingabefähige Steuerelement zu setzen. Um stattdessen ein Und-Zeichen im Text des Steuerelements darzustellen, sind zwei aufeinanderfolgende Und-Zeichen (&amp;&amp;) erforderlich. Fügen Sie <a href="../misc/Styles.htm#SS_NOPREFIX">0x80</a> in den Optionen des Steuerelements ein, um die Sonderbehandlung der Und-Zeichen komplett zu deaktivieren.</p>
<p>Unter <a href="../objects/Gui.htm#OtherOptions">Allgemeine Optionen</a> finden Sie weitere Optionen wie <em>Right</em>, <em>Center</em> und <em>Hidden</em>. Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>

<h2 id="Edit">Edit</h2>
<p>Beschreibung: Ein Eingabefeld, das der Benutzer zum Eintragen eines formatlosen Textes nutzen kann.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Edit", "r9 vMeinEdit w135", "Der Text innerhalb des Eingabefelds (lassen Sie diesen Parameter weg, um ein leeres Feld anzuzeigen).")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_edit.png" alt="Edit" />
<p>Das Steuerelement wird als mehrzeilig erkannt, wenn es mehr als eine Textzeile enthält. Die Angabe von <code>r3</code> in <em>Optionen</em> bewirkt beispielsweise, dass ein dreizeiliges Eingabefeld mit folgenden Standardeigenschaften erstellt wird: vertikale Scrollleiste; automatischer Zeilenumbruch; <kbd>Enter</kbd> erzeugt einen Zeilenumbruch, anstatt die <a href="#DefaultButton">Standardschaltfläche</a> des Fensters auszulösen.</p>
<p>Fügen Sie im letzte Parameter entweder ein einzelnes LF (`n) oder CR+LF (`r`n) ein, um eine neue Zeile innerhalb eines mehrzeiligen Eingabefeldes zu beginnen. Beide Varianten erzeugen direkt geschriebene CR+LF-Paare (`r`n) innerhalb des Eingabefeldes. Nutzt man jedoch <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a>, um den Inhalt des Steuerelements abzurufen, werden CR+LF-Paare (`r`n) immer in einzelne Zeilenumbruchszeichen (`n) umgewandelt. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann diese End-of-Line-Umwandlung umgangen werden. Um den Inhalt des Eingabefeldes in eine Datei zu schreiben, können Sie wie folgt vorgehen: <code><a href="FileAppend.htm">FileAppend</a>(MeinEdit.Text, "C:\Gespeicherte Datei.txt")</code>.</p>
<p>Jeder beim Schreiben verursachte automatische Zeilenumbruch, sofern aktiv (Standardeinstellung bei mehrzeiligen Eingabefeldern), ist rein visueller Natur; das heißt, dass dadurch keine physischen Zeilenumbruchszeichen erzeugt werden (nur das Drücken von <kbd>Enter</kbd> ist dazu in der Lage).</p>
<p>Jedes Mal, wenn der Benutzer den Inhalt des Steuerelements ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<p>TIPP: Verwenden Sie <a href="FileRead.htm">FileRead</a> und <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a>, um den Inhalt einer Textdatei in ein Eingabefeld zu laden. Zum Beispiel:</p>
<pre>MeinEdit := Gui.Add("Edit", "R20")
MeinEdit.Value := FileRead("C:\Meine Datei.txt")</pre>

<h3>Edit-Optionen</h3>
<p>Setzen Sie ein Minuszeichen davor, um eine der folgenden Optionen zu entfernen statt hinzuzufügen:</p>
<p><strong>Limit</strong>: Beschränkt die Benutzereingabe auf die sichtbare Breite des Eingabefeldes. Alternativ können Sie nach diesem Wort eine Zahl angeben, um die Eingabe auf eine bestimmte Anzahl von Zeichen zu begrenzen. <code>Limit10</code> beispielsweise bewirkt, dass der Benutzer nur maximal 10 Zeichen in das Eingabefeld eintragen darf.</p>
<p><strong>Lowercase</strong>: Die vom Benutzer geschriebenen Zeichen werden automatisch in Kleinbuchstaben umgewandelt.</p>
<p id="EditMulti"><strong>Multi</strong>: Ermöglicht mehr als eine Textzeile im Eingabefeld. Normalerweise muss diese Option nicht gesetzt werden, weil sie anhand der Höhe (H), der <a href="../objects/Gui.htm#R">Zeilen (R)</a> oder des Inhalts (<em>Text</em>) automatisch erkannt wird.</p>
<p id="EditNum"><strong>Number</strong>: Verhindert, dass der Benutzer etwas anderes als Zahlen in das Feld eintragen kann (allerdings ist es immer noch möglich, nicht-numerische Werte via Zwischenablage einzufügen). Eine numerische Benutzereingabe kann auch erzwungen werden, wenn Sie dem Eingabefeld ein <a href="#UpDown">UpDown</a>-Steuerelement zuweisen.</p>
<p><strong>Password</strong>: Versteckt die Benutzereingabe (z. B. für eine Passworteingabe); das heißt, dass jedes Zeichen, das der Benutzer eingibt, mit einem Maskierungszeichen ersetzt wird. Wenn Sie ein anderes Maskierungszeichen benötigen, können Sie direkt nach dem Wort Password das gewünschte Zeichen angeben. <code>Password*</code> bewirkt beispielsweise, dass als Maskierungszeichen nicht wie seit Windows XP üblich der vollflächige Kreis, sondern das Sternchen verwendet wird. Hinweis: Diese Option funktioniert nicht bei mehrzeiligen Eingabefeldern.</p>
<p><strong>ReadOnly</strong>: Verhindert, dass der Benutzer den Inhalt des Steuerelements ändern kann. Der Text kann aber weiterhin gescrollt, markiert und in die Zwischenablage kopiert werden.</p>
<p><strong>Tn</strong>: Mit dem Buchstaben T können Tabstopps innerhalb eines <a href="#EditMulti">mehrzeiligen Eingabefeldes</a> gesetzt werden (Tabstopps sind Ansprungspositionen für direkt geschriebene Tabulatorzeichen und ermöglichen somit, den Text in Spalten aufzuteilen). Wenn der Buchstabe T nicht verwendet wird, werden Tabstopps auf je 32 Dialogeinheiten gesetzt (die Breite jeder "Dialogeinheit" ist systemintern festgelegt). Wenn der Buchstabe T nur einmal verwendet wird, werden Tabstopps auf je <strong>n</strong> Dialogeinheiten innerhalb der verfügbaren Breite des Steuerelements gesetzt. <code>Gui.Add("Edit", "vMeinEdit r16 t64")</code> beispielsweise verdoppelt den Standardabstand zwischen den Tabstopps. Geben Sie den Buchstaben T mehrmals wie folgt an, um benutzerdefinierte Tabstopps zu setzen: <code>Gui.Add("Edit", "vMeinEdit r16 t8 t16 t32 t64 t128")</code>. Für jede absolute Spaltenposition in der Liste wird ein Tabstopp gesetzt, bis zu einem Maximum von 50 Tabstopps. Hinweis: Tabstopps funktionieren nur bei mehrzeiligen Eingabefeldern.</p>
<p><strong>Uppercase</strong>: Die vom Benutzer geschriebenen Zeichen werden automatisch in Großbuchstaben umgewandelt.</p>
<p><strong>WantCtrlA</strong>: Geben Sie -WantCtrlA (minus WantCtrlA) an, um zu verhindern, dass der Benutzer via <kbd>Strg</kbd>+<kbd>A</kbd> den gesamten Text im Eingabefeld markieren kann.</p>
<p id="WantReturn"><strong>WantReturn</strong>: Geben Sie -WantReturn (minus WantReturn) an, um zu verhindern, dass <kbd>Enter</kbd> von einem mehrzeiligen Eingabefeld erfasst wird. Das Drücken von <kbd>Enter</kbd> wäre dann das gleiche wie, als würde man die <a href="#DefaultButton">Standardschaltfläche</a> des Fensters (falls vorhanden) drücken. Um dennoch eine neue Zeile zu beginnen, kann der Benutzer <kbd>Strg</kbd>+<kbd>Enter</kbd> drücken.</p>
<p><strong>WantTab</strong>: Führt dazu, dass <kbd>Tab</kbd> ein Tabulatorzeichen erzeugt, anstatt zum nächsten Steuerelement zu navigieren. Wenn diese Option nicht angegeben ist, kann der Benutzer <kbd>Strg</kbd>+<kbd>Tab</kbd> drücken, um ein Tabulatorzeichen innerhalb eines mehrzeiligen Eingabefeldes zu erzeugen. Hinweis: <em>WantTab</em> funktioniert auch in einem einzeiligen Eingabefeld, allerdings wird jedes Tabulatorzeichen als leeres Rechteck dargestellt (aber immer noch als echtes Tabulatorzeichen gespeichert).</p>
<p><strong>-Wrap</strong>: Deaktiviert den automatischen Zeilenumbruch in einem mehrzeiligen Eingabefeld. Dieser Style kann nach dem Erstellen des Steuerelements nicht mehr geändert werden. Um dies dennoch zu tun, gibt es folgende Vorgehensweisen: 1) <a href="../objects/Gui.htm#Destroy">Zerstören</a> Sie das Fenster und alle darin enthaltenen Steuerelemente und erstellen Sie es danach wieder; oder 2) Erstellen Sie zwei überlappende Eingabefelder, das eine mit automatischen Zeilenumbruch und das andere ohne. Der derzeit nicht genutzte kann leer gelassen und/oder versteckt werden.</p>
<p>Unter <a href="../objects/Gui.htm#OtherOptions">Allgemeine Optionen</a> finden Sie weitere Optionen wie <em>Right</em>, <em>Center</em> und <em>Hidden</em>. Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<p><strong>Ein umfangreicheres Eingabefeld</strong>: HiEdit ist ein frei verfügbares Eingabefeld, das mehrere Tabs hat, mit großen Dateien umgehen kann und sehr wenig Speicher verbraucht. Es kann zum Editieren von Text- und Binärdateien verwendet werden. Weitere Informationen und ein Beispiel finden Sie <a href="https://github.com/majkinetor/mm-autohotkey/tree/master/HiEdit">hier</a></p>

<h2 id="UpDown">UpDown</h2>
<p>Beschreibung: Zwei Pfeile als Schaltflächen, die der Benutzer drücken kann, um einen Wert zu erhöhen oder zu verringern. Standardmäßig fügt sich ein UpDown automatisch an das zuvor hinzugefügte Steuerelement an. Dieses zuvor hinzugefügte Steuerelement wird auch als <em>Buddy</em> bezeichnet. Das bekannteste Beispiel dafür ist der "Spinner" (Drehrad) - ein an ein <a href="#Edit">Eingabefeld</a> angehängtes UpDown-Steuerelement.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Edit")
Gui.Add("UpDown", "vMeinUpDown Range1-10", 5)</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_updown.png" alt="UpDown" />
<p>Das Beispiel oben führt dazu, dass das Eingabefeld als Buddy des UpDown-Steuerelements festgelegt wird. Jedes Mal, wenn der Benutzer eine der Pfeilschaltflächen drückt, wird die Zahl im Eingabefeld automatisch erhöht oder verringert.</p>
<p>Das Buddy-Steuerelement kann auch ein <a href="#Text">Text</a>- oder <a href="#ListBox">ListBox</a>-Steuerelement sein. Bei anderen Steuerelementen (wie z. B. ComboBox oder DropDownList) werden Features wie das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis aufgrund von Einschränkungen im Betriebssystem eventuell nicht korrekt funktionieren.</p>
<p>Geben Sie im letzten Parameter die Startposition des UpDown-Steuerelements an (wenn dieser fehlt oder leer ist, beginnt das Steuerelement bei 0 oder beim niedrigsten zulässigen Bereichswert).</p>
<p>Nutzen Sie <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a>, um die aktuelle numerische Position des UpDown-Steuerelements abzurufen. Wenn das UpDown-Steuerelement mit einem Eingabefeld verbunden ist, empfiehlt es sich, den aktuellen Wert des UpDown-Steuerelements und nicht den des Eingabefelds abzurufen. So wird garantiert, dass immer eine im gültigen Bereich liegende Nummer zurückgegeben wird, selbst wenn der Benutzer etwas in das Eingabefeld eingetragen hat, das nicht-numerisch ist oder außerhalb des gültigen Bereichs liegt. Beachten Sie zudem, dass Zahlen länger als 3 Ziffern standardmäßig mit einem <a href="../misc/Styles.htm#UpDownSep">Tausendertrennzeichen</a> (z. B. Punkt) in Dreiergruppen eingeteilt werden. Diese Trennzeichen werden vom Eingabefeld zurückgegeben, nicht vom UpDown-Steuerelement.</p>
<p>Jedes Mal, wenn der Benutzer auf eine der Pfeilschaltflächen klickt oder eine Pfeiltaste auf der Tastatur drückt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>

<h3>UpDown-Optionen</h3>
<p id="Horz"><strong>Horz</strong>: Richtet die Schaltflächen des Steuerelements nach links/rechts statt oben/unten aus. Standardmäßig bewirkt <em>Horz</em> aber auch, dass das Steuerelement isoliert bzw. vom Buddy-Steuerelement getrennt wird. Um dieses Verhalten zu überschreiben, können Sie <code>Horz 16</code> in den Optionen des Steuerelements einfügen.</p>
<p><strong>Left</strong>: Positioniert das UpDown-Steuerelement auf die linke statt rechte Seite des Buddy-Steuerelements.</p>
<p><strong>Range</strong>: Setzt den Bereich auf etwas anderes als 0 bis 100. Nach dem Wort Range können Sie den Minimal- und Maximalwert angeben (mit einem Bindestrich dazwischen). Range1-1000 beispielsweise erlaubt eine Zahl zwischen 1 und 1000; Range-50-50 eine Zahl zwischen -50 und 50; und Range-10--5 eine Zahl zwischen -10 und -5. Der Minimal- und Maximalwert können vertauscht werden, um die Schrittrichtung der Pfeile umzukehren. Der größte zulässige Bereich ist -2147483648-2147483647. Wenn das Buddy-Steuerelement eine <a href="#ListBox">ListBox</a> ist, wird der Standardbereich im vertikalen Modus auf 32767-0 und im horizontalen Modus (<a href="#Horz">Horz</a>) auf 0-32767 festgelegt.</p>
<p><strong>Wrap</strong>: Veranlasst das Steuerelement, zum anderen Ende des gültigen Bereichs zu springen, wenn der Benutzer versucht, den Minimal- oder Maximalwert zu überschreiten. Wenn <em>Wrap</em> nicht angegeben ist, stoppt das Steuerelement beim Erreichen des Minimal- oder Maximalwerts.</p>
<p><strong>-16</strong>: Bewirkt, dass ein vertikales UpDown-Steuerelement isoliert bzw. vom Buddy-Steuerelement getrennt wird. Dies bewirkt auch, dass sich das Steuerelement nicht an die Größe des Buddy-Steuerelements anpasst, sondern eine eigene Breite, Höhe und Position haben kann. Ein isoliertes UpDown-Steuerelement speichert intern seine aktuelle Position. Um diese Position abzurufen, können Sie zum Beispiel <a href="../objects/Gui.htm#Submit">Gui.Submit</a> nutzen.</p>
<p id="UpDownSep"><strong>0x80</strong>: Fügen Sie <code>0x80</code> in <em>Optionen</em> ein, um zu verhindern, dass mit einem Tausendertrennzeichen dezimale Ziffern im Buddy-Steuerelement in Dreiergruppen eingeteilt werden. Normalerweise ist dieser Style nicht notwendig, denn man kann den aktuellen Wert auch vom UpDown-Steuerelement selbst abrufen, um einen Wert ohne Tausendertrennzeichen zu erhalten.</p>
<p><strong>Andere Schrittweiten als 1</strong>: In <a href="http://numeric.nerim.net/AutoHotkey/Scripts/UpDown%20-%20Non-unitary%20increments.ahk">diesem Skript</a> zeigt NumEric, wie man die Schrittweite eines UpDown-Steuerelements auf einen anderen Wert als 1 ändert (z. B. 5 oder 0.1).</p>
<p>Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>

<span id="Pic"></span><h2 id="Picture">Picture (oder Pic)</h2>
<p>Beschreibung: Ein Bereich zum Anzeigen eines Bildes (siehe weiter unten, welche Dateitypen unterstützt werden). Der letzte Parameter ist der Dateiname des Bildes. Wenn kein absoluter Pfad angegeben ist, wird das Bild im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Picture", "w300 h-1", "C:\Meine Bilder\Firmenlogo.gif")</pre>
<p>Lassen Sie die Optionen W und/oder H weg, um die tatsächliche Breite und/oder Höhe des Bildes beizubehalten. Ansonsten wird das Bild auf die angegebene Breite und/oder Höhe skaliert (diese Breite und Höhe bestimmen auch, welches Symbol aus einer mit mehreren Symbolen bestückten ICO-Datei geladen werden soll). Geben Sie -1 für eine der Abmessungen und eine positive Zahl für die jeweils andere an, um das Bild unter Beibehaltung des Seitenverhältnisses zu verkleinern oder zu vergrößern. <code>w200 h-1</code> beispielsweise macht das Bild 200 Pixel breit und bewirkt, dass dessen Höhe automatisch gesetzt wird. Wenn das Bild nicht geladen oder dargestellt werden kann (z. B. weil die Datei nicht gefunden wurde), wird das Steuerelement leer gelassen und dessen Breite und Höhe auf 0 gesetzt.</p>
<p>Picture-Steuerelemente unterstützen das <a href="../objects/GuiOnEvent.htm#Click">Click</a>- und <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>-Ereignis, unter derselben <a href="#SS_NOTIFY">Einschränkung</a> wie bei Text-Steuerelementen.</p>
<p>Um ein Bild als Hintergrund für andere Steuerelemente zu nutzen, sollte das Bild normalerweise vor solchen Steuerelementen hinzugefügt werden. Wenn solche Steuerelemente allerdings eingabefähig sind und das Bild den <a href="#SS_NOTIFY">SS_NOTIFY-Style</a> hat (der automatisch via <a href="../objects/GuiOnEvent.htm">OnEvent</a> hinzugefügt wird), muss das Bild nach diesen Steuerelementen erstellt werden und <code>0x4000000</code> (WS_CLIPSIBLINGS) in den <em>Optionen</em> des Picture-Steuerelements eingefügt werden. Mit diesem Trick kann ein Bild auch als Hintergrund für ein <a href="#Tab">Tab</a>- oder <a href="ListView.htm">ListView</a>-Steuerelement festgelegt werden.</p>
<p id="IconSupport"><strong>Symbole, Cursor und animierte Cursor</strong>: Symbole und Cursor können aus folgenden Dateitypen geladen werden: ICO, CUR, ANI, EXE, DLL, CPL, SCR und andere Typen, die Symbolressourcen enthalten. Um anstelle der ersten Symbolgruppe eine andere in der Datei zu nutzen, müssen Sie in <em>Optionen</em> das Wort Icon einfügen und direkt danach die Nummer der Gruppe angeben. Im folgenden Beispiel wird das Standardsymbol aus der zweiten Symbolgruppe geladen: <code>Gui.Add("Picture", "Icon2", "C:\Meine Anwendung.exe")</code>.</p>
<p id="PicAltSubmit">Fügen Sie in <em>Optionen</em> das Wort AltSubmit ein, um zum Laden des Bildes die Microsoft-Datei GDIPlus.dll zu verwenden und dadurch eine alternative Darstellung von GIF-, BMP- und Symbolbildern zu gewährleisten. So kann zum Beispiel eine GIF-Datei mit transparentem Hintergrund als transparente Bitmap geladen werden, die den Effekt von <a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> zulässt (Symbole unterstützen Transparenz ohne AltSubmit). Wenn GDIPlus nicht verfügbar ist (siehe nächsten Absatz), wird AltSubmit ignoriert und das Bild mit der normalen Methode geladen.</p>
<p>Alle Betriebssysteme unterstützen GIF-, JPG-, BMP-, ICO-, CUR- und ANI-Bilder. In Windows XP oder höher werden zusätzliche Bildformate wie PNG, TIF, Exif, WMF und EMF unterstützt. Um Betriebssysteme älter als XP zu unterstützen, kopieren Sie die GDI+-DLL-Datei von Microsoft in den Ordner von AutoHotkey.exe (bei einem <a href="../Scripts.htm#ahk2exe">kompilierten Skript</a> muss die DLL in den Ordner des Skripts kopiert werden). Die DLL finden Sie auf <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie: gdi redistributable</p>
<p><strong>Animierte GIF-Bilder</strong>: Animierte GIF-Dateien werden zwar in einem Picture-Steuerelement angezeigt, aber nicht animiert. Um dieses Problem zu lösen, benötigen Sie die AniGIF-DLL-Datei (die für den nicht-kommerziellen Gebrauch kostenlos zur Verfügung steht). Beispiele dazu finden Sie im <a href="https://autohotkey.com/boards/viewtopic.php?t=6457">AutoHotkey-Forum</a>. Alternativ können Sie dafür auch das <a href="#ActiveX">ActiveX</a>-Steuerelement nutzen. Zum Beispiel:</p>
<pre><em>; Geben Sie unten den Pfad zur GIF-Datei an, die animiert werden soll (lokale Dateien sind auch möglich):</em>
pic := "http://www.animatedgif.net/cartoons/A_5odie_e0.gif"
Gui := GuiCreate()
Gui.Add("ActiveX", "w100 h150", "mshtml:&lt;img src='" pic "' /&gt;")
Gui.Show</pre>
<p>Anstelle eines Dateinamens kann auch ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> verwendet werden. Zum Beispiel <code>"HBITMAP:" handle</code>.</p>

<h2 id="Button">Button</h2>
<p>Beschreibung: Eine Schaltfläche, die gedrückt werden kann, um eine Aktion auszulösen. Geben Sie im letzten Parameter den sichtbaren Namen der Schaltfläche an, der Zeilenumbruchszeichen (`n) zum Starten neuer Zeilen enthalten kann.</p>
<p>Zum Beispiel:</p>
<pre>MeinBtn := Gui.Add("Button", "Default w80", "OK")
MeinBtn.OnEvent("Click", "MeinBtn_Click")  <em>; Ruft MeinBtn_Click beim Anklicken auf.</em>
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_button.png" alt="Button" />
<p>Das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis wird jedes Mal ausgelöst, wenn der Benutzer auf die Schaltfläche klickt oder <kbd>Leer</kbd> oder <kbd>Enter</kbd> drückt, während die Schaltfläche fokussiert ist.</p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen.</p>
<p id="DefaultButton">Das Wort <strong>Default</strong> in den <em>Optionen</em> des Beispiels oben bewirkt, dass "OK" zur Standardschaltfläche gemacht wird. Das <a href="../objects/GuiOnEvent.htm#Click">Click-Ereignis</a> der Standardschaltfläche wird jedes Mal automatisch ausgelöst, wenn der Benutzer <kbd>Enter</kbd> drückt, es sei denn, der Tastaturfokus liegt auf einer anderen Schaltfläche oder einem mehrzeiligen Eingabefeld mit aktiviertem <a href="#WantReturn">WantReturn</a>-Style. Um später eine andere Schaltfläche zur Standardschaltfläche zu machen, können Sie wie folgt vorgehen: <code>Gui.<a href="../objects/Gui.htm#Control">Control</a>["Cancel"].<a href="../objects/GuiControl.htm#Opt">Opt</a>("+Default")</code>. Um das Fenster später so zu ändern, dass es keine Standardschaltfläche hat, benötigen sie folgende Anweisung: <code>Gui.Control["OK"].Opt("-default")</code>.</p>
<p>Sie können ein Und-Zeichen (&amp;) im Namen der Schaltfläche nutzen, um einen der Buchstaben zu unterstreichen. Zum Beispiel:</p>
<pre>Gui.Add("Button",, "&amp;Pause")</pre>
<p>Das Beispiel oben führt dazu, dass der Buchstabe P unterstrichen und das <a href="../objects/Gui.htm#ShortcutKey">Tastenkürzel</a> <kbd>Alt</kbd>+<kbd>P</kbd> aktiviert wird. Um ein Und-Zeichen im Text des Steuerelements darzustellen, sind zwei aufeinanderfolgende Und-Zeichen (&amp;&amp;) erforderlich.</p>

<p>Bekannte Einschränkung: Bestimmte Desktop-Designs können den Text dieses Steuerelements nicht ordnungsgemäß darstellen. Wenn dies der Fall ist, können Sie versuchsweise <code>-Wrap</code> in den Optionen des Steuerelements einfügen. Dadurch wird allerdings auch verhindert, dass das Steuerelement mehr als eine Textzeile enthalten kann.</p>

<h2 id="Checkbox">CheckBox</h2>
<p>Beschreibung: Ein kleines Feld zum Setzen oder Entfernen eines Häkchens, um An/Aus, Ja/Nein etc. darzustellen.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Checkbox", "vSendenAnRechnungsadresse", "An Rechnungsadresse versenden?")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_check.png" alt="CheckBox" />
<p>Der letzte Parameter ist eine Beschriftung, die neben der CheckBox angezeigt wird, um dem Benutzer eine Frage zu stellen oder die Funktion der CheckBox zu beschreiben. Diese Beschriftung kann Zeilenumbruchszeichen (`n) zum Starten neuer Zeilen enthalten. Wenn in <em>Optionen</em> eine Breite (W) angegeben ist, aber keine <a href="../objects/Gui.htm#R">Reihen (R)</a> oder Höhe (H), werden Textzeilen bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt eine 1 zurück, wenn das Häkchen vorhanden ist, eine 0, wenn das Häkchen fehlt, und -1, wenn das Häkchen grau/unbestimmt ist.</p>
<p>Fügen Sie das Wort <strong>Check3</strong> in <em>Optionen</em> ein, um den dritten "unbestimmten" Zustand in Form eines grauen Häkchens oder eines Quadrats zu aktivieren (dieser Zustand zeigt an, dass das Häkchen der CheckBox weder gesetzt ist noch fehlt). Fügen Sie das Wort <strong>Checked</strong> oder <strong>CheckedGray</strong> in <em>Optionen</em> ein, um die CheckBox zu Beginn im abgehakten bzw. unbestimmten Zustand darzustellen. Direkt nach dem Wort Checked kann optional eine 0, 1 oder -1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Checked"</code> das gleiche wie <code>"Checked" VarMitEins</code>.</p>
<p>Jedes Mal, wenn die CheckBox angeklickt wird, wechselt sie auf den nächsten Zustand von ihren insgesamt zwei oder drei Zuständen und löst dann das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis aus, damit das Skript sofort auf die Benutzereingabe reagieren kann.</p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen. Dieser Style wird standardmäßig nicht angewendet, um zu verhindern, dass schnelle Klicks den Zustand des Häkchens ändern (z. B. wenn der Benutzer es doppelt anklickt, um das Häkchen zu setzen und gleich wieder zu entfernen, und dann unbestimmt macht).</p>
<p>Bekannte Einschränkung: Bestimmte Desktop-Designs können den Text dieses Steuerelements nicht ordnungsgemäß darstellen. Wenn dies der Fall ist, können Sie versuchsweise <code>-Wrap</code> in den Optionen des Steuerelements einfügen. Dadurch wird allerdings auch verhindert, dass das Steuerelement mehr als eine Textzeile enthalten kann.</p>

<h2 id="Radio">Radio</h2>
<p>Ein Optionsfeld in Form eines kleinen leeren Kreises, das markiert (An) oder nicht markiert (Aus) sein kann.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Radio", "vMeineRadioGruppe", "Artikel erst versenden, wenn sie auf Lager sind.")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_radio.png" alt="Radio" />
<p>Solche Steuerelemente befinden sich üblicherweise in <em>Radio-Gruppen</em>, die jeweils aus zwei oder mehr Radio-Buttons bestehen. Klickt der Benutzer einen Radio-Button an, um ihn einzuschalten, werden alle anderen Radio-Buttons in der Gruppe automatisch ausgeschaltet (der Benutzer kann zudem mit den Pfeiltasten innerhalb einer Gruppe navigieren). Eine Radio-Gruppe wird automatisch erstellt und umfasst eine Reihe von nacheinander erstellten Radio-Buttons. Um eine neue Gruppe zu beginnen, fügen Sie das Wort <strong>Group</strong> in den <em>Optionen</em> des ersten Radio-Buttons ein -- oder fügen Sie dazwischen einfach ein Steuerelement ein, das kein Radio-Button ist, um automatisch eine neue Gruppe beginnen zu lassen.</p>
<p>Der letzte Parameter ist die Beschriftung auf der rechten Seite des Radio-Buttons. Diese Beschriftung dient üblicherweise dazu, dem Benutzer eine Frage zu stellen oder die Funktion des Radio-Buttons zu beschreiben, und kann Zeilenumbruchszeichen (`n) zum Starten neuer Zeilen enthalten. Wenn in <em>Optionen</em> eine Breite (W) angegeben ist, aber keine Zeilen (R) oder Höhe (H), werden Textzeilen bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>
<p>Fügen Sie das Wort <strong>Checked</strong> in <em>Optionen</em> ein, um den Button zu Beginn im eingeschalteten Zustand darzustellen. Direkt nach dem Wort Checked kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen: 0 für ausgeschaltet und 1 für eingeschaltet. In diesem Fall ist <code>"Checked"</code> das gleiche wie <code>"Checked" VarMitEins</code>.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt 1 zurück, wenn die Markierung vorhanden ist, oder 0, wenn die Markierung fehlt. Um stattdessen die Positionsnummer des eingeschalteten Radio-Buttons innerhalb einer Radio-Gruppe abzurufen, geben Sie einem der Radio-Buttons einen <a href="../objects/GuiControl.htm#Name">Namen</a> und verwenden Sie <a href="../objects/Gui.htm#submit-radio">Gui.Submit</a>.</p>
<p>Das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis wird jedes Mal ausgelöst, wenn der Benutzer einen Button einschaltet. Das Ereignis-Callback muss, im Gegensatz zum Einzelvariablenmodus im vorherigen Abschnitt, für jeden Radio-Button in einer Radio-Gruppe registriert werden, bei dem es aufgerufen werden soll. Dadurch können auf einfache Weise Klicks bestimmter Radio-Buttons ignoriert werden. </p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen.</p>
<p>Bekannte Einschränkung: Bestimmte Desktop-Designs können den Text dieses Steuerelements nicht ordnungsgemäß darstellen. Wenn dies der Fall ist, können Sie versuchsweise <code>-Wrap</code> in den Optionen des Steuerelements einfügen. Dadurch wird allerdings auch verhindert, dass das Steuerelement mehr als eine Textzeile enthalten kann.</p>

<span id="DDL"></span><h2 id="DropDownList">DropDownList (oder DDL)</h2>
<p>Beschreibung: Eine aufklappbare Liste mit Auswahlmöglichkeiten. Geben Sie im letzten Parameter eine Liste in Form von <code>Auswahl1|Auswahl2|Auswahl3</code> oder <code>["Auswahl1", "Auswahl2", "Auswahl3"]</code> an.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("DropDownList", "vFarbauswahl", "Schwarz|Weiß|Rot|Grün|Blau")
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_ddl.png" alt="DDL" />
<p>Fügen Sie zwei Vertikalstriche an, um einen Listeneintrag im Steuerelement vorab auszuwählen (z. B. <code>Rot|Grün||Blau</code>). Alternativ können Sie in <em>Optionen</em> das Wort <strong>Choose</strong> einfügen und direkt danach die Nummer des Elements angeben, das vorab ausgewählt sein soll. <code>Choose5</code> beispielsweise bewirkt, dass der fünfte Listeneintrag vorab ausgewählt wird (wie bei anderen Optionen auch kann hier eine Variable genutzt werden, wie z. B. <code>"Choose" Var</code>). Nachdem das Steuerelement erstellt wurde, kann man mit <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> einen anderen Listeneintrag auswählen, und mit <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a> Listeneinträge hinzufügen oder entfernen.</p>
<p>Fügen Sie das Wort <strong>Uppercase</strong> oder <strong>Lowercase</strong> in <em>Optionen</em> ein, um alle Listeneinträge automatisch in Groß- oder Kleinbuchstaben umzuwandeln. Fügen Sie das Wort <strong>Sort</strong> ein, um die Listeneinträge automatisch in alphabetischer Reihenfolge zu sortieren (das hat auch Einfluss auf Listeneinträge, die nachträglich via <a href="../objects/GuiControl.htm#Add">GuiCtrl.Add</a> hinzugefügt werden). Die Sort-Option ermöglicht zudem eine inkrementelle Suche, wenn die Liste aufgeklappt ist; diese Suche erlaubt die Auswahl eines Listeneintrags durch Eingabe der ersten Zeichen seines Namens.</p>
<p>Nutzen Sie <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a>, um die Positionsnummer des aktuell ausgewählten Listeneintrags abzurufen (der erste Eintrag ist 1, der zweite ist 2 und so weiter), oder 0, wenn keiner ausgewählt ist. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text abgerufen werden.</p>
<p>Jedes Mal, wenn der Benutzer einen neuen Listeneintrag auswählt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>
<p>Verwenden Sie die <a href="../objects/Gui.htm#R">R- oder H-Option</a>, um die Höhe der aufklappbaren Liste zu bestimmen. <code>R5</code> beispielsweise macht die Liste 5 Reihen hoch, während <code>H400</code> die Gesamthöhe des Auswahlfeldes und der Liste auf 400 Pixel setzt. Sind R und H nicht vorhanden, wird die Liste automatisch auf Basis der verfügbaren Höhe des Desktops vergrößert (allerdings werden Betriebssysteme älter als Windows XP die Liste standardmäßig 3 Reihen hoch machen).</p>
<p id="ComboBoxHeight">Das folgende Beispiel zeigt, wie die Höhe des Auswahlfeldes oder die Höhe jedes Listeneintrags mithilfe der <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb775911">CB_SETITEMHEIGHT</a>-Meldung geändert werden kann:</p>
<pre>Gui := GuiCreate()
DDL := Gui.Add("DDL", "vcbx w200", "Eins||Zwei")
<em>; CB_SETITEMHEIGHT = 0x153</em>
PostMessage(0x153, -1, 50, DDL)  <em>; Setzt die Höhe des Auswahlfeldes.</em>
PostMessage(0x153, 0, 50, DDL)  <em>; Setzt die Höhe jedes Listeneintrags.</em>
Gui.Show("h70")</pre>
<p>Das Trennzeichen zwischen den Feldern muss nicht zwingend ein Vertikalstrich sein. Mit <code>Gui.Opt("+<a href="../objects/Gui.htm#Delimiter">Delimiter</a>`n")</code> beispielsweise kann stattdessen ein Zeilenumbruchszeichen als Trennzeichen verwendet werden oder mit <code>Gui.Opt("+DelimiterTab")</code> stattdessen ein Tabulatorzeichen (`t) verwendet werden.</p>

<h2 id="ComboBox">ComboBox</h2>
<p>Beschreibung: Eine aufklappbare Liste mit Auswahlmöglichkeiten und ein Eingabefeld zum Eintragen eines formatlosen Textes.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("ComboBox", "vFarbauswahl", "Rot|Grün|Blau|Schwarz|Weiß")
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_combo.png" alt="ComboBox" />
<p>Zusätzlich zu den DropDownList-Optionen weiter oben kann das Wort <strong>Limit</strong> in <em>Optionen</em> eingefügt werden, um die Benutzereingabe auf die sichtbare Breite des Eingabefeldes der ComboBox zu beschränken. Zudem kann das Wort <strong>Simple</strong> eingefügt werden, um die aufklappbare Liste der ComboBox als ListBox unterhalb des Eingabefeldes darzustellen.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Positionsnummer des aktuell ausgewählten Listeneintrags zurück (der erste Eintrag ist 1, der zweite ist 2 und so weiter), oder 0, wenn der im Steuerelement enthaltene Text mit keinem Listeneintrag übereinstimmt. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Inhalt des Eingabefeldes der ComboBox abgerufen werden. <a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert den Text. Wenn allerdings das Wort <strong>AltSubmit</strong> in den <em>Optionen</em> des Steuerelements vorhanden ist stimmt der Text mit einem Listeneintrag überein, wird stattdessen die Positionsnummer des Listeneintrags gespeichert.</p>
<p>Jedes Mal, wenn der Benutzer einen neuen Listeneintrag auswählt oder den Text des Steuerelements ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>

<h2 id="ListBox">ListBox</h2>
<p>Beschreibung: Ein Listenfeld mit Auswahlmöglichkeiten. Geben Sie im letzten Parameter eine Liste in Form von <code>Auswahl1|Auswahl2|Auswahl3</code> oder <code>["Auswahl1", "Auswahl2", "Auswahl3"]</code> an.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("ListBox", "r5 vFarbwahl", "Rot|Grün|Blau|Schwarz|Weiß")
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_list.png" alt="ListBox" />
<p id="ChooseLB">Fügen Sie jeweils zwei Vertikalstriche an, um einen oder mehrere Listeneinträge vorab auszuwählen (zum Auswählen mehrere Listeneinträge ist die <a href="#ListBoxMulti">Multi</a>-Option notwendig). Alternativ können Sie in <em>Optionen</em> das Wort <strong>Choose</strong> einfügen und direkt danach die Nummer des Listeneintrags angeben, das vorab ausgewählt sein soll. <code>Choose5</code> beispielsweise bewirkt, dass der fünfte Listeneintrag vorab ausgewählt wird. Nachdem das Steuerelement erstellt wurde, kann man mit <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> einen anderen Listeneintrag auswählen, und mit <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a> Listeneinträge hinzufügen oder entfernen.</p>
<p>Wenn die <a href="#ListBoxMulti">Multi</a>-Option fehlt, gibt <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> die Positionsnummer des aktuell ausgewählten Listeneintrags zurück (der erste Eintrag ist 1, der zweite ist 2 und so weiter), oder 0, wenn keiner ausgewählt ist. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text des ausgewählten Listeneintrags abgerufen werden. Wenn das Wort <a href="#ListBoxMulti">Multi</a> in den Optionen vorhanden ist, wird <a href="../objects/GuiControl.htm#Value">Value</a> und <a href="../objects/GuiControl.htm#Text">Text</a> nicht einen einzelnen Listeneintrag, sondern ein Array mit Listeneinträgen zurückgeben.</p>
<p><a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert standardmäßig den <a href="../objects/GuiControl.htm#Text">Text</a> des Steuerelements. Wenn aber das Wort <strong>AltSubmit</strong> in dessen <em>Optionen</em> vorhanden ist, speichert es stattdessen den <a href="../objects/GuiControl.htm#Value">Wert</a> des Steuerelements.</p>
<p>Jedes Mal, wenn der Benutzer einen oder mehrere Listeneinträge aus- oder abwählt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>
<p id="LBRedraw">Um das Hinzufügen sehr vieler Listeneinträge performanter zu machen, können Sie vor der Operation <code>MeineListBox.Opt("-Redraw")</code> und nach der Operation <code>MeineListBox.Opt("+Redraw")</code> verwenden.</p>

<h3>ListBox-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseLB">oben</a>.</p>
<p id="ListBoxMulti"><strong>Multi</strong>: Erlaubt das Auswählen mehrerer Listeneinträge mit UMSCHALT oder STRG modifizierten Klicks (um eine Mehrfachauswahl ohne diesen Modifikatoren zu ermöglichen, müssen Sie stattdessen die <a href="../misc/Styles.htm#LBS_MULTIPLESEL">Nummer 8</a> angeben). In diesem Fall gibt <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> ein Array mit Positionsnummern der ausgewählten Listeneinträge zurück. <code>[1, 2, 3]</code> beispielsweise bedeutet, dass die ersten drei Listeneinträge ausgewählt sind. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen ein Array mit Namen der ausgewählten Listeneinträge abgerufen werden. um einzelne Listeneinträge aus dem Array zu extrahieren, können Sie <code>MeineListBox.Text[1]</code> (1 ist der erste Listeneintrag) oder wie folgt eine <a href="For.htm">For-Schleife</a> verwenden:</p>
<pre>For Index, Feld in MeineListBox.Text
{
    MsgBox "Auswahl Nr. " Index " ist " Feld
}</pre>
<p><strong>ReadOnly</strong>: Verhindert, dass Listeneinträge beim Auswählen farblich hervorgehoben werden (<a href="../objects/Gui.htm#Submit">Gui.Submit</a>, <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> oder <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> geben aber weiterhin die ausgewählten Listeneinträge zurück).</p>
<p><strong>Sort</strong>: Sortiert die Listeneinträge automatisch in alphabetischer Reihenfolge (das hat auch Einfluss auf Listeneinträge, die nachträglich via <a href="../objects/GuiControl.htm#Add">GuiCtrl.Add</a> hinzugefügt werden). Die Sort-Option ermöglicht zudem eine inkrementelle Suche, mit der ein Listeneintrag durch Eingabe der ersten Zeichen seines Namens ausgewählt werden kann.</p>
<p><strong>Tn</strong>: Mit dem Buchstaben T können Tabstopps gesetzt werden, um den Text in Spalten aufzuteilen. Wenn der Buchstabe T nicht verwendet wird, werden Tabstopps auf je 32 Dialogeinheiten gesetzt (die Breite jeder "Dialogeinheit" ist systemintern festgelegt). Wenn der Buchstabe T nur einmal verwendet wird, werden Tabstopps auf je <strong>n</strong> Dialogeinheiten innerhalb der verfügbaren Breite des Steuerelements gesetzt. <code>Gui.Add("ListBox", "vMeineListBox t64")</code> beispielsweise verdoppelt den Standardabstand zwischen den Tabstopps. Geben Sie den Buchstaben T mehrmals wie folgt an, um benutzerdefinierte Tabstopps zu setzen: <code>Gui.Add("ListBox", "vMeineListBox t8 t16 t32 t64 t128")</code>. Für jede absolute Spaltenposition in der Liste wird ein Tabstopp gesetzt, bis zu einem Maximum von 50 Tabstopps.</p>
<p><strong>0x100</strong>: Fügen Sie 0x100 in Optionen ein, um den LBS_NOINTEGRALHEIGHT-Style einzuschalten. Dieser Style bewirkt, dass die ListBox in der angegebenen Höhe sein muss. Wenn dieser Style nicht verwendet wird, wird die Höhe entsprechend angepasst, damit die Reihe am Listenende vollständig zu sehen ist. Dieser Style verhindert zudem, dass die ListBox automatisch nach Ändern der Schrift kleiner gemacht wird.</p>
<p>Optionen zum Ändern der Anzahl von Textzeilen (oder der Höhe und Breite) finden Sie unter <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>

<h2>ListView und TreeView</h2>
<p>Mehr dazu finden Sie auf den separaten Seiten <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>.</p>

<h2 id="Link">Link</h2>
<p>Beschreibung: Ein Text-Steuerelement, das ähnlich wie ein Web-Browser anklickbare Links enthalten kann. Umschließen Sie einen beliebigen Bereich im Text des Steuerelements mit <code>&lt;A&gt;</code> und <code>&lt;/A&gt;</code>, um einen anklickbaren Link zu erzeugen. Obwohl diese Schreibweise wie HTML aussieht, unterstützen Link-Steuerelemente nur den Start-Tag <code>&lt;A&gt;</code> (optional mit einem ID- und/oder HREF-Attribut) und den End-Tag <code>&lt;/A&gt;</code>.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Link",, 'Das ist ein &lt;a href="https://autohotkey.com"&gt;Link&lt;/a&gt;')
Gui.Add("Link",, 'Links können überall im Text angegeben werden, wie &lt;a id="A"&gt;hier&lt;/a&gt; oder &lt;a id="B"&gt;dort&lt;/a&gt;')</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_link.png" alt="Link" />

<p>Jedes Mal, wenn der Benutzer einen Link anklickt, wird das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis ausgelöst. Wenn das Steuerelement kein Click-Callback hat (das mit <a href="../objects/GuiOnEvent.htm">OnEvent</a> registriert wurde), wird der Wert des HREF-Attributs des Links automatisch über die <a href="Run.htm">Run</a>-Funktion ausgeführt.</p>
<pre>Gui := GuiCreate()
Link := Gui.Add("Link",
    , 'Klicken Sie folgende Links, um &lt;a href="notepad" id="notepad"&gt;Notepad&lt;/a&gt; auszuführen oder die '
    . '&lt;a id="help" href="https://autohotkey.com/docs/"&gt;Online-Hilfe&lt;/a&gt; zu öffnen.')
Link.OnEvent("Click", "Link_Click")
Link_Click(Ctrl, ID, HREF)
{
    if MsgBox("ID: " ID "`nHREF: " HREF "`n`nSoll dieser Link ausgeführt werden?",, "y/n") = "yes"
        Run(HREF)
}
Gui.Show()</pre>

<h2 id="Hotkey">Hotkey</h2>
<p>Beschreibung: Ein Eingabefeld, das dem Benutzer ermöglicht, eine Tastenkombination zu bestimmen, die als Hotkey verwendet werden soll. Drückt der Benutzer beispielsweise <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd> auf der deutschen Tastatur, würde dies dazu führen, dass "STRG + ALT + C" im Eingabefeld angezeigt wird.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Hotkey", "vGewählterHotkey")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_hotkey.png" alt="Hotkey" />
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Modifikatoren und den Namen des Hotkeys zurück, die kompatibel mit der <a href="Hotkey.htm">Hotkey</a>-Funktion sind. Beispiele: <code>^!C</code>, <code>+!Home</code>, <code>+^Down</code>, <code>^Numpad1</code>, <code>!NumpadEnd</code>. Wenn kein Hotkey im Steuerelement vorhanden ist, ist der Wert leer.</p>
<p class="note"><strong>Hinweis</strong>: Einige Tasten zeigen dasselbe an, obwohl sie als verschiedene Namen abgerufen werden. Zum Beispiel wird sowohl <code>^Numpad7</code> als auch <code>^NumpadHome</code> als "STRG + 7 (ZEHNERTASTATUR)" erkannt.</p>
<p>Standardmäßig ist das Steuerelement zu Beginn leer. Um das zu ändern, können Sie im letzten Parameter eine Tastenkombination in Form von Modifikatorsymbolen und einem Tastennamen angeben; zum Beispiel: <code>Gui.Add("Hotkey", "vGewählterHotkey", "^!p")</code><br>
Die einzigen unterstützten Modifikatoren sind ^ (STRG), ! (ALT) und + (UMSCHALT). Weitere verfügbare Tastennamen finden Sie in der <a href="../KeyList.htm">Tastenliste</a>.</p>
<p>Jedes Mal, wenn der Benutzer den Inhalt des Steuerelements ändert (durch Drücken einer Taste), wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<p class="note"><strong>Hinweis</strong>: Das Ereignis wird auch dann ausgelöst, wenn ein unvollständiger Hotkey vorhanden ist. Wenn der Benutzer beispielsweise die <kbd>Strg</kbd>-Taste gedrückt hält, wird das Ereignis ausgelöst und <a href="../objects/GuiControl.htm#Value">Value</a> nur ein Zirkumflex (^) zurückgeben. Beendet der Benutzer dann die Tastenkombination, wird das Ereignis nochmals ausgelöst und <a href="../objects/GuiControl.htm#Value">Value</a> den vollständigen Hotkey zurückgeben.</p>
<p>Um die Benutzereingabe auf bestimmte Hotkeys zu beschränken, fügt man das Wort <strong>Limit</strong> ein, gefolgt von einer Zahl, die die Summe folgender Zahlen ist:</p>
<p>1: Ignoriert Tasten ohne Modifikatoren<br>
  2: Ignoriert nur via <kbd>Umschalt</kbd> modifizierte Tasten <br>
4: Ignoriert nur via <kbd>Strg</kbd> modifizierte Tasten <br>
8: Ignoriert nur via <kbd>Alt</kbd> modifizierte Tasten<br>
16: Ignoriert via <kbd>Umschalt</kbd>+<kbd>Strg</kbd> modifizierte Tasten <br>
32: Ignoriert via <kbd>Umschalt</kbd>+<kbd>Alt</kbd> modifizierte Tasten <br>
64: Dieser Wert wird nicht unterstützt (verhält sich falsch)<br>
128: Ignoriert via <kbd>Umschalt</kbd>+<kbd>Strg</kbd>+<kbd>Alt</kbd> modifizierte Tasten</p>
<p>Zum Beispiel würde <code>Limit1</code> verhindern, dass Hotkeys ohne Modifikatoren wie Buchstaben und Zahlen eingegeben werden können, und <code>Limit15</code> würde mindestens zwei Modifikatortasten benötigen. Gibt der Benutzer eine verbotene Modifikator-Kombination ein, wird die <kbd>Strg</kbd>+<kbd>Alt</kbd>-Kombination automatisch und sichtbar ersetzt.</p>
<p>Das Hotkey-Steuerelement hat nur begrenzte Möglichkeiten. Zum Beispiel unterstützt es keine Maus/Joystick-Hotkeys oder <kbd>Win</kbd>-Tasten (LWin und RWin). Dieses Problem kann beispielsweise umgangen werden, wenn dem Benutzer eine oder mehrere <a href="#Checkbox">CheckBoxen</a> bereitgestellt werden, die zusätzliche Modifikatoren wie die <kbd>Win</kbd>-Taste als Auswahlmöglichkeit anbieten.</p>

<h2 id="DateTime">DateTime</h2>
<p>Beschreibung: Ein Feld, das zwar wie ein einzeiliges Edit-Steuerelement aussieht, aber stattdessen nur die Eingabe eines Datums und/oder einer Uhrzeit akzeptiert. Ein ausklappbarer Kalender ist ebenfalls vorhanden.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("DateTime", "vMeinDateTime", "LongDate")
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_datetime.png" alt="DateTime" />
<p>Der letzte Parameter ist eine formatierte Zeichenkette, wie unten beschrieben.</p>
<div class="methodShort" id="DateTimeFormat">
<h3>SetFormat</h3>
<p>Setzt das Anzeigeformat eines DateTime-Steuerelements.</p>
<pre class="Syntax">DateTime.<span class="func">SetFormat</span>(<span class="optional">Format</span>)</pre>
<dl><dt>Format</dt><dd>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Dies kann folgendes sein:</p>
<p><strong>ShortDate</strong> (oder Parameter leer-/weglassen): Verwendet das kurze Datumsformat, abhängig vom aktuellen Gebietsschema des Benutzers. Bei einigen Gebietsschemen könnte das wie folgt aussehen: 17.04.2011.</p>
<p><strong>LongDate</strong>: Verwendet das lange Datumsformat, abhängig vom aktuellen Gebietsschema des Benutzers. Bei einigen Gebietsschemen könnte das wie folgt aussehen: Sonntag, 17. April 2011.</p>
<p><strong>Time</strong>: Zeigt nur die Zeit an, abhängig vom aktuellen Gebietsschema des Benutzers. Obwohl das Datum nicht angezeigt wird, ist es dennoch im Steuerelement vorhanden und wird zusammen mit der Zeit im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format abgerufen.</p>
<p><strong>(benutzerdefiniertes Format)</strong>: Geben Sie eine beliebige Kombination von <a href="FormatTime.htm">Datum- und Zeitformaten</a> an. Zum Beispiel würde <code>"d.M.yy HH:mm"</code> wie 17.4.11 12:19 aussehen. Ebenso würde <code>"dddd MMMM d, yyyy hh:mm:ss"</code> wie Sonntag April 17, 2011 12:22:1 aussehen. Buchstaben und Zahlen, die direkt geschrieben sein sollen, müssen wie folgt in Hochkommas gesetzt werden: <code>"'Datum:' dd.MM.yy 'Zeit:' hh:mm:ss tt"</code>. Zeichen, die nicht alphanumerisch sind, wie Leerzeichen, Tabulatoren, Schrägstriche, Doppelpunkte, Kommas und andere Satzzeichen, müssen hingegen nicht von Hochkommas umschlossen werden. Die Ausnahme ist das Hochkomma selbst: Um dieses Zeichen direkt zu schreiben, nutzt man vier aufeinanderfolgende Hochkommas (''''). Wenn das Hochkomma bereits von einem Hochkomma-Paar umschlossen ist, sind nur zwei aufeinanderfolgende Hochkommas ('') notwendig.</p>
</dd></dl>
</div>

<h3>DateTime-Verwendung</h3>
<p id="ChooseDT">Damit ein anderes Datum als das Heutige vorab ausgewählt ist, gibt man in den <em>Optionen</em> das Wort <strong>Choose</strong> an und fügt direkt danach ein Datum im YYYYMMDD-Format ein. Zum Beispiel würde <code>Choose20110417</code> den 17. April 2011 vorab auswählen (wie bei den anderen Optionen auch, kann das eine Variable sein, wie z. B. <code>"Choose" Var</code>). Geben Sie <strong>ChooseNone</strong> an, um das Steuerelement anzuzeigen, ohne dass ein Datum oder eine Uhrzeit vorab ausgewählt ist. Zudem erstellt <em>ChooseNone</em> innerhalb des Steuerelements eine CheckBox, deren Häkchen standardmäßig nicht gesetzt ist, wenn kein Datum im Steuerelement ausgewählt ist. Wenn kein Datum im Steuerelement ausgewählt ist, wird <a href="../objects/Gui.htm#Submit">Gui.Submit</a> und <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> einen leeren Wert (leere Zeichenkette) abrufen.</p>
<p>Die Tageszeit kann optional auch vorhanden sein. Allerdings muss sich davor immer ein Datum befinden, wenn es im Steuerelement gesetzt oder abgerufen wird. Das Format des Zeitbereichs ist HH24MISS (Stunden, Minuten, Sekunden), bei dem HH24 im 24-Stunden-Format angegeben wird. Somit würde eine vollständige Datum-Zeit-Zeichenkette das Format <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> aufweisen.</p>
<p>Bei Datumsangaben im YYYYMMDDHH24MISS-Format muss nur der führende Teil vorhanden sein. Alle übrigen Elemente, die ausgelassen worden sind, werden mit folgenden Standardwerten ersetzt:<br>
MM: Monat 01<br>
DD: Tag 01<br>
HH24: Stunde 00<br>

MI: Minute 00<br>
SS: Sekunde 00</p>
<p>Innerhalb des ausklappbaren Kalenders kann man den Heute-Text am unteren Ende anklicken, um das heutige Datum auswählen zu können. Darüber hinaus sind das Jahr und der Monatsname anklickbar, das eine einfache Navigation zwischen den Monaten oder Jahren ermöglicht.</p>
<p>Navigation mit der Tastatur: Mit den Pfeiltasten <kbd>↑</kbd>/<kbd>↓</kbd>, den Ziffernblocktasten <kbd>+</kbd>/<kbd>-</kbd> und <kbd>Pos1</kbd>/<kbd>Ende</kbd> können die Werte im Steuerelement erhöht oder verringert werden. Verwenden Sie <kbd>←</kbd> und <kbd>→</kbd>, um von Feld zu Feld zu schalten. Innerhalb des ausklappbaren Kalenders können die Pfeiltasten verwendet werden, um von Tag zu Tag zu navigieren; <kbd>Bild↑</kbd>/<kbd>Bild↓</kbd>, um ein Monat vor-/zurückzuschalten; <kbd>Strg</kbd>+<kbd>Bild↑</kbd>/<kbd>Bild↓</kbd>, um ein Jahr vor-/zurückzuschalten; und <kbd>Pos1</kbd>/<kbd>Ende</kbd>, um den ersten/letzten Tag des Monats auszuwählen.</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> verwendet, ist der Rückgabewert das ausgewählte Datum/Uhrzeit im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Sowohl das Datum als auch die Zeit sind vorhanden, egal ob sie tatsächlich im Steuerelement sichtbar sind oder nicht.</p>
<p>Jedes Mal, wenn der Benutzer das Datum oder die Uhrzeit ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>

<h3>DateTime-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseDT">oben</a>.</p>
<p><strong>Range</strong>: Beschränkt die Datumsauswahl auf einem bestimmten Zeitraum. Nach dem Wort Range kann das minimale und maximale Datum im YYYYMMDD-Format angegeben werden (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range20050101-20050615</code> das Datum auf die ersten 5,5 Monate des Jahres 2005 beschränken. Man kann entweder den Minimal- oder Maximalwert weglassen, um das Steuerelement uneingeschränkt in dieser Richtung navigieren zu können. Zum Beispiel würde <code>Range20010101</code> verhindern, dass ein Tag vor 2001 ausgewählt werden kann, und <code>Range-20091231</code> (Bindestrich davor) würde verhindern, dass ein Tag nach 2009 ausgewählt werden kann. Ist diese Option nicht vorhanden, kann jedes Datum zwischen den Jahren 1601 und 9999 ausgewählt werden. Die Tageszeit kann nicht eingeschränkt werden.</p>
<p><strong>Right</strong>: Bewirkt, dass der Kalender auf der rechten statt linken Seite des Steuerelements aufgeklappt wird.</p>
<p><strong>1</strong>: Fügen Sie eine 1 in den <em>Optionen</em> ein, um die rechts befindliche Schaltfläche des aufklappbaren Monatskalenders mit einem UpDown-Steuerelement zum Ändern von Datum-Zeit-Werten zu ersetzen. Funktioniert nicht in Verbindung mit LongDate.</p>
<p id="ChooseNone"><strong>2</strong>: Fügen Sie eine 2 in <em>Optionen</em> ein, um im Steuerelement eine CheckBox bereitzustellen, die der Benutzer verwenden kann, um kein Datum oder keine Uhrzeit anzugeben. Diese Option kann nach Erstellen des Steuerelements nicht mehr geändert werden.</p>

<h2 id="MonthCal">MonthCal</h2>
<p>Beschreibung: Ein hohes und breites Steuerelement, das alle Tage des Monats im Kalenderformat anzeigt. Der Benutzer kann ein einzelnes Datum oder einen Datumsbereich auswählen.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("MonthCal", "vMeinKalender")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_monthcal.png" alt="MonthCal" />
<p>Damit ein anderes Datum als das Heutige vorab ausgewählt ist, fügt man im dritten Parameter ein Datum im YYYYMMDD-Format ein (z. B. <code>20050531</code>). Fügt man ein Bindestrich zwischen zwei Datumswerten ein, kann auch ein Datumsbereich vorab ausgewählt werden (z. B. <code>"20050525-20050531"</code>).</p>
<p>Es ist normalerweise am besten, bei MonthCal die Breite (W) und Höhe (H) wegzulassen, weil es seine Größe automatisch ändert, sodass genau ein Monat reinpasst. Um mehr als einen Monat vertikal darzustellen, fügt man <code>R2</code> oder höher in den <em>Optionen</em> ein. Um mehr als einen Monat horizontal darzustellen, fügt man <code>W-2</code> (W minus 2) oder höher ein. Diese Optionen können gleichzeitig vorhanden sein, um das Steuerelement in beide Richtungen zu erweitern.</p>
<p>Am unteren Ende des Steuerelements kann der Heute-Text angeklickt werden, um das heutige Datum auswählen zu können. Darüber hinaus sind das Jahr und der Monatsname anklickbar, das eine einfache Navigation zwischen den Monaten oder Jahren ermöglicht.</p>
<p>Im Gegensatz zum ausklappbaren Kalender von <a href="#DateTime">DateTime</a> wird die Tastaturnavigation in MonthCal generell nicht unterstützt.</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> verwendet, ist der Rückgabewert das ausgewählte Datum im YYYYMMDD-Format (ohne die Uhrzeit). Ist dagegen die <a href="#MonthCalMulti">Mehrfachauswahl</a>-Option vorhanden, wird das minimale und maximale Datum mit einem Bindestrich dazwischen abgerufen (z. B. <code>20050101-20050108</code>). Wenn in einem Mehrfachauswahl-Kalender nur ein einziges Datum ausgewählt wird, sind beide Grenzwerte noch vorhanden, aber identisch. Mit <a href="StrSplit.htm">StrSplit</a> können die Datumswerte auseinander genommen werden. Zum Beispiel würde die folgende Anweisung das minimale Datum in Datum[1] und das maximale Datum in Datum[2] speichern: <code>Datum := StrSplit(MeinMonthCal.Value, "-")</code>.</p>
<p>Das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis wird ausgelöst, wenn: 1) der Benutzer die Auswahl ändert; oder 2) nur alle zwei Minuten, falls ein neuer Tag gekommen ist (dieses Verhalten ist eine Macke des Betriebssystems).</p>
<p>Werden die Datumwerte im YYYYMMDD-Format angegeben, können die Bereiche MM und/oder DD weggelassen werden - in diesem Fall werden sie als 1 angesehen. Zum Beispiel wäre <code>200205</code> dann 20020501, und <code>2005</code> dann 20050101.</p>

<h3>MonthCal-Optionen</h3>
<p id="MonthCalMulti"><strong>Multi</strong>: Mehrfachauswahl. Ermöglicht dem Benutzer, mit UMSCHALT+KLICK oder durch Ziehen des Mauszeigers angrenzende Datumswerte zu markieren (der Benutzer kann weiterhin ein einzelnes Datum auswählen). Diese Option kann entweder explizit angegeben werden oder wird automatisch wirksam, wenn ein Auswahlbereich beim Erstellen des Steuerelements angegeben wird. Zum Beispiel: <code>Gui.Add("MonthCal", "vMeinKalender", "20050101-20050108")</code>. Diese Option kann nach Erstellen des Steuerelements nicht mehr geändert werden.</p>
<p><strong>Range</strong>: Beschränkt die Datumsauswahl auf einem bestimmten Zeitraum. Nach dem Wort Range kann das minimale und maximale Datum im YYYYMMDD-Format angegeben werden (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range20050101-20050615</code> die Auswahl auf die ersten 5,5 Monate des Jahres 2005 beschränken. Man kann entweder den Minimal- oder Maximalwert weglassen, um das Steuerelement uneingeschränkt in dieser Richtung navigieren zu können. Zum Beispiel würde <code>Range20010101</code> verhindern, dass ein Tag vor 2001 ausgewählt werden kann, und <code>Range-20091231</code> (Bindestrich davor) würde verhindern, dass ein Tag nach 2009 ausgewählt werden kann. Ist diese Option nicht vorhanden, kann jedes Datum zwischen den Jahren 1601 und 9999 ausgewählt werden.</p>
<p><strong>4</strong>: Fügen Sie eine 4 in den <em>Optionen</em> ein, um die Wochennummern (1-52) auf der linken Seite jeder Tagesreihe anzuzeigen. Woche 1 ist als erste Woche definiert, die mindestens vier Tage enthält.</p>
<p><strong>8</strong>: Fügen Sie eine 8 in <em>Optionen</em> ein, um das Hervorheben des heutigen Datums im Steuerelement zu verhindern.</p>
<p><strong>16</strong>: Fügen Sie eine 16 in <em>Optionen</em> ein, um das Anzeigen des heutigen Datums im unteren Bereich des Steuerelements zu verhindern.</p>

<h2 id="Slider">Slider</h2>
<p>Beschreibung: Ein Schieberegler, den der Benutzer entlang einer vertikalen oder horizontalen Linie schieben kann. Zum Beispiel ist die Standard-Lautstärkeregelung in der Taskleiste ein Schieberegler.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Slider", "vMeinSlider", 50)</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_slider.png" alt="Slider" />
<p>Geben Sie im letzten Parameter die Startposition des Schiebereglers an. Wenn der letzte Parameter fehlt oder leer ist, beginnt der Schieberegler bei 0 oder beim niedrigsten zulässigen Bereichswert.</p>
<p>Der Benutzer kann den Regler wie folgt verschieben: 1) Mit dem Mauszeiger ziehen; 2) Auf den Linienbereich klicken; 3) Das Mausrad drehen, während das Steuerelement den Fokus hat; 4) Folgende Tasten drücken, während das Steuerelement den Fokus hat: <kbd>↑</kbd>, <kbd>→</kbd>, <kbd>↓</kbd>, <kbd>←</kbd>, <kbd>Bild↑</kbd>, <kbd>Bild↓</kbd>, <kbd>Pos1</kbd> und <kbd>Ende</kbd>.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> und <a href="../objects/Gui.htm#Submit">Gui.Submit</a> ermitteln oder speichern die numerische Position des Schiebereglers.</p>

<h3 id="slider-change">Erkennen von Änderungen</h3>
<p>Standardmäßig wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis des Schiebereglers ausgelöst, wenn der Benutzer aufhört, den Regler zu bewegen (z. B. durch Loslassen der Maustaste nach dem Ziehen). Wenn das Wort <strong>AltSubmit</strong> in den Optionen des Steuerelements vorhanden ist, wird das Change-Ereignis zusätzlich jedes Mal ausgelöst (sehr häufig), wenn der Regler via Mauszeiger sichtbar verschoben wird.</p>
<pre class="Syntax">Ctrl_<span class="func">Change</span>(GuiCtrlObj, Info)</pre>
<dl>
  <dt>Info</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein numerischer Wert aus der unteren Tabelle, der kennzeichnet, wie der Schieberegler verschoben wurde. Diese Werte und die entsprechenden Namen sind im Windows SDK definiert.</p>
  </dd>
</dl>
<table class="info">
  <tr><th>Wert</th><th>Name</th><th>Bedeutung</th></tr>
  <tr><td>0</td><td>TB_LINEUP</td><td>Der Benutzer hat <kbd>←</kbd> oder <kbd>↑</kbd> gedrückt.</td></tr>
  <tr><td>1</td><td>TB_LINEDOWN</td><td>Der Benutzer hat <kbd>→</kbd> oder <kbd>↓</kbd> gedrückt.</td></tr>
  <tr><td>2</td><td>TB_PAGEUP</td><td>Der Benutzer hat <kbd>Bild↑</kbd> gedrückt.</td></tr>
  <tr><td>3</td><td>TB_PAGEDOWN</td><td>Der Benutzer hat <kbd>Bild↓</kbd> gedrückt.</td></tr>
  <tr><td>4</td><td>TB_THUMBPOSITION</td><td>Der Benutzer hat den Slider mit dem Mausrad oder durch Ziehen und Ablegen verschoben.</td></tr>
  <tr><td>6</td><td>TB_TOP</td><td>Der Benutzer hat die <kbd>Pos1</kbd>-Taste gedrückt, um den Slider ganz nach links oder nach oben zu verschieben. </td></tr>
  <tr><td>7</td><td>TB_BOTTOM</td><td>Der Benutzer hat die <kbd>Ende</kbd>-Taste gedrückt, um den Slider ganz nach rechts oder nach unten zu verschieben. </td></tr>
  <tr><td colspan="3"><strong>Nur wenn die AltSubmit-Option vorhanden ist:</strong></td></tr>
  <tr><td>5</td><td>TB_THUMBTRACK</td><td>Der Benutzer zieht den Slider momentan mit dem Mauszeiger. Das heißt, dass die Maustaste zurzeit gedrückt wird.</td></tr>
  <tr><td>8</td><td>TB_ENDTRACK</td><td>Der Benutzer hat aufgehört, den Slider mit der Maus oder Tastatur zu verschieben. Hinweis: Mit Ausnahme der Mausradbewegung (TB_THUMBPOSITION), wird das Change-Ereignis nochmals bei TB_ENDTRACK ausgelöst, auch wenn es bereits durch einen der oben genannten Meldungscodes ausgelöst wurde.</td></tr>
</table>

<h3>Slider-Optionen</h3>
<p><strong>Buddy1</strong> und <strong>Buddy2</strong>: Bestimmt bis zu zwei vorhandene Steuerelemente, die automatisch an beiden Enden des Sliders positioniert werden sollen. Buddy1 wird auf der linken oder oberen Seite angezeigt (abhängig davon, ob die Option Vertical vorhanden ist). Buddy2 wird auf der rechten oder unteren Seite angezeigt. Nach dem Wort Buddy1 oder Buddy2 kann der <a href="../objects/GuiControl.htm#Name">Name</a> oder <a href="../objects/GuiControl.htm#Hwnd">HWND</a> eines vorhandenen Steuerelements angegeben werden. <code>Buddy1MeinObertext</code> würde beispielsweise das Steuerelement mit dem Namen MeinObertext zuweisen. Den Text oder das ClassNN eines Steuerelements kann man auch benutzen, allerdings nur bis zum ersten Leer- oder Tabulatorzeichen.</p>
<p><strong>Center</strong>: Der Einstellknopf (die Leiste, die vom Benutzer verschoben werden kann) ist an beiden Enden stumpf, anstatt an einem Ende spitz zu sein.</p>
<p><strong>Invert</strong>: Kehrt das Steuerelement um, sodass sich der niedrigere Wert rechts/unten befindet, anstatt links/oben. Das wird typischerweise dazu verwendet, einen vertikalen Slider in einen traditionellen Lautstärkeregler umzuwandeln. Hinweis: Die unten beschriebene ToolTip-Option berücksichtigt nicht die Umkehrung und sollte in diesem Fall daher nicht verwendet werden.</p>
<p><strong>Left</strong>: Der Einstellknopf (die Leiste, die vom Benutzer verschoben werden kann) zeigt nach oben, anstatt nach unten. Wenn dagegen die Vertical-Option vorhanden ist, zeigt der Einstellknopf nach links, anstatt nach rechts.</p>
<p><strong>Line</strong>: Bestimmt die Anzahl an Positionen, die verschoben werden sollen, wenn der Benutzer eine der Pfeiltasten drückt. Nach dem Wort Line erfolgt die Anzahl der zu verschiebenden Positionen. Zum Beispiel: <code>Line2</code>.</p>
<p><strong>NoTicks</strong>: Entfernt die Teilstriche entlang der Linie.</p>
<p><strong>Page</strong>: Bestimmt die Anzahl an Positionen, die verschoben werden sollen, wenn der Benutzer <kbd>Bild↑</kbd> oder <kbd>Bild↓</kbd> drückt. Nach dem Wort Page erfolgt die Anzahl der zu verschiebenden Positionen. Zum Beispiel: <code>Page10</code>.</p>
<p><strong>Range</strong>: Setzt den Bereich auf etwas anderes als 0 bis 100. Nach dem Wort Range können Sie den Minimal- und Maximalwert angeben (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range1-1000</code> eine auswählbare Zahl zwischen 1 und 1000 ermöglichen; <code>Range-50-50</code> eine Zahl zwischen -50 und 50; und <code>Range-10--5</code> eine Zahl zwischen -10 und -5.</p>
<p><strong>Thick</strong>: Bestimmt die Länge des Einstellknopfs (die Leiste, die vom Benutzer verschoben werden kann). Nach dem Wort Thick erfolgt die Dicke in Pixel (z. B. <code>Thick30</code>). Um in Windows XP oder höher eine bestimmte Dicke zu überschreiten, ist es wahrscheinlich notwendig, entweder die Center-Option anzugeben oder das Design des Steuerelements zu entfernen (dazu muss <code>-Theme</code> in den Optionen des Steuerelements angegeben werden).</p>
<p><strong>TickInterval</strong>: Zeigt in regelmäßigen Abständen Teilstriche entlang der Linie an. Geben Sie nach dem Wort TickInterval das Intervall an, wie oft die Teilstriche angezeigt werden sollen (wenn das Intervall weggelassen wird, gilt standardmäßig 1). Je kleiner das Intervall, desto mehr Teilstriche werden gesetzt. <code>TickInterval10</code> beispielsweise zeigt einen  Teilstrich an je 10 Positionen an.</p>
<p><strong>ToolTip</strong>: Erstellt ein Tooltip, das die numerische Position des Sliders anzeigen soll, während er vom Benutzer verschoben wird. Um das Tooltip stattdessen auf eine nicht-standardmäßige Position anzuzeigen, fügt man Folgendes ein: <code>ToolTipLeft</code> oder <code>ToolTipRight</code> (bei vertikale Slider); <code>ToolTipTop</code> oder <code>ToolTipBottom</code> (bei horizontale Slider).</p>
<p><strong>Vertical</strong>: Bewirkt, dass der Slider nach oben und unten verschoben werden kann, anstatt nach links und rechts.</p>
<p>Die oben genannten Optionen können per <a href="../objects/GuiControl.htm#Opt">GuiCtrl.Opt</a> geändert werden, nachdem das Steuerelement erstellt worden ist.</p>

<h2 id="Progress">Progress</h2>
<p>Beschreibung: Ein zweifarbiger Fortschrittsbalken, der visuell darstellt, wie weit eine Operation fortgeschritten ist.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Progress", "w200 h20 cBlue vMeinProgress", 75)</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_progress.png" alt="Progress" />
<p>Fügen Sie im dritten Parameter die Startposition für den Balken ein (fehlt oder ist dieser Parameter leer, gilt standardmäßig 0 oder der niedrigste zulässige Bereichswert). Das folgende Beispiel zeigt, wie die Position eines Balkens geändert werden kann, dessen <a href="../objects/GuiControl.htm#Name">Name</a> MeinProgress ist:</p>
<pre>Gui.<a href="../objects/Gui.htm#Control">Control</a>["MeinProgress"].<a href="../objects/GuiControl.htm#Value">Value</a> += 20  <em>; Erhöht die aktuelle Position um 20.</em>
Gui.Control["MeinProgress"].Value := 50  <em>; Setzt die aktuelle Position auf 50.</em></pre>
<p>Bei horizontalen ProgressBars wird die Dicke des Balkens durch die Höhe des Steuerelements bestimmt. Bei vertikalen ProgressBars durch die Breite des Steuerelements.</p>

<h3>Progress-Optionen</h3>
<p><strong>Cn</strong>: Ändert die Farbe des Balkens. Geben Sie für <strong>n</strong> einen der 16 primären <a href="../misc/Colors.htm">HTML-Farbnamen</a> oder einen 6-stelligen RGB-Farbwert an. Beispiele: <code>cRed</code>, <code>cFFFF33</code>, <code>cDefault</code>. Wenn die C-Option nie verwendet wird (oder <code>cDefault</code> angegeben ist), gilt die Standardfarbe des Betriebssystems.</p>
<p><strong>BackgroundN</strong>: Ändert die Hintergrundfarbe des Balkens. Geben Sie für <strong>n</strong> einen der 16 primären <a href="../misc/Colors.htm">HTML-Farbnamen</a> oder einen 6-stelligen RGB-Farbwert an. Beispiele: <code>BackgroundGreen</code>, <code>BackgroundFFFF33</code>, <code>BackgroundDefault</code>. Wenn die C-Option nie verwendet wird (oder <code>BackgroundDefault</code> angegeben ist), gilt die Hintergrundfarbe des Fensters oder <a href="#Tab">Tab-Steuerelements</a>, das sich dahinter befindet.</p>
<p><strong>Range</strong>: Setzt den Bereich auf etwas anderes als 0 bis 100. Nach dem Wort Range können Sie den Minimal- und Maximalwert angeben (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range1-1000</code> eine Zahl zwischen 1 und 1000 ermöglichen; <code>Range-50-50</code> eine Zahl zwischen -50 und 50; und <code>Range-10--5</code> eine Zahl zwischen -10 und -5.</p>
<p><strong>Smooth</strong>: Zeigt einen einfachen durchgehenden Balken an. Wenn diese Option fehlt, wird der Balken, sofern er keine benutzerdefinierten Farben hat, im aktuellen Windows-Design angezeigt. Ansonsten wird der Balken in mehreren Segmenten dargestellt.</p>
<p><strong>Vertical</strong>: Bewirkt, dass der Balken auf vertikaler Ebene steigt oder fällt, statt auf horizontaler Ebene.</p>
<p>Die oben genannten Optionen können per <a href="../objects/GuiControl.htm#Opt">GuiCtrl.Opt</a> geändert werden, nachdem das Steuerelement erstellt worden ist.</p>

<h2 id="GroupBox">GroupBox</h2>
<p>Beschreibung: Ein rechteckiger Rahmen, der oft dazu verwendet wird, andere Steuerelemente zu umrahmen, um zu zeigen, dass sie zusammengehören. Geben Sie im letzten Parameter den Titel des Rahmens an, der in der oberen linken Ecke angezeigt wird, falls vorhanden.</p>
<p>Zum Beispiel:</p>
<pre>Gui.Add("GroupBox", "w200 h100", "Geographische Kriterien")
</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_group.png" alt="GroupBox" />
<p>Standardmäßig kann der Titel einer GroupBox nur einzeilig sein. Das kann durch die Angabe von <code>Wrap</code> in den Optionen des Steuerelements überschrieben werden.</p>
<p>Optionen zum Ändern der Anzahl von Zeilen innerhalb des Steuerelements (oder der Höhe und Breite) finden Sie unter <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>

<span id="Tab2"></span><h2 id="Tab">Tab3</h2>
<p>Beschreibung: Ein großes Steuerelement mit mehreren Seiten, die jeweils weitere Steuerelemente enthalten können. Von nun an werden diese Seiten "Tabs" genannt.</p>
<p>Es gibt drei Arten des Tab-Steuerelements:</p>
<ul>
  <li><strong>Tab3</strong>: Tab3 behebt einige Probleme, die bei Tab2 und Tab auftreten. Steuerelemente werden innerhalb eines unsichtbaren "Tab-Dialogfensters" platziert, das mit dem Tab-Steuerelement verschoben und kleiner/größer gemacht wird. Das Tab-Steuerelement ist standardmäßig an das Windows-Design angepasst.</li>
  <li><strong>Tab2</strong>: Tab2 behebt seltene Probleme im originalen Tab-Steuerelement, wenn etwas neugezeichnet werden muss, aber mit <a href="#Tab2_Issues">unerwünschten Nebeneffekten</a>.</li>
  <li><strong>Tab</strong>: Tab bleibt aus Gründen der Abwärtskompatibilität erhalten, weil es sich von <a href="#Tab_vs">Tab2 und Tab3 unterscheidet</a>.</li>
</ul>
<p>Zum Beispiel:</p>
<pre>Gui.Add("Tab3",, "Allgemein|Ansicht|Einstellungen")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_tab.png" alt="Tab" />
<p id="ChooseTab">Der letzte Parameter oben ist eine via Vertikalstrich getrennte Liste von Tabnamen oder ein Array mit Tabnamen. Fügen Sie zwei Vertikalstriche an, um einen Tab im Steuerelement vorab auszuwählen (z. B. <code>"Rot|Grün||Blau"</code>). Alternativ können Sie in <em>Optionen</em> das Wort <strong>Choose</strong> einfügen und direkt danach die Nummer des Elements angeben, das vorab ausgewählt sein soll. Zum Beispiel würde <code>Choose5</code> den fünften Tab vorab auswählen (wie bei den anderen Optionen auch, kann das eine Variable sein, wie z. B. <code>"Choose" Var</code>). Nachdem das Steuerelement erstellt wurde, kann man <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> benutzen, um das ausgewählte Tab zu ändern, und <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a>, um Tabs hinzuzufügen oder zu entfernen.</p>
<p id="TabCmd">Nach dem Erstellen eines Tab-Steuerelements gehören Steuerelemente, die danach erfolgen, automatisch dem ersten Tab. Das kann jederzeit wie folgt geändert werden (in diesem Fall ist <em>Tab</em> das <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> des ersten Tab-Steuerelements und <em>Tab2</em> des Zweiten):</p>
<pre>Tab.<a href="../objects/GuiControl.htm#UseTab">UseTab</a>()  <em>; Zukünftige Steuerelemente sind nicht Teil des Tab-Steuerelements.</em>
Tab.UseTab(3)  <em>; Zukünftige Steuerelemente gehören dem dritten Tab im Tab-Steuerelement.</em>
Tab2.UseTab(3)  <em>; Zukünftige Steuerelemente gehören dem dritten Tab im zweiten Tab-Steuerelement.</em>
Tab.UseTab("Name")  <em>; Zukünftige Steuerelemente gehören dem Tab, dessen Name mit <i>Name</i> beginnt (nicht Groß/Kleinschreibung-sensitiv).</em>
Tab.UseTab("Name", true)  <em>; Das gleiche wie oben, aber mit exakter Übereinstimmung (nicht Groß/Kleinschreibung-sensitiv).</em></pre>
<p>Es ist auch möglich, irgendeins der obigen Beispiele zu verwenden, um Steuerelemente einem Tab oder Tab-Steuerelement zuzuweisen, das noch nicht vorhanden ist (außer bei der <em>Name</em>-Methode). In diesem Fall aber werden die unten beschriebenen Optionen zur relativen Positionierung nicht unterstützt.</p>
<p id="Tab_Positioning1"><strong>Positionierung</strong>: Bei jedem Tab oder Tab-Steuerelement, das sein erstes Untersteuerelement erhält, wird dieses Untersteuerelement eine spezielle Standardposition unter Berücksichtigung folgender Bedingungen haben: 1) Fehlt sowohl die X- als auch Y-Koordinate, wird das erste Untersteuerelement auf die obere linke Ecke des Tab-Steuerelements positioniert (mit einem Standard-<a href="../objects/Gui.htm#MarginX">Abstand</a>). Die restlichen Untersteuerelemente werden jeweils unter dem vorherigen Steuerelement positioniert; 2) Sind die Positionierungsoptionen <a href="../objects/Gui.htm#PosPlus">X+n und/oder Y+n</a> angegeben, wird das Untersteuerelement relativ zur linken oberen Ecke des Innenbereichs vom Tab-Steuerelement positioniert. Zum Beispiel würde die Angabe von <code>x+10 y+10</code> bewirken, dass das Steuerelement 10 Pixel nach rechts und 10 Pixel nach unten von der linken oberen Ecke positioniert wird.</p>
<p><strong>Aktueller Tab</strong>: <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Positionsnummer des aktuell ausgewählten Tabs zurück (der erste Tab ist 1, der Zweite ist 2 und so weiter). Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text abgerufen werden. <a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert standardmäßig <a href="../objects/GuiControl.htm#Text">Text</a>, aber wenn das Wort <strong>AltSubmit</strong> in den <em>Optionen</em> des Steuerelements vorkommt, speichert es <a href="../objects/GuiControl.htm#Value">Value</a>.</p>
<p><strong>Erkennen einer Tab-Auswahl</strong>: Jedes Mal, wenn der Benutzer einen anderen Tab auswählt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<p id="Tab_Keyboard"><strong>Navigation mit der Tastatur</strong>: Der Benutzer kann mit <kbd>Strg</kbd>+<kbd>Bild↑</kbd>/<kbd>Bild↓</kbd> von Tab zu Tab navigieren. Befindet sich der Tastaturfokus auf einem Steuerelement, das nicht zum Tab-Steuerelement gehört, wird das erste Tab-Steuerelement des Fensters angesteuert. <kbd>Strg</kbd>+<kbd>Tab</kbd> und <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>Tab</kbd> können auch verwendet werden, aber mit der Ausnahme, dass sie nicht funktionieren, wenn das aktuell fokussierte Steuerelement ein mehrzeiliges Eingabefeld ist.</p>
<p id="Tab_Limits"><strong>Einschränkung</strong>: Jedes Fenster kann nicht mehr als 255 Tab-Steuerelemente enthalten. Jedes Tab-Steuerelement kann nicht mehr als 256 Tabs (Seiten) haben. Darüber hinaus ist es nicht möglich, dass ein Tab-Steuerelement weitere Tab-Steuerelemente enthalten kann.</p>

<h3 id="Tab_vs">Tab3 vs. Tab2 vs. Tab</h3>
<p id="Tab_Parent"><strong>Übergeordnetes Fenster</strong>: Das übergeordnete Fenster eines Steuerelements hat sowohl Einfluss auf die Positionierung und Sichtbarkeit des Steuerelements als auch auf die Navigationsreihenfolge via TAB-Taste. Ein Untersteuerelement innerhalb eines vorhandenen Tab3-Steuerelements verwendet als übergeordnetes Fenster das sogenannte "Tab-Dialogfenster", welches den Anzeigebereich des Tab-Steuerelements ausfüllt. Alle anderen Steuerelemente, einschließlich der Untersteuerelemente von Tab oder Tab2, verwenden als übergeordnetes Fenster nur das GUI-Fenster selbst.</p>
<p id="Tab_Positioning"><strong>Positionierung</strong>: Untersteuerelemente von Tab und Tab2 sind nicht unbedingt an den Grenzen des Tab-Steuerelements gebunden: Sie werden weiterhin immer dann versteckt und sichtbar gemacht, wenn deren Tab ausgewählt oder abgewählt wird. Dieses Verhalten ist besonders für den unten beschriebenen Buttons-Style geeignet.</p>
<p>Wenn es sich um Tab3 handelt, verhalten sich Steuerelemente, die einem Tab zugewiesen werden, <em>bevor</em> das Tab-Steuerelement erstellt wird, wie Steuerelemente, die zu einem Tab- oder Tab2-Steuerelement hinzugefügt wurden. Alle anderen Untersteuerelemente sind nur innerhalb des Anzeigebereichs des Tab-Steuerelements sichtbar.</p>
<p>Beim Verschieben eines Tab3-Steuerelements werden auch seine Untersteuerelemente verschoben. Dieses Verhalten trifft nicht auf Tab- und Tab2-Steuerelemente zu.</p>
<p>Wenn man im seltenen Fall ein Steuerelement via <a href="WinMove.htm">WinMove</a> (oder gleichwertigem DllCall-Aufruf) verschiebt, müssen die Koordinaten relativ zum übergeordneten Fenster des Steuerelements sein, welches nicht unbedingt das GUI sein muss (siehe <a href="#Tab_Parent">oben</a>). <a href="../objects/GuiControl.htm#Move">GuiCtrl.Move</a> hingegen nimmt immer GUI-Koordinaten und <a href="ControlMove.htm">ControlMove</a> immer die Fensterkoordinaten, unabhängig vom übergeordneten Fenster des Steuerelements.</p>
<p id="Tab_Autosize"><strong>Automatische Größenanpassung</strong>: Wenn die Breite und/oder Höhe des Tab3-Steuerelements im Skript nicht angegeben sind, werden sie zu folgenden Zeitpunkten automatisch berechnet (welches auch immer zuerst kommt nach dem Erstellen des Steuerelements):</p>
<ul>
  <li>Das erste Mal, wenn das Tab3-Steuerelement aufhört das aktuelle Tab-Steuerelement zu sein. Dies kann eintreten, wenn man <a href="#TabCmd">GuiCtrl.UseTab</a> (mit oder ohne Parameter) aufruft oder ein anderes Tab-Steuerelement erstellt.</li>
  <li>Das erste Mal, wenn <a href="../objects/Gui.htm#Show">Gui.Show</a> für dieses bestimmte Gui aufgerufen wird.</li>
</ul>
<p>Die berechnete Größe berücksichtigt Untersteuerelemente bei einer automatischen Größenanpassung, plus die Standardabstände. Die Größe wird nur einmal berechnet, und wird nicht neuberechnet, wenn man später Steuerelemente hinzufügen sollte. Wenn das Tab3-Steuerelement leer ist, bekommt es die gleiche Standardgröße wie Tab- oder Tab2-Steuerelelemente.</p>
<p>Die Größe von Tab- und Tab2-Steuerelementen werden nicht automatisch angepasst; sie erhalten eine willkürliche Standardgröße.</p>
<p id="Tab_TabOrder"><strong>Navigationsreihenfolge via TAB-Taste</strong>: Die Navigationsreihenfolge via <kbd>Tab</kbd>-Taste ist abhängig davon, in welcher Reihenfolge die Steuerelemente erstellt worden sind. Bei Tab-Steuerelementen ist die Reihenfolge zusätzlich abhängig davon, welche Art von Tab-Steuerelement verwendet wird:</p>
<ul>
  <li>Innerhalb der Navigationsreihenfolge via TAB-Taste können die Untersteuerelemente von Tab und Tab2 mit anderen Steuerelementen vermischt werden.</li>
  <li>Tab2 setzt seine Tab-Schaltflächen in der Reihenfolgenliste unter seinen Untersteuerelementen.</li>
  <li>Tab3 gruppiert seine Untersteuerelemente innerhalb der Reihenfolgenliste und fügt sie unter den Tab-Schaltflächen ein.</li>
</ul>
<p id="Tab_Notifs"><strong>Benachrichtigungsmeldungen (Tab3)</strong>: Gewöhnliche und <a href="#Custom">benutzerdefinierte</a> Steuerelemente senden Benachrichtigungsmeldungen in der Regel an ihre <a href="#Tab_Parent">übergeordneten Fenster</a>. WM_COMMAND-, WM_NOTIFY-, WM_VSCROLL-, WM_HSCROLL- oder WM_CTLCOLOR-Meldungen, die an das <a href="#Tab_Parent">Tab-Dialogfenster</a> eines Tab3-Steuerelements gesendet werden, werden an das GUI-Fenster weitergeleitet und können via <a href="OnMessage.htm">OnMessage</a> abgefangen werden. Wenn das Tab-Steuerelement das aktuelle Windows-Design verwendet und wenn die Option <a href="../objects/Gui.htm#BackgroundTrans">+BackgroundTrans</a> fehlt, wird WM_CTLCOLORSTATIC vollkommen vom Tab-Dialogfenster berücksichtigt und nicht weitergeleitet. Andere Benachrichtigungsmeldungen (z. B. benutzerdefinierte Meldungen) werden nicht unterstützt.</p>
<p id="Tab2_Issues"><strong>Bekannte Probleme mit Tab2</strong>:</p>
<ul>
  <li><a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> funktioniert nicht in einem Tab2-Steuerelement.</li>
  <li><a href="#ActiveX">WebBrowser</a>-Steuerelemente werden nicht korrekt neu gezeichnet.</li>
  <li>AnimateWindow und möglicherweise andere Win32-API-Aufrufe können dazu führen, dass die Untersteuerelemente des Tab-Steuerelements verschwinden.</li>
</ul>
<p id="Tab_Issues"><strong>Bekannte Probleme mit Tab</strong>:</p>
<ul>
  <li>Beim Aktivieren eines GUI-Fensters durch Anklicken bestimmter Bereiche in Steuerelementen wie Scrollleisten können Neuzeichnungsprobleme entstehen.</li>
  <li><a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> funktioniert nicht, wenn das Tab-Steuerelement eine ListView enthält.</li>
  <li><a href="#ActiveX">WebBrowser</a>-Steuerelemente sind unsichtbar.</li>
</ul>

<h3>Tab-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseTab">oben</a>.</p>
<p><strong>-Background</strong>: Überschreibt die <a href="../objects/Gui.htm#BackColor">benutzerdefinierte Hintergrundfarbe des Fensters</a> und verwendet die Standardfarbe des Tab-Steuerelements vom Betriebssystem. Geben Sie <code>+Theme -Background</code> an, um das Tab-Steuerelement im aktuellen Design des Desktops darzustellen. Allerdings werden dadurch die meisten Steuerelemente merkwürdig im Tab-Steuerelement dargestellt, weil deren Hintergründe nicht mit dem Hintergrund des Tab-Steuerelements übereinstimmen. Bei einigen Steuerelementen (wie <a href="#Text">Text</a>) kann das Problem behoben werden, wenn BackgroundTrans in deren Optionen eingefügt wird.</p>
<p><strong>Buttons</strong>: Erstellt eine Reihe von Schaltflächen auf der oberen Seite des Steuerelements, statt eine Reihe von Tabs (in diesem Fall wird standardmäßig kein Rahmen angezeigt, weil die Anzeigefläche dabei typischerweise keine Steuerelemente enthält).</p>
<p><strong>Left/Right/Bottom</strong>: Geben Sie eines dieser Wörter an, damit die Tabs auf der linken, rechten oder unteren Seite angezeigt werden, statt oben. Für Left und Right gelten Einschränkungen, siehe dazu <a href="../misc/Styles.htm#TCS_VERTICAL">TCS_VERTICAL</a>.</p>
<p><strong>-Wrap</strong>: Verhindert, dass die Tabs mehr als eine Reihe verbrauchen (sind hierbei zu viele Tabs vorhanden, werden Schaltflächen mit Pfeilen angezeigt, die der Benutzer drücken kann, um zwischen den Tabs zu wechseln).</p>
<p>Optionen zum Ändern der Anzahl von Textzeilen innerhalb des Steuerelements (oder der Höhe und Breite) finden Sie unter <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<p><strong>Symbole in Tabs</strong>: Mit <a href="SendMessage.htm">SendMessage</a> kann ein Symbol neben dem Tabnamen angezeigt werden. Siehe dazu den Forumsbeitrag <a href="http://www.autohotkey.com/forum/topic6060.html">Icons in tabs</a>.</p>

<h2 id="StatusBar">StatusBar</h2>
<p>Beschreibung: Eine Reihe von Texten und/oder Symbolen, die am unteren Ende eines Fensters angefügt sind. Eine Statusleiste wird normalerweise dazu verwendet, geänderte Zustände zu melden.</p>
<p>Zum Beispiel:</p>
<pre>SB := Gui.Add("StatusBar",, "Starttext der Leiste (kann leer gelassen werden).")
SB.SetText("Es sind " . Reihenanzahl . " Reihen markiert.")</pre>
<p>Erscheinungsbild:</p>
<img src="../static/ctrl_status.png" alt="StatusBar" />
<p>Die einfachste Anwendungsmöglichkeit der Statusleiste ist es, <a href="#SB_SetText">SB.SetText</a> immer dann aufzurufen, wenn sich etwas ändert, das dem Benutzer gemeldet werden soll. Um mehr als eine Information zu melden, teilt man die Leiste via <a href="#SB_SetParts">SB.SetParts</a> in mehreren Abschnitten auf. Mit <a href="#SB_SetIcon">SB.SetIcon</a> können Symbole in die Leiste eingefügt werden.</p>

<div class="methodShort" id="SB_SetText">
<h3>SetText</h3>
<p>Zeigt <em>NeuerText</em> in einem bestimmten Bereich der Statusleiste an, und gibt 1 bei Erfolg und 0 bei Misserfolg zurück.</p>
<pre class="Syntax">Erfolg := SB.<span class="func">SetText</span>(NeuerText <span class="optional">, Bereichsnummer := 1, Style := 0</span>)</pre>
<dl><dt>NeuerText</dt><dd>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Überall in <em>NeuerText</em> können bis zu zwei Tabulatorzeichen (`t) angegeben werden: alles, was sich rechts neben dem ersten Tab befindet, wird innerhalb des Bereichs zentriert, und alles, was sich rechts neben dem zweiten Tab befindet, wird rechtsbündig gemacht.</p></dd><dt>Bereichsnummer</dt><dd>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Ist <em>Bereichsnummer</em> nicht vorhanden, gilt standardmäßig 1. Ansonsten kann ein Integer zwischen 1 und 256 angegeben werden.</p></dd><dt>Style</dt><dd>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Ist <em>Style</em> nicht vorhanden, wird standardmäßig der traditionelle Rahmen verwendet, um diesen Bereich aussehen zu lassen, als wäre er abgesenkt. Ansonsten kann eine 1 angegeben werden, um den Rahmen zu entfernen, oder eine 2, um diesen Bereich aussehen zu lassen, als wäre er angehoben.</p></dd></dl>
</div>

<div class="methodShort" id="SB_SetParts">
<h3>SetParts</h3>
<p>Teilt die Leiste anhand einer bestimmten Breite (in Pixel) in mehrere Abschnitte auf, und gibt einen Wert ungleich 0 zurück (<a href="../objects/GuiControl.htm#Hwnd">HWND</a> der Statusleiste).</p>
<pre class="Syntax">Hwnd := SB.<span class="func">SetParts</span>(<span class="optional">Breite1, Breite2, ... Breite255</span>)</pre>
<dl><dt>Breite1 ... Breite255</dt><dd>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Fehlen alle Parameter, wird die Leiste in ihren alten Zustand versetzt, so dass sie nur einen einzelnen langen Bereich hat. Ansonsten können für alle Bereiche, bis auf den letzten, die Breite angegeben werden (der letzte Bereich wird mit der verbliebenen Leistenbreite aufgefüllt). Zum Beispiel würde <code>SB.SetParts(50, 50)</code> drei Bereiche erstellen: Die ersten zwei mit einer Breite von 50 und der letzte mit der verbliebenen Breite.</p></dd></dl>
<p>Hinweis: Alle Bereiche, die per <code>SB.SetParts()</code> "gelöscht" worden sind, enthalten das nächste Mal, wenn sie wieder angezeigt werden, keinen Text (desweiteren werden ihre Symbole automatisch zerstört).</p></div>

<div class="methodShort" id="SB_SetIcon">
<h3>SetIcon</h3>
<p>Zeigt in einem bestimmten Bereich ein kleines Symbol links neben den Text an, und gibt das Handle des Symbols zurück.</p>
<pre class="Syntax">HICON := SB.<span class="func">SetIcon</span>(Dateiname <span class="optional">, Symbolnummer := 1, Bereichsnummer := 1</span>)</pre>
<dl><dt>Dateiname</dt><dd>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Der Pfad eines Symbols oder einer Bilddatei. Eine Liste von unterstützten Formaten finden Sie im <a href="#IconSupport">Abschnitt des Picture-Steuerelements</a>.</p>
<p>Anstelle eines Dateinamens kann auch ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> verwendet werden. Zum Beispiel <code>SB.SetIcon("HICON:" handle)</code>.</p></dd>
<dt>Symbolnummer</dt><dd>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Um anstelle der ersten Symbolgruppe eine andere in der Datei zu nutzen, müssen Sie für <em>Symbolnummer</em> die entsprechende Nummer angeben. Zum Beispiel würde <code>SB.SetIcon("Shell32.dll", 2)</code> das Standardsymbol von der zweiten Symbolgruppe verwenden. Wenn der <em>Symbolnummer</em>-Parameter negativ ist, wird sein absoluter Wert als Ressourcen-ID eines Symbols innerhalb einer ausführbaren Datei angesehen.</p></dd><dt>Bereichsnummer</dt><dd>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Ist <em>Bereichsnummer</em> nicht vorhanden, gilt standardmäßig 1. Ansonsten kann ein Integer zwischen 1 und 256 angegeben werden.</p></dd></dl>
<p>Hinweis: Das HICON ist eine Systemressource, die bei den meisten Skripten getrost ignoriert werden kann, weil es automatisch zerstört wird, sobald das Fenster der Statusleiste zerstört wird. Ebenso wird jedes alte Symbol zerstört, wenn es per <code>SB.SetIcon()</code> mit einer Neuen ersetzt wird. Das kann wie folgt verhindert werden:
</p>
<pre>Gui.Opt("+LastFound")
<a href="SendMessage.htm">SendMessage</a>(0x40F, Bereichsnummer - 1, MeinHicon, "msctls_statusbar321")  <em>; 0x40F ist SB_SETICON.</em></pre></div>

<div class="methodShort" id="SB_SetProgress">
<h3>SetProgress</h3>
<p>Erstellt und steuert einen Fortschrittsbalken innerhalb einer Statusleiste. Diese Funktion ist auf <a href="http://www.autohotkey.com/forum/topic37754.html">www.autohotkey.com/forum/topic37754.html</a> verfügbar.</p></div>


<h3>Reagieren auf Mausklicks</h3>
<p>Jedes Mal, wenn der Benutzer auf die Leiste klickt, wird das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-, <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>- oder <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu</a>-Ereignis ausgelöst, und im <em>Info</em>- oder <em>Element</em>-Parameter die Bereichsnummer gespeichert. Allerdings kann die Bereichsnummer ein sehr großer Integer sein, falls der Benutzer den Bereich in der Nähe des Größenziehpunktes rechts neben der Statusleiste anklickt.</p>

<h3>Schrift und Farbe</h3>
<p>Größe, Art und Stil der Schrift kann per <a href="../objects/Gui.htm#SetFont">Gui.SetFont</a> eingestellt werden (wie bei normalen Steuerelementen). Die Textfarbe kann nicht geändert werden. Die Hintergrundfarbe der Statusleiste kann geändert werden, indem man das Wort <strong>Background</strong> in den <em>Optionen</em> angibt und direkt danach einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (0x-Präfix ist optional) einfügt. Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>, <code>BackgroundDefault</code>.</p>

<h3>Statusleiste verstecken</h3>
<p>Damit die Leiste zu Beginn unsichtbar ist, fügt man das Wort Hidden in den Optionen ein, zum Beispiel <code>MeineStatusBar := Gui.Add("StatusBar", "Hidden")</code>. Um die Leiste irgendwann nach ihrer Erstellung zu verstecken, verwendet man <code>MeineStatusBar.Visible := false</code>. Mit <code>MeineStatusBar.Visible := true</code> kann sie wieder sichtbar gemacht werden.</p>
<p class="note"><strong>Hinweis</strong>: Das Verstecken der Leiste reduziert nicht die Höhe des Fensters. Wenn das gemacht werden soll, verwenden Sie einfach <code>Gui.Show("<a href="../objects/Gui.htm#AutoSize">AutoSize</a>")</code>.</p>
<h3>Styles (selten verwendet)</h3>
<p>Siehe <a href="../misc/Styles.htm#StatusBar">StatusBar-Style-Tabelle</a>.</p>

<h3>Bekannte Einschränkungen</h3>
<p>1) Jedes Steuerelement, das sich mit der Statusleiste überschneidet, könnte manchmal darüber gezeichnet werden. Um das zu verhindern, können solche Steuerelemente beispielsweise per <a href="../objects/GuiOnEvent.htm#Size">Size</a>-Ereignis dynamisch verkleinert werden. 2) Es kann nicht mehr als eine Statusleiste pro Fenster vorkommen.</p>

<h3><strong>Beispiel</strong></h3>
<p>Am unteren Ende der <a href="TreeView.htm#Examples">TreeView-Seite</a> wird eine Statusleiste mit mehreren Bereichen gezeigt.</p>
<span id="IE_Control"></span><h2 id="ActiveX">ActiveX</h2>
<p>ActiveX-Komponenten wie das MSIE-Browser-Steuerelement können wie folgt in ein GUI-Fenster eingebettet werden:</p>
<pre>Gui := GuiCreate()
WB := Gui.Add("ActiveX", "w980 h640", "<a href="https://msdn.microsoft.com/de-de/library/aa752085">Shell.Explorer</a>").Value  <em>; Der letzte Parameter ist der Name der ActiveX-Komponente.</em>
WB.<a href="https://msdn.microsoft.com/de-de/library/aa752093">Navigate</a>("https://autohotkey.com/boards/")  <em>; Speziell für das Web-Browser-Steuerelement.</em>
Gui.Show()</pre>
<p>Beim Erstellen des Steuerelements kann das ActiveX-Objekt via <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> abgerufen werden.</p>
<p>Das folgende Beispiel zeigt, wie man <a href="ComObjConnect.htm">ComObjConnect</a> nutzen kann, um die Ereignisse des Objekts zu verarbeiten:</p>
<pre>Gui := GuiCreate()
URL := Gui.Add("Edit", "w930 r1", "https://autohotkey.com/boards/")
Gui.Add("Button", "x+6 yp w44 Default", "Go").OnEvent("Click", "ButtonLaden")
WB := Gui.Add("ActiveX", "xm w980 h640", "Shell.Explorer").Value
<strong>ComObjConnect</strong>(WB, WB_events)  <em>; Verbindet die WB-Ereignisse mit dem Klassenobjekt WB_events.</em>
Gui.Show()
<em>; Fortfahren, um die Startseite zu laden:</em>
ButtonLaden()

ButtonLaden() {
    global
    WB.Navigate(URL.Value)
}

class WB_events {
    <a href="https://msdn.microsoft.com/de-de/library/aa768334">NavigateComplete2</a>(wb, NewURL) {
        global    
        URL.Value := NewURL  <em>; URL-Eingabefeld aktualisieren.</em>
    }
}</pre>
<p><a href="ComObjType.htm">ComObjType</a> kann verwendet werden, um den Typ des abgerufenen Objekts zu bestimmen.</p>

<h2 id="Custom">Custom</h2>
<p>Bietet die Möglichkeit, ein Steuerelement, das nicht direkt von AutoHotkey unterstützt wird, in ein GUI-Fenster einzubetten. Dazu muss der Win32-Klassenname über die <code>Class</code>-Option in <code>Gui.Add</code> angegeben werden. Beispiele:</p>
<pre>Gui.Add("Custom", "ClassComboBoxEx32")  <em>; Fügt ein <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb775740">ComboBoxEx</a>-Steuerelement hinzu.</em>
Gui.Add("Custom", "ClassScintilla")  <em>; Fügt ein <a href="http://scintilla.org/">Scintilla</a>-Steuerelement hinzu. Beachten Sie, dass vorher die SciLexer.dll-Bibliothek geladen werden muss.</em></pre>
<p>AutoHotkey verwendet standardmäßig die Text-Routinen für Windows-Steuerelemente, wenn Texte im Steuerelement per <code>Gui.Add</code> oder <code>GuiCtrl.Value</code> abgerufen/ersetzt werden sollen.</p>
<p><strong>Ereignisse</strong>: Da die Bedeutung eines Benachrichtigungscodes abhängig vom Steuerelement ist, das ihn gesendet hat, unterstützen Custom-Steuerelemente kein <a href="../objects/GuiOnEvent.htm">OnEvent</a>. Wenn das Steuerelement allerdings Benachrichtigungen in Form von WM_NOTIFY- oder WM_COMMAND-Meldungen versendet, kann das Skript auf <a href="../objects/GuiOnNotify.htm">OnNotify</a> oder <a href="../objects/GuiOnCommand.htm">OnCommand</a> zurückgreifen, um sie zu erkennen.</p>
<p>Das folgende Beispiel zeigt, wie ein <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb761374">IP-Adressen-Steuerelement</a> hinzugefügt und verwendet werden kann:</p>
<pre>Gui := GuiCreate()
IP := Gui.Add("Custom", "ClassSysIPAddress32 r1 w150 vIP")
IP.OnCommand(0x300, "IP_EditChange")  <em>; 0x300 = EN_CHANGE</em>
IP.OnNotify(-860, "IP_FieldChange")  <em>; -860 = IPN_FIELDCHANGED</em> 
Gui.Add("Text", "wp vIPText")
Gui.Add("Text", "wp y+m vIPField")
Gui.Add("Button", "Default", "OK").OnEvent("Click", "OK_Click")
Gui.Show()

IPCtrlSetAddress(IP, SysGetIPAddresses()[1])

OK_Click(this)
{
    this.Gui.Hide()
    MsgBox("Sie haben " IPCtrlGetAddress(this.Gui.Control["IP"]) " ausgewählt.")
    ExitApp()
}

IP_EditChange(this)
{
    this.Gui.Control["IPText"].Text := "Neuer Text: " this.Gui.Control["IP"].Text
}

IP_FieldChange(this, NMIPAddress)
{
    <em>; Extrahiert Infos aus der NMIPAddress-Struktur.</em>
    iField := NumGet(NMIPAddress + 3*A_PtrSize + 0, "int")
    iValue := NumGet(NMIPAddress + 3*A_PtrSize + 4, "int")
    if (iValue &gt;= 0)
        this.Gui.Control["IPField"].Text := "Feld #" iField " geändert: " iValue
    else
        this.Gui.Control["IPField"].Text := "Feld #" iField " leer gelassen"
}

IPCtrlSetAddress(GuiCtrl, IPAddress)
{
    static WM_USER := 0x400
    static IPM_SETADDRESS := WM_USER + 101

    <em>; Packt die IP-Adresse in ein 32-Bit-Wort, um es mit SendMessage verwenden zu können.</em>
    IPAddrWord := 0
    Loop Parse IPAddress, "."
        IPAddrWord := (IPAddrWord * 256) + A_LoopField
    SendMessage(IPM_SETADDRESS, 0, IPAddrWord, GuiCtrl)
}

IPCtrlGetAddress(GuiCtrl)
{
    static WM_USER := 0x400
    static IPM_GETADDRESS := WM_USER + 102

    VarSetCapacity(AddrWord, 4)
    SendMessage(IPM_GETADDRESS, 0, &amp;AddrWord, GuiCtrl)
    Loop 4
        IPPart%A_Index% := NumGet(AddrWord, 4 - A_Index, "UChar")
    return IPPart1 "." IPPart2 "." IPPart3 "." IPPart4
}</pre>

<h2>Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiCreate.htm">GuiCreate</a>, <a href="../objects/Gui.htm">Gui-Objekt</a>, <a href="../objects/GuiControl.htm">GuiControl-Objekt</a>, <a href="../objects/Menu.htm">Menu-Objekt</a></p>

</body>
</html>
