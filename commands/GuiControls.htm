<!DOCTYPE HTML>
<html>
<head>
<title>GUI-Steuerelementarten</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1><a href="GuiCreate.htm">GUI</a>-Steuerelementarten</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Text">Text</a>, <a href="#Edit">Edit</a>, <a href="#UpDown">UpDown</a>, <a href="#Picture">Picture</a></li>
  <li><a href="#Button">Button</a>, <a href="#Checkbox">Checkbox</a>, <a href="#Radio">Radio</a></li>
  <li><a href="#DropDownList">DropDownList</a>, <a href="#ComboBox">ComboBox</a></li>
  <li><a href="#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
  <li><a href="#Link">Link</a>, <a href="#Hotkey">Hotkey</a>, <a href="#DateTime">DateTime</a></li>
  <li><a href="#MonthCal">MonthCal</a>, <a href="#Slider">Slider</a>, <a href="#Progress">Progress</a></li>
  <li><a href="#GroupBox">GroupBox</a>, <a href="#Tab">Tab3</a>, <a href="#StatusBar">StatusBar</a></li>
  <li><a href="#ActiveX">ActiveX</a> (z. B. Internet Explorer Control)</li>
  <li><a href="#Custom">Custom</a></li>
</ul>

<h2 id="Text">Text</h2>
<p>Beschreibung: Ein Textfeld ohne Rand, das vom Benutzer nicht bearbeitet werden kann. Oft verwendet, um andere Steuerelemente zu beschriften. Beispiel:</p>
<pre>Gui.Add("Text",, "Bitte Name eingeben:")</pre>
<p>In diesem Fall ist der letzte Parameter die Zeichenkette, die angezeigt werden soll. Die Zeichenkette kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen zu beginnen. Außerdem kann mithilfe eines <a href="../Scripts.htm#continuation">Fortsetzungsbereichs</a> eine lange Zeile in mehreren kurzen Zeilen aufgeteilt werden.</p>
<p>Enthält <em>Optionen</em> eine Breite (W), aber nicht <a href="../objects/Gui.htm#R">Zeilen (R)</a> oder Höhe (H), werden Textzeilen bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>

<p>Mit dem <a href="../objects/GuiOnEvent.htm#Click">Click-Ereignis</a> kann man erkennen, wann der Benutzer den Text anklickt. Zum Beispiel:</p>
<pre>Gui := GuiCreate()
FakeLink := Gui.Add("Text", "", "Hier klicken, um Google zu starten.")
FakeLink.SetFont("underline cBlue")
FakeLink.OnEvent("Click", "LaunchGoogle")

<em>; Alternativ kann auch das <a href="#Link">Link</a>-Steuerelement verwendet werden:</em>
Gui.Add("Link",, '&lt;a href="www.google.com"&gt;Hier&lt;/a&gt; klicken, um Google zu starten.')
Gui.Show()

LaunchGoogle() {
    Run("www.google.com")
}</pre>
<p>Text-Steuerelemente unterstützen auch das <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick-Ereignis</a>.</p>
<p id="SS_NOTIFY">Nur Text-Steuerelemente mit dem SS_NOTIFY-Style (0x100) senden Klick- und Doppelklickbenachrichtigungen, daher wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> automatisch diesen Style hinzufügen, wenn ein Click- oder DoubleClick-Callback-Funktion registriert wird. In Windows Vista und höher bewirkt der SS_NOTIFY-Style, dass der Text des Steuerelements bei einem Doppelklick in die Zwischenablage kopiert wird.</p>
<p>Ein Und-Zeichen (&amp;) kann im Text verwendet werden, um einen Buchstaben zu unterstreichen. Zum Beispiel:</p>
<pre>Gui.Add("Text",, "&amp;Vorname:")
Gui.Add("Edit")</pre>
<p>Im obigen Beispiel wird der Buchstabe V unterstrichen, das dem Benutzer zeigt, dass das <a href="GuiCreate.htm#ShortcutKey">Tastenkürzel</a> ALT+V gedrückt werden kann, um den Tastaturfokus auf das erste eingabefähige Steuerelement zu setzen, das nach dem Text-Steuerelement hinzugefügt worden ist. Wenn ein Und-Zeichen stattdessen literal angezeigt werden soll, müssen zwei aufeinanderfolgende Und-Zeichen (&amp;&amp;) angegeben werden. Um die Sonderbehandlung der Und-Zeichen komplett zu deaktivieren, füge <a href="../misc/Styles.htm#SS_NOPREFIX">0x80</a> in den Optionen des Steuerelements ein.</p>
<p>Siehe <a href="../objects/Gui.htm#OtherOptions">allgemeine Optionen</a> für weitere Optionen wie <em>Right</em>, <em>Center</em> und <em>Hidden</em>. Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<h2 id="Edit">Edit</h2>
<p>Beschreibung: Ein Eingabefeld, in dem formatloser Text eingegeben werden kann. Beispiel:</p>
<pre>Gui.Add("Edit", "r9 vMyEdit", "Text erscheint innerhalb des Eingabefeldes (lasst diesen Parameter weg, um anfangs leer zu sein).")</pre>
<p>Das Steuerelement wird mehrzeilig, wenn es mehr als eine Textzeile hat. Die Angabe von <code>r3</code> in <em>Optionen</em> bewirkt beispielsweise, dass ein dreizeiliges Edit-Steuerelement mit folgenden Standardeigenschaften erstellt wird: vertikale Scrollleiste; automatischer Zeilenumbruch; ENTER-Tastendruck erzeugt einen Zeilenumbruch, anstatt den <a href="#DefaultButton">Standard-Button</a> des Fensters auszulösen.</p>
<p>Wenn eine neue Zeile in einem mehrzeiligen Edit-Steuerelement begonnen werden soll, muss im letzten Parameter ein Zeilenumbruchszeichen (`n) oder CR+LF (`r`n) angegeben werden. Beide Methoden erzeugen literale CR+LF-Paare (`r`n) innerhalb des Edit-Steuerelements. Wenn der Inhalt des Steuerelements jedoch via <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> abgerufen wurde, wird ein CR+LF-Paar (`r`n) jedesmal in ein einzelnes Zeilenumbruchszeichen (`n) umgewandelt. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann diese End-of-Line-Umwandlung umgangen werden. Der Text kann wie folgt in eine Datei geschrieben werden: <code><a href="FileAppend.htm">FileAppend</a>(MeinEdit.Text, "C:\Gespeicherte Datei.txt")</code>.</p>
<p>Bei einem Steuerelement mit automatischem Zeilenumbruch (Standard bei mehrzeiligen Edit-Steuerelementen) wird jeder Zeilenumbruch bei Benutzereingabe keine Zeilenumbruchszeichen erzeugen (nur die ENTER-Taste ist dazu fähig).</p>
<p>Immer wenn der Benutzer den Inhalt des Steuerelements ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<p>TIPP: Um eine Textdatei in ein Edit-Steuerelement zu laden, verwende <a href="FileRead.htm">FileRead</a> und <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a>. Zum Beispiel:</p>
<pre>MeinEdit := Gui.Add("Edit", "R20")
MeinEdit.Value := FileRead("C:\Meine Datei.txt")</pre>
<h3>Edit-Optionen</h3>
<p>Hinweis: Wenn eine Option entfernt statt hinzugefügt werden soll, muss ein Minuszeichen davor gesetzt werden.</p>
<p><strong>Limit</strong>: Beschränkt die Benutzereingabe auf die sichtbare Breite des Eingabefeldes. Alternativ kann die Eingabe auf eine bestimmte Anzahl an Zeichen begrenzt werden, wenn direkt danach eine Zahl angegeben wird. Zum Beispiel würde <code>Limit10</code> bewirken, dass nicht mehr als 10 Zeichen eingegeben werden können.</p>
<p><strong>Lowercase</strong>: Die Zeichen werden bei Benutzereingabe automatisch in Kleinbuchstaben umgewandelt.</p>
<p id="EditMulti"><strong>Multi</strong>: Macht es möglich, mehr als eine Textzeile zu haben. Üblicherweise ist es nicht notwendig, diese Option anzugeben, weil sie automatisch erkannt wird, basierend auf Höhe (H), <a href="../objects/Gui.htm#R">Zeilen (R)</a> oder Inhalte (<em>Text</em>).</p>
<p id="EditNum"><strong>Number</strong>: Hindert den Benutzer daran, etwas anderes als Zahlen in das Feld einzugeben (es ist immer noch möglich, Nicht-Zahlen per Zwischenablage einzufügen). Alternativ kann man eine numerische Eingabe auch erzwingen, wenn ein <a href="#UpDown">UpDown</a> ans Edit-Steuerelement angefügt wird.</p>
<p><strong>Password</strong>: Versteckt die Benutzereingabe (z. B. für ein Passwort) durch Ersetzen der eingegebenen Zeichen mit Maskierungszeichen. Es ist möglich, nach dem Wort Password ein benutzerdefiniertes Maskierungszeichen anzugeben. Zum Beispiel würde <code>Password*</code> das Maskierungszeichen zu einem Sternchen machen, statt zu einem schwarzen Punkt, der standardmäßig in Windows XP verwendet wird. Hinweis: Diese Option funktioniert nicht bei mehrzeiligen Edit-Steuerelementen.</p>
<p><strong>ReadOnly</strong>: Hindert den Benutzer daran, die Inhalte des Steuerelements zu ändern. Der Text kann aber weiterhin gescrollt, markiert und in die Zwischenablage kopiert werden.</p>
<p><strong>Tn</strong>: Der Buchstabe T kann dazu verwendet werden, Tabstopps innerhalb eines <a href="#EditMulti">mehrzeiligen Edit-Steuerelements</a> zu setzen (Tabstopps bestimmen die Spaltenpositionen, auf denen literale TAB-Zeichen springen werden; sie können verwendet werden, um den Text in Spalten zu formatieren). Ist der Buchstabe T nicht vorhanden, erfolgen die Tabstopps bei je 32 Dialogeinheiten (DLU) (die Breite jeder Dialogeinheit ist vom Betriebssystem abhängig). Ist der Buchstabe T nur einmal vorhanden, werden die Tabstopps auf je <strong>n</strong> Einheiten über die gesamte Breite des Steuerelements verteilt. Zum Beispiel würde <code>Gui.Add("Edit", "vMeinEdit r16 t64")</code> den Standardabstand zwischen den Tabstopps verdoppeln. Benutzerdefinierte Tabstopps können durch die mehrmalige Angabe des Buchstaben T wie folgt angegeben werden: <code>Gui.Add("Edit", "vMeinEdit r16 t8 t16 t32 t64 t128")</code>. Ein Tabstopp gilt jeweils für eine absolute Spaltenposition in der Liste, bis zu einem Maximum von 50 Tabstopps. Hinweis: Tabstopps benötigen ein mehrzeiliges Edit-Steuerelement.</p>
<p><strong>Uppercase</strong>: Die Zeichen werden bei Benutzereingabe automatisch in Großbuchstaben umgewandelt.</p>
<p><strong>WantCtrlA</strong>: Verwende -WantCtrlA, um den Benutzer bei einem Edit-Steuerelement daran zu hindern, STRG+A zum Markieren des ganzen Textes zu drücken.</p>
<p id="WantReturn"><strong>WantReturn</strong>: Verwende -WantReturn, um ein mehrzeiliges Edit-Steuerelement daran zu hindern, die ENTER-Taste zu erfassen. Das Drücken dieser Taste wäre dann das gleiche wie, als würde man den <a href="#DefaultButton">Standard-Button</a> des Fensters (falls vorhanden) drücken. In diesem Fall könnte der Benutzer STRG+ENTER drücken, um eine neue Zeile zu beginnen.</p>
<p><strong>WantTab</strong>: Bringt eine TAB-Taste dazu, ein Tabulatorzeichen zu erzeugen, statt das nächste Steuerelement anzusteuern. Ist diese Option nicht vorhanden, könnte der Benutzer STRG+TAB drücken, um ein Tabulatorzeichen innerhalb eines mehrzeiligen Edit-Steuerelements erzeugen zu können. Hinweis: <em>WantTab</em> funktioniert auch bei einem einzeiligen Edit-Steuerelement, allerdings werden die Tabulatorzeichen als kastenförmige Zeichen dargestellt (die aber weiterhin gültig sind).</p>
<p><strong>-Wrap</strong>: Deaktiviert den automatischen Zeilenumbruch in einem mehrzeiligen Edit-Steuerelement. Dieser Style kann nach dem Erstellen des Steuerelements nicht mehr geändert werden. Als Alternative können folgende Methoden verwendet werden: 1) Das Fenster und die dazugehörigen Steuerelemente <a href="../objects/Gui.htm#Destroy">zerstören</a> und danach neu erstellen; oder 2) Zwei übereinander liegende Edit-Steuerelemente erstellen, bei denen das erste den automatischen Zeilenumbruch aktiviert hat und beim anderen nicht. Das Steuerelement, das nicht verwendet wird, kann leer und/oder versteckt bleiben.</p>
<p>Siehe <a href="../objects/Gui.htm#OtherOptions">allgemeine Optionen</a> für weitere Optionen wie <em>Right</em>, <em>Center</em> und <em>Hidden</em>. Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<p><strong>Eingabefeld mit mehr Funktionen</strong>: HiEdit ist ein frei verfügbares Edit-Steuerelement, das aus mehreren Tabs besteht, große Dateien beinhalten kann und sehr wenig Speicher verbraucht. Es kann sowohl Text- als auch Binärdateien bearbeiten. Für Details siehe <a href="http://www.autohotkey.com/forum/topic19141.html">Thread von majkinetor</a>.</p>
<h2 id="UpDown">UpDown</h2>
<p>Beschreibung: Zwei Pfeiltasten, die der Benutzer drücken kann, um einen Wert zu erhöhen oder zu verringern. Standardmäßig fügt sich ein UpDown automatisch an das zuvor hinzugefügte Steuerelement an. Dieses vorherige Steuerelement wird auch als <em>Buddy</em> bezeichnet. Das bekannteste Beispiel dafür ist der "Spinner" (Drehrad) - ein UpDown, das an einem <a href="#Edit">Edit-Steuerelement</a> angefügt ist. Zum Beispiel:</p>
<pre>Gui.Add("Edit")
Gui.Add("UpDown", "vMeinUpDown Range1-10", 5)</pre>
<p>Im obigen Beispiel ist das Edit-Steuerelement der Buddy von UpDown. Immer, wenn der Benutzer eine der Pfeiltasten drückt, wird die Zahl im Edit-Steuerelement automatisch erhöht oder verringert.</p>
<p>Der Buddy von UpDown kann auch ein <a href="#Text">Text</a>- oder <a href="#ListBox">ListBox</a>-Steuerelement sein. Aufgrund von Einschränkungen des Betriebssystems kann es jedoch sein, dass die restlichen Steuerelemente (wie ComboBox oder DropDownList) nicht ordnungsgemäß mit dem <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis und anderen Funktionen funktionieren.</p>
<p>Die Startposition von UpDown kann im letzten Parameter angegeben werden (wird dieser weggelassen, beginnt die Position bei 0 oder bei der nächstmöglichen Zahl).</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> verwendet, ist der Rückgabewert die numerische Position von UpDown. Wenn das UpDown an einem Edit-Steuerelement angefügt worden ist und die Gültigkeit der Benutzereingabe nicht überprüft werden soll, ist es am besten, den Wert von UpDown zu verwenden, statt den Wert vom Edit-Steuerelement. Das liegt daran, dass UpDown immer eine Zahl innerhalb des Bereichs zurückgibt, auch dann, wenn der Benutzer im Edit-Steuerelement etwas eingegeben hat, das keine Zahl ist oder außerhalb des Bereichs liegt. Beachte zudem, dass Zahlen mit mehr als 3 Stellen standardmäßig einen <a href="../misc/Styles.htm#UpDownSep">Tausender-Trennzeichen</a> (z. B. Komma) erhalten. Diese Trennzeichen werden vom Edit-Steuerelement zurückgegeben, aber nicht vom UpDown-Steuerelement.</p>
<p>Immer wenn der Benutzer eine der Pfeiltasten anklickt oder eine Pfeiltaste auf der Tastatur drückt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<h3>UpDown-Optionen</h3>
<p id="Horz"><strong>Horz</strong>: Richtet die Buttons des Steuerelements nach links/rechts aus, statt nach oben/unten. Standardmäßig wird dabei das Steuerelement vom <em>Buddy</em> getrennt. Dieses Verhalten kann durch die Angabe von <code>Horz 16</code> in den Optionen des Steuerelements überschrieben werden.</p>
<p><strong>Left</strong>: Setzt das UpDown an die linke Seite des Buddys, statt an die rechte Seite.</p>
<p><strong>Range</strong>: Bestimmt einen Bereich, der vom Standardbereich 0 bis 100 abweichen soll. Nach dem Wort Range erfolgt der Minimalwert, ein Bindestrich und der Maximalwert. Zum Beispiel würde Range1-1000 ermöglichen, eine Zahl zwischen 1 und 1000 auswählen zu können, Range-50-50 eine Zahl zwischen -50 und 50 und Range-10--5 eine Zahl zwischen -10 und -5. Minimal- und Maximalwert können vertauscht werden, um die Pfeiltasten dazu zu bringen, in die entgegengesetzte Richtung zu bewegen. Der größte zulässige Bereich ist -2147483648 bis 2147483647. Wenn das Buddy-Steuerelement eine <a href="#ListBox">ListBox</a> ist, gilt standardmäßig ein Bereich von 32767 bis 0 bei einem vertikalen UpDown und umgekehrt bei einem horizontalen UpDown (<a href="#Horz">Horz</a>).</p>
<p><strong>Wrap</strong>: Das Steuerelement springt auf das entgegengesetzte Ende des Bereichs, wenn der Minimal- oder Maximalwert überschritten wird. Ist <em>Wrap</em> nicht vorhanden, wird das Steuerelement beim Erreichen des Minimal- oder Maximalwertes stoppen.</p>
<p><strong>-16</strong>: Bewirkt, dass ein vertikales UpDown vom Buddy getrennt wird. Das führt auch dazu, dass das Steuerelement jede angegebene Breite, Höhe und Position berücksichtigen wird, anstatt sich nach der Größe des Buddys zu richten. Darüber hinaus merkt sich ein isoliertes UpDown intern die eigene Position. Diese Position kann beispielsweise per <a href="../objects/Gui.htm#Submit">Gui.Submit</a> abgerufen werden.</p>
<p id="UpDownSep"><strong>0x80</strong>: Füge <code>0x80</code> in <em>Optionen</em> ein, um die Tausender-Trennzeichen zu entfernen, die üblicherweise bei je drei Dezimalstellen im Buddy vorkommen. Normalerweise ist dieser Style nicht notwendig, weil die Trennzeichen in der Zahl fehlen, wenn man die Zahl vom UpDown-Steuerelement selbst abruft (statt vom Buddy).</p>
<p><strong>Beliebige Schrittweite</strong>: In <a href="http://numeric.nerim.net/AutoHotkey/Scripts/UpDown%20-%20Non-unitary%20increments.ahk">diesem Skript</a> von NumEric wird gezeigt, wie die UpDown-Schrittweite geändert werden kann (z. B. 5 oder 0.1).</p>
<p>Siehe auch: <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<span id="Pic"></span><h2 id="Picture">Picture (oder Pic)</h2>
<p>Beschreibung: Ein Bereich, in dem ein Bild angezeigt wird (siehe weiter unten, welche Dateitypen unterstützt werden). Der letzte Parameter ist der Name der Bilddatei, von der man annimmt, dass sie sich im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis befindet, solange kein absoluter Pfad angegeben ist. Beispiel:</p>
<pre>Gui.Add("Picture", "w300 h-1", "C:\Meine Bilder\Firmenlogo.gif")</pre>
<p>Wenn die aktuelle Breite und/oder Höhe des Bildes beibehalten werden soll, müssen die Optionen W und/oder H weggelassen werden. Ansonsten wird das Bild auf die angegebene Breite und/oder Höhe skaliert (diese Breite und Höhe bestimmen auch, welches Symbol aus einer ICO-Datei mit mehreren Symbolen geladen wird). Um das Bild unter Beibehaltung des Seitenverhältnisses zu verkleinern oder zu vergrößern, musst du -1 bei einer Abmessung und eine positive Zahl bei der anderen Abmessung angeben. Zum Beispiel würde <code>w200 h-1</code> das Bild 200 Pixel breit machen und dessen Höhe automatisch setzen. Kann das Bild nicht geladen oder angezeigt werden (z. B. Datei nicht gefunden), wird das Steuerelement leer bleiben und dessen Breite und Höhe auf 0 gesetzt.</p>
<p>Picture-Steuerelemente unterstützen das <a href="../objects/GuiOnEvent.htm#Click">Click</a>- und <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>-Ereignis, unter derselben <a href="#SS_NOTIFY">Einschränkung</a> wie bei Text-Steuerelementen.</p>
<p>Wenn ein Bild als Hintergrund eines anderen Steuerelements dienen soll, muss es normalerweise vor diesen Steuerelementen eingefügt werden. Sind diese Steuerelemente allerdings eingabefähig und hat das Bild den <a href="#SS_NOTIFY">SS_NOTIFY-Style</a> (der automatisch via <a href="../objects/GuiOnEvent.htm">OnEvent</a> hinzugefügt wird), sollte das Bild erst nach diesen Steuerelementen erstellt und <code>0x4000000</code> (WS_CLIPSIBLINGS) in <em>Optionen</em> von Picture eingefügt werden. Durch diesen Trick kann das Bild auch der Hintergrund eines <a href="#Tab">Tab</a>- oder <a href="ListView.htm">ListView</a>-Steuerelements sein.</p>
<p><strong>Symbole, Cursor und animierte Cursor</strong>: Symbole und Cursor können von folgenden Dateitypen geladen werden: ICO, CUR, ANI, EXE, DLL, CPL, SCR und andere Typen, die Symbolressourcen enthalten. Wenn anstelle der ersten Symbolgruppe eine andere verwendet werden soll, muss in <em>Optionen</em> das Wort Icon und danach die Gruppennummer eingefügt werden. Das folgende Beispiel zeigt, wie das Standardsymbol aus der zweiten Symbolgruppe verwendet werden kann: <code>Gui.Add("Picture", "Icon2", "C:\Meine Anwendung.exe")</code>.</p>
<p id="PicAltSubmit">Das Wort AltSubmit in <em>Optionen</em> teilt dem Programm mit, die Microsoft-Datei GDIPlus.dll zu verwenden, um das Bild zu laden. Das könnte dazu führen, dass GIF-, BMP- und Symbolbilder anders dargestellt werden. Zum Beispiel könnte damit eine GIF-Datei mit transparentem Hintergrund als transparente Bitmap geladen werden, bei der die Option <a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> wirksam gemacht werden kann (aber Symbole unterstützen eine Transparenz ohne AltSubmit). Wenn GDIPlus nicht verfügbar ist (siehe nächsten Absatz), wird AltSubmit ignoriert und das Bild mit der normalen Methode geladen.</p>
<p>Alle Betriebssysteme unterstützen GIF, JPG, BMP, ICO, CUR und ANI. In Windows XP (oder höher) werden zusätzliche Bildformate wie PNG, TIF, Exif, WMF und EMF unterstützt. Betriebssysteme älter als XP können solche Formate auch unterstützen, wenn man die freie GDIPlus.dll von Microsoft in den Ordner von AutoHotkey.exe kopiert (im Falle eines <a href="../Scripts.htm#ahk2exe">kompilierten Skripts</a> muss die DLL-Datei in den Ordner des Skripts kopiert werden). Die DLL kann durch Suchen folgender Begriffe auf <a href="http://www.microsoft.com">www.microsoft.com</a> heruntergeladen werden: gdi redistributable</p>
<p><strong>Animierte GIF-Bilder</strong>: Animierte GIF-Dateien werden zwar in einem Picture-Steuerelement angezeigt, aber nicht animiert. Um dieses Problem zu lösen, verwende die AniGIF.dll (frei verfügbar, solange sie nicht kommerziell genutzt wird). Siehe dazu "<a href="http://www.autohotkey.com/forum/topic19264.html">Show animated Gifs in your GUI</a>".</p>
<p>Man kann ein <a href="../misc/ImageHandles.htm">Bitmap- oder Symbol-Handle</a> anstelle eines Dateinamens verwenden. Zum Beispiel <code>HBITMAP:%handle%</code>.</p>
<h2 id="Button">Button</h2>
<p>Beschreibung: Ein Button, der gedrückt werden kann, um eine Aktion auszulösen. In diesem Fall ist der letzte Parameter der Name des Buttons (wird auf dem Button selbst angezeigt), der Zeilenumbruchszeichen (`n) enthalten kann, um neue Zeilen zu beginnen. Beispiel:</p>
<pre>MeinBtn := Gui.Add("Button", "Default", "OK")
MeinBtn.OnEvent("Click", "MeinBtn_Click")  <em>; Ruft MeinBtn_Click beim Anklicken auf.</em>
</pre>
<p>Das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis wird ausgelöst, wann immer der Benutzer den Button anklickt, oder LEERTASTE oder ENTER drückt, während der Button den Fokus hat.</p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen.</p>
<p id="DefaultButton">Das obige Beispiel enthält das Wort <strong>Default</strong> in <em>Optionen</em>, um das "OK" zum Standard-Button zu machen. Das <a href="#WantReturn">Click-Ereignis</a> des Standard-Buttons wird immer dann ausgelöst, wenn der Benutzer die ENTER-Taste drückt, sofern der Tastaturfokus nicht auf einem anderen Button oder auf ein mehrzeiliges Edit-Steuerelement mit aktiviertem <a href="../objects/GuiOnEvent.htm#Click">WantReturn</a>-Style liegt. Wenn der Standard-Button später ein anderer Button sein soll, muss wie folgt vorgegangen werden, um beispielsweise den Cancel-Button als Standard zu definieren: <code>Gui.<a href="../objects/Gui.htm#Control">Control</a>["Cancel"].<a href="../objects/GuiControl.htm#Opt">Opt</a>("+Default")</code>. Wenn das Fenster später keinen Standard-Button mehr haben soll, muss diese Eigenschaft wie folgt entfernt werden: <code>Gui.Control["OK"].Opt("-default")</code>.</p>
<p>Enthält der Name des Buttons ein Und-Zeichen (&amp;), wird der nachfolgende Buchstabe unterstrichen. Zum Beispiel:</p>
<pre>Gui.Add("Button",, "&amp;Pause")</pre>
<p>Im obigen Beispiel wird der Buchstabe P unterstrichen, wodurch der Benutzer ALT+P als <a href="GuiCreate.htm#ShortcutKey">Tastenkürzel</a> verwenden kann. Soll dieses Und-Zeichen stattdessen literal angezeigt werden, verwende zwei aufeinanderfolgende Und-Zeichen (&amp;&amp;).</p>

<p>Bekannte Einschränkung: Bestimmte Desktop-Themes können den Text eines Buttons nicht ordnungsgemäß anzeigen. Wenn dies der Fall ist, versuche <code>-Wrap</code> in den Optionen des Buttons einzufügen. Dadurch wird allerdings auch verhindert, dass der Text mehr als eine Zeile haben kann.</p>

<h2 id="Checkbox">CheckBox</h2>
<p>Beschreibung: Ein Kontrollkästchen, in der eine Markierung gesetzt oder entfernt werden kann, das An/Aus, Ja/Nein und so weiter repräsentieren soll. Beispiel:</p>
<pre>Gui.Add("Checkbox", "vSendenAnRechnungsadresse", "An Rechnungsadresse senden?")</pre>
<p>Der letzte Parameter ist eine Beschriftung neben der CheckBox, was typischerweise als Abfrage dient oder die Funktionsweise der CheckBox näher beschreibt. Es kann Zeilenumbruchszeichen (`n) enthalten, um neue Zeilen beginnen zu können. Enthält <em>Optionen</em> eine Breite (W), aber nicht <a href="../objects/Gui.htm#R">Zeilen (R)</a> oder Höhe (H), werden Textzeilen bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt eine 1 für markiert zurück, 0 für nicht markiert, und -1 für grau/unbestimmt.</p>
<p>Wenn das Wort <strong>Check3</strong> in <em>Optionen</em> angegeben ist, wird der dritte "unbestimmte" Zustand aktiviert, der ein graues Häkchen oder grauen Quadrat anzeigt (dieser unbestimmte Zustand zeigt an, dass die Markierung der CheckBox weder gesetzt noch entfernt worden ist). Wenn das Wort <strong>Checked</strong> oder <strong>CheckedGray</strong> in <em>Optionen</em> angegeben ist, wird der Zustand der CheckBox entweder markiert oder unbestimmt sein. Direkt nach dem Wort Checked kann optional eine 0, 1 oder -1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall wäre <code>Checked</code> das gleiche wie <code>Checked%VarMitEins%</code>.</p>
<p>Immer wenn die CheckBox angeklickt wird, erfolgt automatisch ein zyklischer Wechsel zwischen ihren zwei oder drei möglichen Zuständen, und löst dann das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis, damit das Skript sofort auf die Benutzereingabe reagieren kann.</p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen. Dieser Style wird standardmäßig nicht angewendet, um zu verhindern, dass schnelle Klicks den Zustand des Häkchens ändern (z. B. wenn der Benutzer es doppelt anklickt, um von 'nicht markiert' auf 'markiert' zu schalten und dann auf unbestimmt).</p>
<p>Bekannte Einschränkung: Bestimmte Desktop-Themes können den Text eines Buttons nicht ordnungsgemäß anzeigen. Wenn dies der Fall ist, versuche <code>-Wrap</code> in den Optionen des Buttons einzufügen. Dadurch wird allerdings auch verhindert, dass der Text mehr als eine Zeile haben kann.</p>

<h2 id="Radio">Radio</h2>
<p>Beschreibung: Ein Optionsfeld in Form eines kleinen leeren Kreises, in der eine Markierung gesetzt (An) oder entfernt (Aus) werden kann. Beispiel:</p>
<pre>Gui.Add("Radio", "vMeineRadioGruppe", "Warten, bis alle Artikel auf Lager sind, bevor sie abgeschickt werden.")</pre>
<p>Solche Steuerelemente befinden sich üblicherweise in <em>Radiogruppen</em>, die aus 2 oder mehr Radio-Buttons bestehen. Klickt der Benutzer einen Radio-Button an, um ihn zu aktivieren, werden alle anderen Radio-Buttons in der Gruppe automatisch deaktiviert (der Benutzer kann außerdem mit den Pfeiltasten innerhalb einer Gruppe navigieren). Eine Radiogruppe wird automatisch um alle nacheinander hinzugefügten Radio-Buttons erstellt. Eine neue Gruppe kann begonnen werden, wenn das Wort <strong>Group</strong> in den <em>Optionen</em> des ersten Radio-Buttons angegeben wird - oder dazwischen einfach ein anderes Steuerelement eingefügt wird, weil das eine neue Gruppe automatisch beginnen würde.</p>
<p>Der letzte Parameter ist die Bezeichnung auf der rechten Seite des Radio-Buttons. Diese Bezeichnung dient üblicherweise als Eingabeaufforderung oder Funktionsbeschreibung des Steuerelements, und kann Zeilenumbrüche (`n) enthalten, um neue Zeilen beginnen zu können. Enthält <em>Optionen</em> eine Breite (W), aber nicht Zeilen (R) oder Höhe (H), werden Textzeilen bei Bedarf umbrochen und die Höhe des Steuerelements automatisch gesetzt.</p>
<p>Wenn das Wort <strong>Checked</strong> in <em>Optionen</em> angegeben ist, wird der Button zu Beginn aktiviert sein. Direkt nach dem Wort Checked kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen: 0 für nicht markiert und 1 für markiert. In diesem Fall wäre <code>Checked</code> das gleiche wie <code>Checked%VarMitEins%</code>.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt eine 1 für 'markiert' und eine 0 für 'nicht markiert' zurück. Um stattdessen die Positionsnummer der markierten Radio-Option innerhalb einer Radiogruppe zu ermitteln, muss einer dieser Radio-Buttons <a href="../objects/GuiControl.htm#Name">benannt</a> und dann <a href="../objects/Gui.htm#submit-radio">Gui.Submit</a> benutzt werden.</p>
<p>Das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis wird ausgelöst, wann immer der Benutzer ein Button markiert. Im Gegensatz zum Einzelvariablenmodus, der im vorherigen Abschnitt beschrieben wurde, muss die Callback-Funktion des Ereignisses für jeden Radio-Button in einer Gruppe registriert werden, wo sie aufgerufen werden soll. Auf diese Weise kann je nach Bedarf das Anklicken von bestimmten Radio-Buttons ignoriert werden. </p>
<p>Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt. Da diese Ereignisse nur ausgelöst werden, wenn das Steuerelement den BS_NOTIFY-Style (0x4000) hat, wird <a href="../objects/GuiOnEvent.htm">OnEvent</a> diesen Style automatisch hinzufügen.</p>
<p>Bekannte Einschränkung: Bestimmte Desktop-Themes können den Text eines Buttons nicht ordnungsgemäß anzeigen. Wenn dies der Fall ist, versuche <code>-Wrap</code> in den Optionen des Buttons einzufügen. Dadurch wird allerdings auch verhindert, dass der Text mehr als eine Zeile haben kann.</p>

<span id="DDL"></span><h2 id="DropDownList">DropDownList (oder DDL)</h2>
<p>Beschreibung: Eine Liste mit Auswahlmöglichkeiten, die durch Drücken eines kleinen Buttons angezeigt werden kann. Hierbei ist der letzte Parameter eine mit senkrechten Strichen getrennte Liste wie z. B. <code>Auswahl1|Auswahl2|Auswahl3</code> oder ein Array wie z. B. <code>["Auswahl1", "Auswahl2", "Auswahl3"]</code>. Beispiel:</p>
<pre>Gui.Add("DropDownList", "vFarbauswahl", "Schwarz|Weiß|Rot|Grün|Blau")
</pre>
<p>Wenn einer der Elemente zu Beginn vorab ausgewählt sein soll, müssen zwei senkrechte Striche nach diesem Element erfolgen (z. B. <code>Rot|Grün||Blau</code>). Alternativ kann man auch das Wort <strong>Choose</strong> in <em>Optionen</em> angeben, unmittelbar gefolgt von der Nummer des Elements, um es vorab auszuwählen. Zum Beispiel würde <code>Choose5</code> das fünfte Element vorab auswählen (wie bei den anderen Optionen auch, kann das eine Variable sein, wie z. B. <code>Choose%Var%</code>). Nachdem das Steuerelement erstellt wurde, kann man <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> benutzen, um die Auswahl zu ändern, und <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a>, um Einträge in der Liste hinzuzufügen oder zu entfernen.</p>
<p>Wenn das Wort <strong>Uppercase</strong> oder <strong>Lowercase</strong> in <em>Optionen</em> angegeben ist, werden alle Elemente in der Liste automatisch in Groß- oder Kleinbuchstaben umgewandelt. Wenn das Wort <strong>Sort</strong> angegeben ist, werden die Inhalte der Liste automatisch in alphabetischer Reihenfolge sortiert (das hat auch Einfluss auf Elemente, die danach per <a href="../objects/GuiControl.htm#Add">GuiCtrl.Add</a> hinzugefügt werden). Die Sort-Option aktiviert zudem immer eine inkrementelle Suche beim Aufklappen der Liste. Auf diese Weise kann ein Element ausgewählt werden, während die ersten Zeichen des Namens eingegeben werden.</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> benutzt, ist der Rückgabewert die Positionsnummer des aktuell ausgewählten Elements (das erste Element ist 1, das Zweite ist 2 und so weiter), oder 0, wenn keines ausgewählt ist. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text abgerufen werden.</p>
<p>Immer wenn der Benutzer ein neues Element auswählt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>
<p>Verwende die <a href="../objects/Gui.htm#R">R- oder H-Option</a>, um die Höhe der Aufklappliste zu bestimmen. Zum Beispiel würde <code>R5</code> die Liste 5 Zeilen hoch machen, während <code>H400</code> die Gesamthöhe des Auswahlfeldes und der Liste auf 400 Pixel setzen würde. Sind R und H nicht vorhanden, erweitert sich die Liste automatisch, um die verfügbare Desktophöhe des Benutzers sinvoll zu nutzen (allerdings werden Betriebssysteme älter als Windows XP standardmäßig 3 Zeilen anzeigen).</p>
<p id="ComboBoxHeight">Um die Höhe des Auswahlfeldes oder der Listeneinträge zu ändern, verwende die <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb775911">CB_SETITEMHEIGHT</a>-Meldung wie folgt:</p>
<pre>Gui := GuiCreate()
DDL := Gui.Add("DDL", "vcbx w200", "Eins||Zwei")
<em>; CB_SETITEMHEIGHT = 0x153</em>
PostMessage(0x153, -1, 50,, "ahk_id " DDL.Hwnd)  <em>; Setzt die Höhe des Auswahlfeldes.</em>
PostMessage(0x153, 0, 50,, "ahk_id " DDL.Hwnd)  <em>; Setzt die Höhe der Listeneinträge.</em>
Gui.Show("h70")</pre>
<p>Das Trennzeichen zwischen den Feldern muss nicht zwingend ein senkrechter Strich sein. Zum Beispiel kann das Trennzeichen per <code>Gui.Opt("+<a href="GuiCreate.htm#Delimiter">Delimiter</a>`n")</code> mit einem Zeilenumbruchszeichen und per <code>Gui.Opt("+DelimiterTab")</code> mit einem Tabulatorzeichen (`t) ersetzt werden.</p>

<h2 id="ComboBox">ComboBox</h2>
<p>Beschreibung: Ein Kombinationsfeld, ähnlich wie die Dropdownliste, aber mit dem Unterschied, dass alternativ auch Text eingegeben werden kann. Beispiel:</p>
<pre>Gui.Add("ComboBox", "vFarbauswahl", "Rot|Grün|Blau|Schwarz|Weiß")
</pre>
<p>Neben den bereits oben genannten Optionen kann auch das Wort <strong>Limit</strong> in <em>Optionen</em> angegeben werden, um die Benutzereingabe auf die sichtbare Breite des Eingabefeldes von der ComboBox zu beschränken. Zudem kann das Wort <strong>Simple</strong> eingefügt werden, um die ComboBox dazu zu bringen, sich so zu verhalten, als wäre es ein Eingabefeld mit einer ListBox darunter.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Positionsnummer des aktuell ausgewählten Elements zurück (das erste Element ist 1, das Zweite ist 2 und so weiter), oder 0, wenn das Steuerelement einen Text enthält, der mit keinem Listenelement übereinstimmt. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text im Eingabefeld der ComboBox abgerufen werden. <a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert den Text, es sei denn, das Wort <strong>AltSubmit</strong> kommt in den <em>Optionen</em> des Steuerelements vor und der Text stimmt mit einem Listenelement überein, dann speichert es die Positionsnummer des Elements.</p>
<p>Immer wenn der Benutzer ein neues Element auswählt oder den Text des Steuerelements ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>

<h2 id="ListBox">ListBox</h2>
<p>Beschreibung: Ein relativ hohes Listenfeld, das eine Liste mit Auswahlmöglichkeiten enthält, die markiert werden können. Hierbei ist der letzte Parameter eine mit senkrechten Strichen getrennte Liste wie z. B. <code>Auswahl1|Auswahl2|Auswahl3</code> oder ein Array wie z. B. <code>["Auswahl1", "Auswahl2", "Auswahl3"]</code>. Beispiel:</p>
<pre>Gui.Add("ListBox", "vFarbauswahl", "Rot|Grün|Blau|Schwarz|Weiß")
</pre>
<p id="ChooseLB">Wenn ein oder mehrere Elemente zu Beginn vorab ausgewählt sein sollen, müssen zwei senkrechte Striche nach jedem Element erfolgen (bei mehreren Elementen ist die <a href="#ListBoxMulti">Multi</a>-Option notwendig). Alternativ kann man auch das Wort <strong>Choose</strong> in <em>Optionen</em> angeben, unmittelbar gefolgt von der Nummer des Elements, um es vorab auszuwählen. Zum Beispiel würde <code>Choose5</code> das fünfte Element vorab auswählen. Nachdem das Steuerelement erstellt wurde, kann man <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> benutzen, um die Auswahl zu ändern, und <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a>, um Einträge in der Liste hinzuzufügen oder zu entfernen.</p>
<p>Wenn die <a href="#ListBoxMulti">Multi</a>-Option fehlt, wird <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> die Positionsnummer des aktuell ausgewählten Elements zurückgeben (das erste Element ist 1, das Zweite ist 2 und so weiter), oder 0, wenn keines ausgewählt ist. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text des ausgewählten Elements abgerufen werden. Wenn das Wort <a href="#ListBoxMulti">Multi</a> in den Optionen vorhanden ist, wird <a href="../objects/GuiControl.htm#Value">Value</a> und <a href="../objects/GuiControl.htm#Text">Text</a> nicht ein einzelnes Element, sondern ein Array mit Elementen zurückgeben.</p>
<p><a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert standardmäßig <a href="../objects/GuiControl.htm#Text">Text</a>, aber wenn das Wort <strong>AltSubmit</strong> in den <em>Optionen</em> des Steuerelements vorkommt, speichert es <a href="../objects/GuiControl.htm#Value">Value</a>.</p>
<p>Immer wenn der Benutzer ein oder mehrere Elemente aus- oder abwählt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>, <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>
<p id="LBRedraw">Man kann die Performance beim Einfügen sehr vieler Elemente verbessern, wenn man vor der Operation <code>MeineListBox.Opt("-Redraw")</code> verwendet, und danach <code>MeineListBox.Opt("+Redraw")</code>.</p>
<h3>ListBox-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseLB">oben</a>.</p>
<p id="ListBoxMulti"><strong>Multi</strong>: Ermöglicht die Auswahl mehrerer Elemente per UMSCHALT+KLICK und STRG+KLICK (wenn die Elemente ohne Modifkatoren auswählbar sein sollen, muss stattdessen die <a href="../misc/Styles.htm#LBS_MULTIPLESEL">Nummer 8</a> in den Optionen angegeben werden). In diesem Fall gibt <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> ein Array mit ausgewählten Positionsnummern zurück. Zum Beispiel würde <code>[1, 2, 3]</code> kennzeichnen, dass die ersten drei Einträge ausgewählt sind. Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen ein Array mit ausgewählten Texten abgerufen werden. Um bestimmte Elemente aus dem Array zu extrahieren, benutze <code>MeineListBox.Text[1]</code> (1 wäre das erste Element) oder eine <a href="For.htm">For-Schleife</a> wie folgt:</p>
<pre>For Index, Feld in MeineListBox.Text
{
    MsgBox Auswahlnummer %Index% ist %Feld%.
}</pre>
<p><strong>ReadOnly</strong>: Hindert die Elemente daran, beim Auswählen farblich hervorgehoben zu werden (aber <a href="../objects/Gui.htm#Submit">&gt;Gui.Submit</a>, <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> oder <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> wird weiterhin das ausgewählte Element zurückgeben).</p>
<p><strong>Sort</strong>: Sortiert den Inhalt der Liste automatisch in alphabetischer Reihenfolge (das hat auch Einfluss auf Elemente, die danach per <a href="../objects/GuiControl.htm#Add">GuiCtrl.Add</a> hinzugefügt werden). Die Sort-Option aktiviert zudem immer eine inkrementelle Suche beim Aufklappen der Liste. Das heißt, dass ein Element ausgewählt wird, sobald die ersten Zeichen des Namens eingegeben werden.</p>
<p><strong>Tn</strong>: Mit dem Buchstaben T können Tabstopps gesetzt werden, um den Text in Spalten aufzuteilen. Ist der Buchstabe T nicht vorhanden, erfolgen die Tabstopps bei je 32 Dialogeinheiten (DLU) (die Breite jeder Dialogeinheit ist vom Betriebssystem abhängig). Ist der Buchstabe T nur einmal vorhanden, werden die Tabstopps auf je <strong>n</strong> Einheiten über die gesamte Breite des Steuerelements verteilt. Zum Beispiel würde <code>Gui.Add("ListBox", "vMeineListBox t64")</code> den Standardabstand zwischen den Tabstopps verdoppeln. Benutzerdefinierte Tabstopps können durch die mehrmalige Angabe des Buchstaben T wie folgt angegeben werden: <code>Gui.Add("ListBox", "vMeineListBox t8 t16 t32 t64 t128")</code>. Ein Tabstopp gilt jeweils für eine absolute Spaltenposition in der Liste, bis zu einem Maximum von 50 Tabstopps.</p>
<p><strong>0x100</strong>: Füge 0x100 in Optionen ein, um den Style LBS_NOINTEGRALHEIGHT zu aktivieren. Das zwingt die ListBox dazu, die angegebene Höhe zu verwenden. Ist diese Option nicht vorhanden, wird die Höhe automatisch an die letzte Zeile angepasst, wenn sie nur teilweise sichtbar ist. Zudem verhindert diese Option, dass die ListBox beim Ändern der Schrift kleiner wird.</p>
<p>Um die Anzahl der Textzeilen zu bestimmen (oder die Höhe und Breite), siehe <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<h2>ListView und TreeView</h2>
<p>Siehe separate Seiten für <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>.</p>

<h2 id="Link">Link</h2>
<p>Beschreibung: Ein Text-Steuerelement, das Links ähnlich denen in einem Webbrowser enthalten kann. Umschließe den Linktext innerhalb des Steuerelementtextes mit <code>&lt;A&gt;</code> und <code>&lt;/A&gt;</code>, um einen klickbaren Link zu erzeugen. Obwohl es wie HTML aussieht, unterstützen Link-Steuerelemente nur den Start-Tag <code>&lt;A&gt;</code> (optional mit einem ID- und/oder HREF-Attribut) und den End-Tag <code>&lt;/A&gt;</code>. Zum Beispiel:</p>
<pre>Gui.Add("Link",, 'Dies ist ein &lt;a href="https://autohotkey.com"&gt;Link&lt;/a&gt;')</pre>
<p>Der Text im oberen Beispiel wird umgewandelt zu <span style="background-color: #F0F0F0; color: black">Dies ist ein <a href="https://autohotkey.com">Link</a></span>.</p>

<p>Immer wenn der Benutzer ein Link anklickt, wird das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-Ereignis ausgelöst. Wenn das Steuerelement keine Click-Callback-Funktion hat (die mit <a href="../objects/GuiOnEvent.htm">OnEvent</a> registriert wurde), wird Link's HREF automatisch ausgeführt, als hätte man es an die <a href="Run.htm">Run</a>-Funktion übergeben.</p>
<pre>Gui := GuiCreate()
Link := Gui.Add("Link",
    , 'Klicke, um &lt;a href="notepad" id="notepad"&gt;Notepad&lt;/a&gt; auszuführen oder die '
    . '&lt;a id="help" href="https://autohotkey.com/docs/"&gt;Online-Hilfe&lt;/a&gt; zu öffnen.')
Link.OnEvent("Click", "Link_Click")
Link_Click(Ctrl, ID, HREF)
{
    if MsgBox("ID: " ID "`nHREF: " HREF "`n`nSoll dieser Link ausgeführt werden?",, "y/n") = "yes"
        Run(HREF)
}
Gui.Show()</pre>

<h2 id="Hotkey">Hotkey</h2>
<p>Beschreibung: Ein Feld, das zwar wie ein einzeiliges Edit-Steuerelement aussieht, aber stattdessen eine Tastenkombination akzeptiert, die der Benutzer gedrückt hat. Drückt der Benutzer beispielsweise STRG+ALT+C auf einer deutschen Tastatur, würde das Feld "STRG + ALT + C" anzeigen. Beispiel:</p>
<pre>Gui.Add("Hotkey", "vGewählterHotkey")</pre>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Modifikatoren und den Namen des Hotkeys zurück, die kompatibel mit dem <a href="Hotkey.htm">Hotkey</a>-Befehl sind. Beispiele: <code>^!C</code>, <code>+!Home</code>, <code>+^Down</code>, <code>^Numpad1</code>, <code>!NumpadEnd</code>. Wenn kein Hotkey im Steuerelement vorhanden ist, ist der Wert leer. Hinweis: Einige Tasten zeigen dasselbe an, obwohl sie als unterschiedliche Namen abgerufen werden. Zum Beispiel wird sowohl <code>^Numpad7</code> als auch <code>^NumpadHome</code> als "STRG + 7 (ZEHNERTASTATUR)" angezeigt.</p>
<p>Standardmäßig beginnt das Steuerelement, ohne dass ein Hotkey angegeben ist. Wenn stattdessen ein Standard-Hotkey vorkommen soll, müssen im letzten Parameter seine Modifikatoren und sein Name angegeben werden. Zum Beispiel: <code>Gui.Add("Hotkey", "vGewählterHotkey", "^!p")</code><br>
Es werden nur die Modifikatortasten ^ (STRG), ! (ALT) und + (UMSCHALT) unterstützt. Siehe <a href="../KeyList.htm">Tastenliste</a> für weitere Tasten.</p>
<p>Immer wenn der Benutzer den Inhalt des Steuerelements ändert (durch Drücken einer Taste), wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Hinweis: Das Ereignis wird auch dann ausgelöst, wenn ein unvollständiger Hotkey vorhanden ist. Wenn der Benutzer beispielsweise die STRG-Taste gedrückt hält, wird das Ereignis ausgelöst und <a href="../objects/GuiControl.htm#Value">Value</a> nur ein Zirkumflex (^) zurückgeben. Beendet der Benutzer dann die Tastenkombination, wird das Ereignis nochmals ausgelöst und <a href="../objects/GuiControl.htm#Value">Value</a> den vollständigen Hotkey zurückgeben.</p>
<p>Wenn die Benutzereingabe auf bestimmte Hotkeys beschränkt werden soll, muss das Wort <strong>Limit</strong> eingefügt werden, gefolgt von der Summe folgender Zahlen:</p>
<p>1: Ignoriert Tasten ohne Modifikatoren<br>
  2: Ignoriert UMSCHALT+Tasten <br>
4: Ignoriert STRG+Tasten <br>
8: Ignoriert ALT+Tasten<br>
16: Ignoriert UMSCHALT+STRG+Tasten <br>
32: UMSCHALT+ALT+Tasten <br>
64: Dieser Wert wird nicht unterstützt (verhält sich falsch)<br>
128: Ignoriert UMSCHALT+STRG+ALT+Tasten</p>
<p>Zum Beispiel würde <code>Limit1</code> verhindern, dass Hotkeys ohne Modifikatoren wie Buchstaben und Zahlen eingegeben werden können, und <code>Limit15</code> würde mindestens zwei Modifikatortasten benötigen. Gibt der Benutzer eine verbotene Modifikator-Kombination ein, wird sie automatisch und sichtbar mit "STRG + ALT" ersetzt.</p>
<p>Das Hotkey-Steuerelement hat nur begrenzte Möglichkeiten. Zum Beispiel unterstützt es keine Maus/Joystick-Hotkeys oder Windows-Tasten (LWin und RWin). Dieses Problem kann beispielsweise umgangen werden, wenn dem Benutzer eine oder mehrere <a href="#Checkbox">CheckBoxen</a> bereitgestellt werden, die zusätzliche Modifikatoren wie die WIN-Taste als Auswahlmöglichkeit anbieten.</p>

<h2 id="DateTime">DateTime</h2>
<p>Beschreibung: Ein Feld, das zwar wie ein einzeiliges Edit-Steuerelement aussieht, aber stattdessen nur die Eingabe von Datum und/oder Zeit akzeptiert. Ein ausklappbarer Kalender ist ebenfalls vorhanden. Beispiel:</p>
<pre>Gui.Add("DateTime", "vMeinDateTime", "LongDate")
</pre>
<p>Der letzte Parameter ist eine formatierte Zeichenkette, wie unten beschrieben.</p>
<div class="methodShort" id="DateTimeFormat">
<h3>SetFormat</h3>
<p>Setzt das Anzeigeformat eines DateTime-Steuerelements.</p>
<pre class="Syntax">DateTime.<span class="func">SetFormat</span>(<span class="optional">Format</span>)</pre>
<dl><dt>Format</dt><dd>
<p>Dies kann folgendes sein:</p>
<p><strong>ShortDate</strong> (oder Parameter leer-/weglassen): Verwendet das kurze Datumsformat, abhängig vom aktuellen Gebietsschema des Benutzers. Bei einigen Gebietsschemen könnte das wie folgt aussehen: 17.04.2011.</p>
<p><strong>LongDate</strong>: Verwendet das lange Datumsformat, abhängig vom aktuellen Gebietsschema des Benutzers. Bei einigen Gebietsschemen könnte das wie folgt aussehen: Sonntag, 17. April 2011.</p>
<p><strong>Time</strong>: Zeigt nur die Zeit an, abhängig vom aktuellen Gebietsschema des Benutzers. Obwohl das Datum nicht angezeigt wird, ist es dennoch im Steuerelement vorhanden und wird zusammen mit der Zeit im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format abgerufen.</p>
<p><strong>(benutzerdefiniertes Format)</strong>: Gib eine beliebige Kombination von <a href="FormatTime.htm">Datum- und Zeitformaten</a> an. Zum Beispiel würde <code>d.M.yy HH:mm</code> wie 17.4.11 12:19 aussehen. Ebenso würde <code>dddd MMMM d, yyyy hh:mm:ss</code> wie Sonntag April 17, 2011 12:22:1 aussehen. Buchstaben und Zahlen, die literal angezeigt werden sollen, müssen wie folgt in Hochkommas gesetzt werden: <code>'Datum:' dd.MM.yy 'Zeit:' hh:mm:ss tt</code>. Zeichen, die nicht alphanumerisch sind, wie Leerzeichen, Tabulatoren, Schrägstriche, Doppelpunkte, Kommas und andere Satzzeichen, müssen hingegen nicht von Hochkommas umschlossen werden. Die Ausnahme ist das Hochkomma selbst: Um dieses Zeichen literal darstellen zu können, müssen vier aufeinanderfolgende Hochkommas ('''') verwendet werden, oder nur zwei, wenn das Hochkomma sich bereits innerhalb von zwei äußeren Hochkommas befindet.</p>
</dd></dl>
</div>
<h3>DateTime-Verwendung</h3>
<p id="ChooseDT">Wenn anstelle des heutigen Datums ein anderes vorab ausgewählt sein soll, muss in <em>Optionen</em> das Wort <strong>Choose</strong> eingefügt werden, unmittelbar gefolgt von einem Datum im YYYYMMDD-Format. Zum Beispiel würde <code>Choose20110417</code> den 17. April 2011 vorab auswählen (wie bei den anderen Optionen auch, kann das eine Variable sein, wie z. B. <code>Choose%Var%</code>). Wenn kein Datum ausgewählt sein soll, verwende <strong>ChooseNone</strong>. Zudem erstellt <em>ChooseNone</em> eine CheckBox innerhalb des Steuerelements, die immer dann nicht markiert ist, wenn das Steuerelement kein Datum hat. Sobald das Steuerelement kein Datum hat, ermittelt <a href="../objects/Gui.htm#Submit">Gui.Submit</a> und <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> einen leeren Wert (leere Zeichenkette).</p>
<p>Die Tageszeit kann optional auch vorhanden sein. Allerdings muss sich davor immer ein Datum befinden, wenn es im Steuerelement gesetzt oder abgerufen wird. Das Format des Zeitbereichs ist HH24MISS (Stunden, Minuten, Sekunden), bei dem HH24 im 24-Stunden-Format angegeben wird. Somit würde eine vollständige Datum-Zeit-Zeichenkette das Format <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> aufweisen.</p>
<p>Bei Datumsangaben im YYYYMMDDHH24MISS-Format muss nur der führende Teil vorhanden sein. Alle übrigen Elemente, die ausgelassen worden sind, werden mit folgenden Standardwerten ersetzt:<br>
MM: Monat 01<br>
DD: Tag 01<br>
HH24: Stunde 00<br>

MI: Minute 00<br>
SS: Sekunde 00</p>
<p>Innerhalb des ausklappbaren Kalenders kann man den Heute-Text am unteren Ende anklicken, um das heutige Datum auswählen zu können. Darüber hinaus ist das Jahr und der Monatsname anklickbar, das eine einfache Navigation zwischen den Monaten oder Jahren ermöglicht.</p>
<p>Navigation mit der Tastatur: Mit den Pfeiltasten NACH-OBEN / NACH-UNTEN, den Ziffernblocktasten + / - und den Tasten POS1 / ENDE können die Werte im Steuerelement erhöht oder verringert werden. Verwende die Pfeiltasten NACH-LINKS und NACH-RECHTS, um von Feld zu Feld zu schalten. Innerhalb des ausklappbaren Kalenders können die Pfeiltasten verwendet werden, um von Tag zu Tag zuschalten; BILD-NACH-OBEN / BILD-NACH-UNTEN, um ein Monat vor- / zurückzuschalten; STRG+BILD-NACH-OBEN / STRG+BILD-NACH-UNTEN, um ein Jahr vor- / zurückzuschalten; und POS1 / ENDE, um den ersten / letzten Tag des Monats auszuwählen.</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> verwendet, ist der Rückgabewert das ausgewählte Datum/Uhrzeit im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Sowohl das Datum als auch die Zeit sind vorhanden, egal ob sie tatsächlich im Steuerelement sichtbar sind oder nicht.</p>
<p>Immer wenn der Benutzer das Datum oder die Uhrzeit ändert, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst. Die Ereignisse <a href="../objects/GuiOnEvent.htm#Focus">Focus</a> und <a href="../objects/GuiOnEvent.htm#LoseFocus">LoseFocus</a> werden auch unterstützt.</p>
<h3>DateTime-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseDT">oben</a>.</p>
<p><strong>Range</strong>: Beschränkt die Datumsauswahl auf einem bestimmten Zeitraum. Nach dem Wort Range kann das minimale und maximale Datum im YYYYMMDD-Format angegeben werden (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range20050101-20050615</code> das Datum auf die ersten 5,5 Monaten des Jahres 2005 beschränken. Man kann entweder den Minimal- oder Maximalwert weglassen, um das Steuerelement uneingeschränkt in dieser Richtung navigieren zu können. Zum Beispiel würde <code>Range20010101</code> verhindern, dass ein Tag vor 2001 ausgewählt werden kann, und <code>Range-20091231</code> (Bindestrich davor) würde verhindern, dass ein Tag nach 2009 ausgewählt werden kann. Ist diese Option nicht vorhanden, kann jedes Datum zwischen den Jahren 1601 und 9999 ausgewählt werden. Die Tageszeit ist nicht einschränkbar.</p>
<p><strong>Right</strong>: Bewirkt, dass der Kalender auf der rechten statt auf der linken Seite des Steuerelements aufgeklappt wird.</p>
<p><strong>1</strong>: Wenn die Nummer 1 in <em>Optionen</em> angegeben ist, wird ein UpDown-Steuerelement auf der rechten Seite des Steuerelements bereitgestellt, um Datum-Zeit-Werte ändern zu können. Funktioniert nicht in Verbindung mit LongDate.</p>
<p id="ChooseNone"><strong>2</strong>: Wenn die Nummer 2 in <em>Optionen</em> angegeben ist, wird eine CheckBox innerhalb des Steuerelements bereitgestellt, die der Benutzer deaktivieren kann, um zu zeigen, dass kein Datum/Zeit ausgewählt ist. Diese Option kann nach Erstellen des Steuerelements nicht mehr geändert werden.</p>
<h2 id="MonthCal">MonthCal</h2>
<p>Beschreibung: Ein hohes und breites Steuerelement, das alle Tage des Monats im Kalenderformat anzeigt. Der Benutzer kann ein einzelnes Datum oder einen Datumsbereich auswählen. Beispiel:</p>
<pre>Gui.Add("MonthCal", "vMeinKalender")</pre>
<p>Wenn anstelle des heutigen Datums ein anderes vorab ausgewählt sein soll, muss im dritten Parameter ein Datum im YYYYMMDD-Format angegeben werden (z. B. <code>20050531</code>). Fügt man ein Bindestrich zwischen zwei Datumswerten ein, kann auch ein Datumsbereich vorab ausgewählt werden (z. B. <code>20050525-20050531</code>).</p>
<p>Es ist normalerweise am besten, bei MonthCal die Breite (W) und Höhe (H) wegzulassen, weil es seine Größe automatisch ändert, sodass genau ein Monat reinpasst. Wenn mehr als ein Monat vertikal angezeigt werden soll, muss <code>R2</code> oder höher in <em>Optionen</em> angegeben werden. Wenn mehr als ein Monat horizontal angezeigt werden soll, muss <code>W-2</code> oder höher angegeben werden. Diese Optionen können gleichzeitig vorhanden sein, um das Steuerelement in beide Richtungen zu erweitern.</p>
<p>Am unteren Ende des Steuerelements kann der Heute-Text angeklickt werden, um das heutige Datum auswählen zu können. Darüber hinaus ist das Jahr und der Monatsname anklickbar, das eine einfache Navigation zwischen den Monaten oder Jahren ermöglicht.</p>
<p>Im Gegensatz zum ausklappbaren Kalender von <a href="#DateTime">DateTime</a> wird die Tastaturnavigation in MonthCal generell nicht unterstützt.</p>
<p>Wenn man <a href="../objects/Gui.htm#Submit">Gui.Submit</a> oder <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> verwendet, ist der Rückgabewert das ausgewählte Datum im YYYYMMDD-Format (ohne die Uhrzeit). Ist dagegen die <a href="#MonthCalMulti">Mehrfachauswahl</a>-Option vorhanden, wird das minimale und maximale Datum mit einem Bindestrich dazwischen abgerufen (z. B. <code>20050101-20050108</code>). Wenn in einem Mehrfachauswahl-Kalender nur ein einziges Datum ausgewählt wird, sind beide Grenzwerte noch vorhanden, aber identisch. Mit <a href="StrSplit.htm">StrSplit</a> können die Datumswerte auseinander genommen werden. Zum Beispiel würde die folgende Anweisung das minimale Datum in Datum[1] und das maximale Datum in Datum[2] speichern: <code>Datum := StrSplit(MeinMonthCal.Value, "-")</code>.</p>
<p>Das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis wird ausgelöst, wenn: 1) der Benutzer die Auswahl ändert; oder 2) nur alle zwei Minuten, falls ein neuer Tag gekommen ist (dieses Verhalten ist eine Macke des Betriebssystems).</p>
<p>Werden die Datumwerte im YYYYMMDD-Format angegeben, können die Bereiche MM und/oder DD weggelassen werden - in diesem Fall werden sie als 1 angesehen. Zum Beispiel wäre <code>200205</code> dann 20020501, und <code>2005</code> dann 20050101.</p>
<h3>MonthCal-Optionen</h3>
<p id="MonthCalMulti"><strong>Multi</strong>: Mehrfachauswahl. Ermöglicht dem Benutzer, mit UMSCHALT+KLICK oder durch Ziehen der Maus angrenzende Datumswerte zu markieren (der Benutzer kann weiterhin ein einzelnes Datum auswählen). Diese Option kann entweder explizit angegeben werden oder wird automatisch wirksam, wenn ein Auswahlbereich beim Erstellen des Steuerelements angegeben wird. Zum Beispiel: <code>Gui.Add("MonthCal", "vMeinKalender", "20050101-20050108")</code>. Diese Option kann nach Erstellen des Steuerelements nicht mehr geändert werden.</p>
<p><strong>Range</strong>: Beschränkt die Datumsauswahl auf einem bestimmten Zeitraum. Nach dem Wort Range kann das minimale und maximale Datum im YYYYMMDD-Format angegeben werden (mit einem Bindestrich dazwischen). Zum Beispiel würde <code>Range20050101-20050615</code> die Auswahl auf die ersten 5,5 Monaten des Jahres 2005 beschränken. Man kann entweder den Minimal- oder Maximalwert weglassen, um das Steuerelement uneingeschränkt in dieser Richtung navigieren zu können. Zum Beispiel würde <code>Range20010101</code> verhindern, dass ein Tag vor 2001 ausgewählt werden kann, und <code>Range-20091231</code> (Bindestrich davor) würde verhindern, dass ein Tag nach 2009 ausgewählt werden kann. Ist diese Option nicht vorhanden, kann jedes Datum zwischen den Jahren 1601 und 9999 ausgewählt werden.</p>
<p><strong>4</strong>: Wenn die Nummer 4 in <em>Optionen</em> angegeben ist, wird auf der linken Seite jeder Tagesreihe die Wochennummern (1-52) angezeigt. Woche 1 ist als erste Woche definiert, die mindestens vier Tage enthält.</p>
<p><strong>8</strong>: Wenn die Nummer 8 in <em>Optionen</em> angegeben ist, wird das Einkreisen des heutigen Datums im Steuerelement verhindert.</p>
<p><strong>16</strong>: Wenn die Nummer 16 in <em>Optionen</em> angegeben ist, wird verhindert, dass das heutige Datum im unteren Bereich des Steuerelements angezeigt wird.</p>

<h2 id="Slider">Slider</h2>
<p>Beschreibung: Ein Schieberegler, den der Benutzer entlang einer vertikalen oder horizontalen Linie schieben kann. Zum Beispiel ist die Standard-Lautstärkeregelung in der Taskleiste ein Schieberegler. Beispiel:</p>
<pre>Gui.Add("Slider", "vMeinSlider", 50)</pre>
<p>Im letzten Parameter kann die Startposition des Schiebereglers angegeben werden. Ist der letzte Parameter nicht vorhanden, beginnt der Slider bei 0 oder bei der Bereichszahl, die am nächsten an der 0 ist.</p>
<p>Der Benutzer kann den Regler wie folgt verschieben: 1) Mit der Maus ziehen; 2) Auf den Linienbereich klicken; 3) Das Mausrad drehen, während das Steuerelement den Fokus hat; 4) Folgende Tasten drücken, während das Steuerelement den Fokus hat: Pfeiltasten, BILD-NACH-OBEN, BILD-NACH-UNTEN, POS1 und ENDE.</p>
<p><a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> und <a href="../objects/Gui.htm#Submit">Gui.Submit</a> ermitteln oder speichern die numerische Position des Schiebereglers.</p>

<h3 id="slider-change">Erkennen von Änderungen</h3>
<p>Standardmäßig wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis des Schiebereglers ausgelöst, wenn der Benutzer aufhört, den Regler zu bewegen (z. B. durch Loslassen der Maustaste nach dem Ziehen). Wenn das Wort <strong>AltSubmit</strong> in den Optionen des Steuerelements vorhanden ist, wird das Change-Ereignis zusätzlich jedes Mal ausgelöst (sehr häufig), wenn der Regler via Maus sichtbar verschoben wird.</p>
<pre class="Syntax">Ctrl_<span class="func">Change</span>(GuiCtrlObj, Info)</pre>
<dl>
  <dt>Info</dt>
  <dd><p>Ein numerischer Wert aus der unteren Tabelle, der kennzeichnet, wie der Schieberegler verschoben wurde. Diese Werte und die entsprechenden Namen sind im Windows SDK definiert.</p></dd>
</dl>
<table class="info">
  <tr><th>Wert</th><th>Name</th><th>Bedeutung</th></tr>
  <tr><td>0</td><td>TB_LINEUP</td><td>Der Benutzer hat die NACH-LINKS- oder NACH-OBEN-Taste gedrückt.</td></tr>
  <tr><td>1</td><td>TB_LINEDOWN</td><td>Der Benutzer hat die NACH-RECHTS- oder NACH-UNTEN-Taste gedrückt.</td></tr>
  <tr><td>2</td><td>TB_PAGEUP</td><td>Der Benutzer hat die BILD-NACH-OBEN-Taste gedrückt.</td></tr>
  <tr><td>3</td><td>TB_PAGEDOWN</td><td>Der Benutzer hat die BILD-NACH-UNTEN-Taste gedrückt.</td></tr>
  <tr><td>4</td><td>TB_THUMBPOSITION</td><td>Der Benutzer hat den Slider mit dem Mausrad oder durch Ziehen und Ablegen verschoben.</td></tr>
  <tr><td>6</td><td>TB_TOP</td><td>Der Benutzer hat die POS1-Taste gedrückt, um den Slider ganz nach links oder nach oben zu verschieben. </td></tr>
  <tr><td>7</td><td>TB_BOTTOM</td><td>Der Benutzer hat die ENDE-Taste gedrückt, um den Slider ganz nach rechts oder nach unten zu verschieben. </td></tr>
  <tr><td colspan="3"><strong>Nur wenn die AltSubmit-Option vorhanden ist:</strong></td></tr>
  <tr><td>5</td><td>TB_THUMBTRACK</td><td>Der Benutzer zieht den Slider momentan mit der Maus. Das heißt, dass die Maustaste zurzeit gedrückt wird.</td></tr>
  <tr><td>8</td><td>TB_ENDTRACK</td><td>Der Benutzer hat aufgehört, den Slider mit der Maus oder Tastatur zu verschieben. Hinweis: Mit Ausnahme der Mausradbewegung (TB_THUMBPOSITION), wird das Change-Ereignis nochmals bei TB_ENDTRACK ausgelöst, auch wenn es bereits durch einen der oben genannten Meldungscodes ausgelöst wurde.</td></tr>
</table>

<h3>Slider-Optionen</h3>
<p><strong>Buddy1</strong> und <strong>Buddy2</strong>: Bestimmt bis zu zwei vorhandene Steuerelemente, die automatisch an beiden Enden des Sliders positioniert werden sollen. Buddy1 wird auf der linken oder oberen Seite angezeigt (abhängig davon, ob die Option Vertical vorhanden ist). Buddy2 wird auf der rechten oder unteren Seite angezeigt. Nach dem Wort Buddy1 oder Buddy2 kann der <a href="../objects/GuiControl.htm#Name">Name</a> oder <a href="../objects/GuiControl.htm#Hwnd">HWND</a> eines vorhandenen Steuerelements angegeben werden. <code>Buddy1MeinObertext</code> würde beispielsweise das Steuerelement mit dem Namen MeinObertext zuweisen. Den Text oder das ClassNN eines Steuerelements kann man auch benutzen, allerdings nur bis zum ersten Leer- oder Tabulatorzeichen.</p>
<p><strong>Center</strong>: Der Einstellknopf (die Leiste, die vom Benutzer verschoben werden kann) ist an beiden Enden stumpf, anstatt an einem Ende spitz zu sein.</p>
<p><strong>Invert</strong>: Kehrt das Steuerelement um, sodass sich der niedrigere Wert rechts/unten befindet, anstatt links/oben. Das wird typischerweise dazu verwendet, einen vertikalen Slider in einen traditionellen Lautstärkeregler umzuwandeln. Hinweis: Die unten beschriebene ToolTip-Option berücksichtigt nicht die Umkehrung und sollte in diesem Fall daher nicht verwendet werden.</p>
<p><strong>Left</strong>: Der Einstellknopf (die Leiste, die vom Benutzer verschoben werden kann) zeigt nach oben, anstatt nach unten. Wenn dagegen die Vertical-Option vorhanden ist, zeigt der Einstellknopf nach links, anstatt nach rechts.</p>
<p><strong>Line</strong>: Bestimmt die Anzahl an Positionen, die verschoben werden sollen, wenn der Benutzer eine der Pfeiltasten drückt. Nach dem Wort Line erfolgt die Anzahl der zu verschiebenden Positionen. Zum Beispiel: <code>Line2</code>.</p>
<p><strong>NoTicks</strong>: Entfernt die Skalenstriche entlang der Linie.</p>
<p><strong>Page</strong>: Bestimmt die Anzahl an Positionen, die verschoben werden sollen, wenn der Benutzer die BILD-NACH-OBEN- oder BILD-NACH-UNTEN-Taste drückt. Nach dem Wort Page erfolgt die Anzahl der zu verschiebenden Positionen. Zum Beispiel: <code>Page10</code>.</p>
<p><strong>Range</strong>: Bestimmt einen Bereich, der vom Standardbereich 0 bis 100 abweichen soll. Nach dem Wort Range erfolgt der Minimalwert, ein Bindestrich und der Maximalwert. Zum Beispiel würde <code>Range1-1000</code> eine auswählbare Zahl zwischen 1 und 1000 ermöglichen; <code>Range-50-50</code> eine Zahl zwischen -50 und 50; und <code>Range-10--5</code> eine Zahl zwischen -10 und -5.</p>
<p><strong>Thick</strong>: Bestimmt die Länge des Einstellknopfs (die Leiste, die vom Benutzer verschoben werden kann). Nach dem Wort Thick erfolgt die Dicke in Pixel (z. B. <code>Thick30</code>). Um eine bestimmte Dicke in Windows XP oder höher zu erhöhen, ist es wahrscheinlich notwendig, entweder die Center-Option anzugeben oder das Theme des Steuerelements zu entfernen (dazu muss <code>-Theme</code> in den Optionen des Steuerelements angegeben werden).</p>
<p><strong>TickInterval</strong>: Zeigt Skalenstriche entlang der Linie in einem bestimmten Intervall an. Nach dem Wort TickInterval kann man angeben, in welchem Intervall zusätzliche Skalenstriche angezeigt werden sollen (lässt man das weg, gilt standardmäßig 1). Zum Beispiel würde <code>TickInterval10</code> einen Skalenstrich an je 10 Positionen anzeigen.</p>
<p><strong>ToolTip</strong>: Erstellt ein Tooltip, das die numerische Position des Sliders anzeigen soll, während er vom Benutzer verschoben wird. Wenn das Tooltip an einer nicht-standardmäßigen Position angezeigt werden soll, muss stattdessen Folgendes angegeben werden: <code>ToolTipLeft</code> oder <code>ToolTipRight</code> (bei vertikale Slider); <code>ToolTipTop</code> oder <code>ToolTipBottom</code> (bei horizontale Slider).</p>
<p><strong>Vertical</strong>: Bewirkt, dass der Slider nach oben und unten verschoben werden kann, anstatt nach links und rechts.</p>
<p>Die oben genannten Optionen können per <a href="../objects/GuiControl.htm#Opt">GuiCtrl.Opt</a> geändert werden, nachdem das Steuerelement erstellt worden ist.</p>

<h2 id="Progress">Progress</h2>
<p>Beschreibung: Ein zweifarbiger Fortschrittsbalken, der visuell darstellt, wie weit eine Operation fortgeschritten ist. Beispiel:</p>
<pre>Gui.Add("Progress", "w300 h20 cBlue vMeinProgress")</pre>
<p>Im dritten Parameter kann die Anfangsposition des Balkens angegeben werden (ist dieser nicht vorhanden, beginnt der Balken bei 0 oder bei der Bereichszahl, die am nächsten an der 0 ist). Später kann die Position des Balkens wie folgt geändert werden (bezogen auf eine ProgressBar, deren <a href="../objects/GuiControl.htm#Name">Name</a> MeinProgress ist):</p>
<pre>Gui.<a href="../objects/Gui.htm#Control">Control</a>["MeinProgress"].<a href="../objects/GuiControl.htm#Value">Value</a> += 20  <em>; Erhöht die aktuelle Position um 20.</em>
Gui.Control["MeinProgress"].Value := 50  <em>; Setzt die aktuelle Position auf 50.</em></pre>
<p>Bei horizontalen ProgressBars wird die Dicke des Balkens durch die Höhe des Steuerelements bestimmt. Bei vertikalen ProgressBars durch die Breite des Steuerelements.</p>
<h3>Progress-Optionen</h3>
<p><strong>Cn</strong>: Ändert die Farbe des Balkens. Ersetze <strong>n</strong> mit einer <a href="../misc/Colors.htm">HTML-Primärfarbe</a> oder einem 6-stelligen RGB-Farbwert. Beispiele: <code>cRed</code>, <code>cFFFF33</code>, <code>cDefault</code>. Wenn die C-Option nie verwendet wird (oder <code>cDefault</code> angegeben ist), gilt die Standardfarbe des Betriebssystems.</p>
<p><strong>BackgroundN</strong>: Ändert die Hintergrundfarbe des Balkens. Ersetze <strong>n</strong> mit einer <a href="../misc/Colors.htm">HTML-Primärfarbe</a> oder einem 6-stelligen RGB-Farbwert. Beispiele: <code>BackgroundGreen</code>, <code>BackgroundFFFF33</code>, <code>BackgroundDefault</code>. Wenn die C-Option nie verwendet wird (oder <code>BackgroundDefault</code> angegeben ist), gilt die Hintergrundfarbe des Fensters oder <a href="#Tab">Tab-Steuerelements</a>, das sich dahinter befindet.</p>
<p><strong>Range</strong>: Bestimmt einen Bereich, der vom Standardbereich 0 bis 100 abweichen soll. Nach dem Wort Range erfolgt der Minimalwert, ein Bindestrich und der Maximalwert. Zum Beispiel würde <code>Range1-1000</code> eine Zahl zwischen 1 und 1000 ermöglichen; <code>Range-50-50</code> eine Zahl zwischen -50 und 50; und <code>Range-10--5</code> eine Zahl zwischen -10 und -5.</p>
<p><strong>Smooth</strong>: Zeigt einen einfachen durchgehenden Balken an. Wenn diese Option fehlt, wird der Balken, sofern er keine benutzerdefinierten Farben hat, im aktuellen Windows-Design angezeigt. Ansonsten wird Balken in mehreren Segmenten angezeigt.</p>
<p><strong>Vertical</strong>: Bewirkt, dass der Balken auf vertikaler Ebene steigt oder fällt, statt auf horizontaler Ebene.</p>
<p>Die oben genannten Optionen können per <a href="../objects/GuiControl.htm#Opt">GuiCtrl.Opt</a> geändert werden, nachdem das Steuerelement erstellt worden ist.</p>

<h2 id="GroupBox">GroupBox</h2>
<p>Beschreibung: Ein rechteckiger Rahmen, der oft dazu verwendet wird, andere Steuerelemente zu umrahmen, um zu zeigen, dass sie zusammengehören. In diesem Fall ist der letzte Parameter der Titel des Rahmens, der in der oberen linken Ecke angezeigt wird, falls vorhanden. Beispiel:</p>
<pre>Gui.Add("GroupBox", "w400 h300", "Geographische Kriterien")
</pre>
<p>Standardmäßig kann der Titel einer GroupBox nur einzeilig sein. Das kann durch die Angabe von <code>Wrap</code> in den Optionen des Steuerelements überschrieben werden.</p>
<p>Um die Anzahl der Zeilen innerhalb des Steuerelements zu bestimmen (oder dessen Höhe und Breite), siehe <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>

<span id="Tab2"></span><h2 id="Tab">Tab3</h2>
<p>Beschreibung: Ein großes Steuerelement mit mehreren Seiten, die jeweils weitere Steuerelemente enthalten können. Von nun an werden diese Seiten "Tabs" genannt.</p>
<p>Es gibt drei Arten des Tab-Steuerelements:</p>
<ul>
  <li><strong>Tab3</strong>: Tab3 behebt einige Probleme, die bei Tab2 und Tab auftreten. Steuerelemente werden innerhalb eines unsichtbaren "Tab-Dialogfensters" platziert, das mit dem Tab-Steuerelement verschoben und kleiner/größer gemacht wird. Das Tab-Steuerelement ist standardmäßig an das Windows-Design angepasst.</li>
  <li><strong>Tab2</strong>: Tab2 behebt seltene Probleme im originalen Tab-Steuerelement, wenn etwas neugezeichnet werden muss, aber mit <a href="#Tab2_Issues">unerwünschten Nebeneffekten</a>.</li>
  <li><strong>Tab</strong>: Tab bleibt aus Gründen der Abwärtskompatibilität erhalten, weil es sich von <a href="#Tab_vs">Tab2 und Tab3 unterscheidet</a>.</li>
</ul>
<p>Beispiel:</p>
<pre>Gui.Add("Tab3",, "Allgemein|Ansicht|Darstellung|Einstellungen")</pre>
<p id="ChooseTab">Der letzte Parameter oben ist eine mit senkrechten Strichen getrennte Liste oder ein Array mit Tabnamen. Wenn einer der Tabs zu Beginn vorab ausgewählt sein soll, müssen nach diesem Tab zwei senkrechte Striche erfolgen (z. B. <code>Rot|Grün||Blau</code>). Alternativ kann man auch das Wort <strong>Choose</strong> in <em>Optionen</em> angeben, unmittelbar gefolgt von der Nummer des Elements, um es vorab auszuwählen. Zum Beispiel würde <code>Choose5</code> den fünften Tab vorab auswählen (wie bei den anderen Optionen auch, kann das eine Variable sein, wie z. B. <code>Choose%Var%</code>). Nachdem das Steuerelement erstellt wurde, kann man <a href="../objects/GuiControl.htm#Value">Value</a>, <a href="../objects/GuiControl.htm#Text">Text</a> oder <a href="../objects/GuiControl.htm#Choose">Choose</a> benutzen, um das ausgewählte Tab zu ändern, und <a href="../objects/GuiControl.htm#Add">Add</a> oder <a href="../objects/GuiControl.htm#Delete">Delete</a>, um Tabs hinzuzufügen oder zu entfernen.</p>
<p id="TabCmd">Nach dem Erstellen eines Tab-Steuerelements gehören Steuerelemente, die danach erfolgen, automatisch dem ersten Tab. Das kann jederzeit wie folgt geändert werden (in diesem Fall ist <em>Tab</em> das <a href="../objects/GuiControl.htm">GuiControl-Objekt</a> des ersten Tab-Steuerelements und <em>Tab2</em> des Zweiten):</p>
<pre>Tab.<a href="../objects/GuiControl.htm#UseTab">UseTab</a>()  <em>; Zukünftige Steuerelemente sind nicht Teil des Tab-Steuerelements.</em>
Tab.UseTab(3)  <em>; Zukünftige Steuerelemente gehören dem dritten Tab im Tab-Steuerelement.</em>
Tab2.UseTab(3)  <em>; Zukünftige Steuerelemente gehören dem dritten Tab im zweiten Tab-Steuerelement.</em>
Tab.UseTab("Name")  <em>; Zukünftige Steuerelemente gehören dem Tab, dessen Name mit <i>Name</i> beginnt (keine Groß/Klein-Unterscheidung).</em>
Tab.UseTab("Name", true)  <em>; Das gleiche wie oben, aber mit exakter Übereinstimmung (keine Groß/Klein-Unterscheidung).</em></pre>
<p>Es ist auch möglich, irgendeins der obigen Beispiele zu verwenden, um Steuerelemente einem Tab oder Tab-Steuerelement zuzuweisen, das noch nicht vorhanden ist (außer bei der <em>Name</em>-Methode). In diesem Fall aber werden die unten beschriebenen Optionen zur relativen Positionierung nicht unterstützt.</p>
<p id="Tab_Positioning1"><strong>Positionierung</strong>: Bei jedem Tab oder Tab-Steuerelement, das sein erstes Untersteuerelement erhält, wird dieses Untersteuerelement eine spezielle Standardposition unter Berücksichtigung folgender Bedingungen haben: 1) Fehlt sowohl die X- als auch Y-Koordinate, wird das erste Untersteuerelement auf die obere linke Ecke des Tab-Steuerelements positioniert (mit einem Standard-<a href="../objects/Gui.htm#MarginX">Abstand</a>). Die restlichen Untersteuerelemente werden jeweils unter dem vorherigen Steuerelement positioniert; 2) Sind die Positionierungsoptionen <a href="../objects/Gui.htm#PosPlus">X+n und/oder Y+n</a> angegeben, wird das Untersteuerelement relativ zur linken oberen Ecke des Innenbereichs vom Tab-Steuerelement positioniert. Zum Beispiel würde die Angabe von <code>x+10 y+10</code> bewirken, dass das Steuerelement 10 Pixel nach rechts und 10 Pixel nach unten von der linken oberen Ecke positioniert wird.</p>
<p><strong>Aktueller Tab</strong>: <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> gibt die Positionsnummer des aktuell ausgewählten Tabs zurück (der erste Tab ist 1, der Zweite ist 2 und so weiter). Mit <a href="../objects/GuiControl.htm#Text">GuiCtrl.Text</a> kann stattdessen der Text abgerufen werden. <a href="../objects/Gui.htm#Submit">Gui.Submit</a> speichert standardmäßig <a href="../objects/GuiControl.htm#Text">Text</a>, aber wenn das Wort <strong>AltSubmit</strong> in den <em>Optionen</em> des Steuerelements vorkommt, speichert es <a href="../objects/GuiControl.htm#Value">Value</a>.</p>
<p><strong>Erkennen einer Tab-Auswahl</strong>: Immer wenn der Benutzer die Tabs wechselt, wird das <a href="../objects/GuiOnEvent.htm#Change">Change</a>-Ereignis ausgelöst.</p>
<p id="Tab_Keyboard"><strong>Navigation mit der Tastatur</strong>: Der Benutzer kann mit STRG+BILD-AUF oder mit STRG+BILD-AB zwischen den Tabs wechseln. Befindet sich der Tastaturfokus auf einem Steuerelement, das nicht zum Tab-Steuerelement gehört, wird das erste Tab-Steuerelement des Fensters angesteuert. STRG+TAB und STRG+UMSCHALT+TAB können auch verwendet werden, aber mit der Ausnahme, dass sie nicht funktionieren, wenn das aktuell fokussierte Steuerelement ein mehrzeiliges Eingabefeld ist.</p>
<p id="Tab_Limits"><strong>Einschränkung</strong>: Jedes Fenster kann nicht mehr als 255 Tab-Steuerelemente enthalten. Jedes Tab-Steuerelement kann nicht mehr als 256 Tabs (Seiten) haben. Darüber hinaus ist es nicht möglich, dass ein Tab-Steuerelement weitere Tab-Steuerelemente enthalten kann.</p>

<h3 id="Tab_vs">Tab3 vs. Tab2 vs. Tab</h3>
<p id="Tab_Parent"><strong>Übergeordnetes Fenster</strong>: Das übergeordnete Fenster eines Steuerelements hat sowohl Einfluss auf die Positionierung und Sichtbarkeit des Steuerelements als auch auf die Navigationsreihenfolge via TAB-Taste. Ein Untersteuerelement innerhalb eines vorhandenen Tab3-Steuerelements verwendet als übergeordnetes Fenster das sogenannte "Tab-Dialogfenster", welches den Anzeigebereich des Tab-Steuerelements ausfüllt. Alle anderen Steuerelemente, einschließlich der Untersteuerelemente von Tab oder Tab2, verwenden als übergeordnetes Fenster nur das GUI-Fenster selbst.</p>
<p id="Tab_Positioning"><strong>Positionierung</strong>: Untersteuerelemente von Tab und Tab2 sind nicht unbedingt an den Grenzen des Tab-Steuerelements gebunden: Sie werden weiterhin immer dann versteckt und sichtbar gemacht, wenn deren Tab ausgewählt oder abgewählt wird. Dieses Verhalten ist besonders für den unten beschriebenen Buttons-Style geeignet.</p>
<p>Wenn man ein Untersteuerelement einem Tab3-Steuerelement zuweist, <em>bevor</em> das Tab3-Steuerelement erstellt wird, dann verhält sich das Untersteuerelement so, als hätte man es in ein Tab- oder Tab2-Steuerelement eingefügt. Alle anderen Untersteuerelemente sind nur innerhalb des Anzeigebereichs des Tab-Steuerelements sichtbar.</p>
<p>Beim Verschieben eines Tab3-Steuerelements werden auch seine Untersteuerelemente verschoben. Dieses Verhalten trifft nicht auf Tab- und Tab2-Steuerelemente zu.</p>
<p>Wenn man im seltenen Fall ein Steuerelement via <a href="WinMove.htm">WinMove</a> (oder gleichwertigem DllCall-Aufruf) verschiebt, müssen die Koordinaten relativ zum übergeordneten Fenster des Steuerelements sein, welches nicht unbedingt das GUI sein muss (siehe <a href="#Tab_Parent">oben</a>). <a href="../objects/GuiControl.htm#Move">GuiCtrl.Move</a> hingegen nimmt immer GUI-Koordinaten und <a href="ControlMove.htm">ControlMove</a> immer die Fensterkoordinaten, unabhängig vom übergeordneten Fenster des Steuerelements.</p>
<p id="Tab_Autosize"><strong>Automatische Größenanpassung</strong>: Wenn die Breite und/oder Höhe des Tab3-Steuerelements im Skript nicht angegeben sind, werden sie zu folgenden Zeitpunkten automatisch berechnet (welches auch immer zuerst kommt nach dem Erstellen des Steuerelements):</p>
<ul>
  <li>Das erste Mal, wenn das Tab3-Steuerelement aufhört das aktuelle Tab-Steuerelement zu sein. Dies kann eintreten, wenn man <a href="#TabCmd">GuiCtrl.UseTab</a> (mit oder ohne Parameter) aufruft oder ein anderes Tab-Steuerelement erstellt.</li>
  <li>Das erste Mal, wenn <a href="../objects/Gui.htm#Show">Gui.Show</a> für dieses bestimmte Gui aufgerufen wird.</li>
</ul>
<p>Die berechnete Größe berücksichtigt Untersteuerelemente bei einer automatischen Größenanpassung, plus die Standardabstände. Die Größe wird nur einmal berechnet, und wird nicht neuberechnet, wenn man später Steuerelemente hinzufügen sollte. Wenn das Tab3-Steuerelement leer ist, bekommt es die gleiche Standardgröße wie Tab- oder Tab2-Steuerelelemente.</p>
<p>Die Größe von Tab- und Tab2-Steuerelementen werden nicht automatisch angepasst; sie erhalten eine willkürliche Standardgröße.</p>
<p id="Tab_TabOrder"><strong>Navigationsreihenfolge via TAB-Taste</strong>: Die Reihenfolge der hinzugefügten Steuerelemente bestimmt die Reihenfolge der Navigation via TAB-Taste. Bei Tab-Steuerelementen ist die Reihenfolge zusätzlich abhängig davon, welche Art von Tab-Steuerelement verwendet wird:</p>
<ul>
  <li>Innerhalb der Navigationsreihenfolge via TAB-Taste können die Untersteuerelemente von Tab und Tab2 mit anderen Steuerelementen vermischt werden.</li>
  <li>Tab2 setzt seine Tab-Buttons in der Reihenfolgenliste unter seinen Untersteuerelementen.</li>
  <li>Tab3 gruppiert seine Untersteuerelemente innerhalb der Reihenfolgenliste und fügt sie unter den Tab-Buttons ein.</li>
</ul>
<p id="Tab_Notifs"><strong>Benachrichtigungsmeldungen (Tab3)</strong>: Gewöhnliche und <a href="#Custom">benutzerdefinierte</a> Steuerelemente senden Benachrichtigungsmeldungen in der Regel an ihre <a href="#Tab_Parent">übergeordneten Fenster</a>. WM_COMMAND-, WM_NOTIFY-, WM_VSCROLL-, WM_HSCROLL- oder WM_CTLCOLOR-Meldungen, die an das <a href="#Tab_Parent">Tab-Dialogfenster</a> eines Tab3-Steuerelements gesendet werden, werden an das GUI-Fenster weitergeleitet und können via <a href="OnMessage.htm">OnMessage</a> abgefangen werden. Wenn das Tab-Steuerelement das aktuelle Windows-Design verwendet und wenn die Option <a href="../objects/Gui.htm#BackgroundTrans">+BackgroundTrans</a> fehlt, wird WM_CTLCOLORSTATIC vollkommen vom Tab-Dialogfenster berücksichtigt und nicht weitergeleitet. Andere Benachrichtigungsmeldungen (z. B. benutzerdefinierte Meldungen) werden nicht unterstützt.</p>
<p id="Tab2_Issues"><strong>Bekannte Probleme mit Tab2</strong>:</p>
<ul>
  <li><a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> funktioniert nicht in einem Tab2-Steuerelement.</li>
  <li><a href="#ActiveX">WebBrowser</a>-Steuerelemente werden nicht korrekt neu gezeichnet.</li>
  <li>AnimateWindow und möglicherweise andere Win32-API-Aufrufe können dazu führen, dass die Untersteuerelemente des Tab-Steuerelements verschwinden.</li>
</ul>
<p id="Tab_Issues"><strong>Bekannte Probleme mit Tab</strong>:</p>
<ul>
  <li>Beim Aktivieren eines GUI-Fensters durch Anklicken bestimmter Bereiche in Steuerelementen wie Scrollleisten können Neuzeichnungsprobleme entstehen.</li>
  <li><a href="../objects/Gui.htm#BackgroundTrans">BackgroundTrans</a> funktioniert nicht, wenn das Tab-Steuerelement eine ListView enthält.</li>
  <li><a href="#ActiveX">WebBrowser</a>-Steuerelemente sind unsichtbar.</li>
</ul>

<h3>Tab-Optionen</h3>
<p><strong>Choose</strong>: Siehe <a href="#ChooseTab">oben</a>.</p>
<p><strong>-Background</strong>: Überschreibt die <a href="../objects/Gui.htm#BackColor">benutzerdefinierte Hintergrundfarbe des Fensters</a> und verwendet die Standardfarbe des Tab-Steuerelements vom Betriebssystem. Verwende <code>+Theme -Background</code>, um das Tab-Steuerelement an das aktuelle Desktop-Theme anzupassen. Allerdings werden dadurch die meisten Steuerelementarten im Tab-Steuerlement merkwürdig dargestellt, weil deren Hintergründe nicht mit dem Hintergrund des Tab-Steuerelements übereinstimmen. Bei einigen Steuerelementarten (wie <a href="#Text">Text</a>) kann das Problem behoben werden, wenn BackgroundTrans in deren Optionen eingefügt wird.</p>
<p><strong>Buttons</strong>: Erstellt eine Reihe von Buttons auf der oberen Seite des Steuerelements, statt eine Reihe von Tabs (in diesem Fall wird standardmäßig kein Rahmen angezeigt, weil die Anzeigefläche dabei typischerweise keine Steuerelemente enthält).</p>
<p><strong>Left/Right/Bottom</strong>: Verwende eins dieser Wörter, um die Tabs an der linken, rechten oder unteren Seite anzuzeigen, anstatt an der oberen. Für Left und Right gelten Einschränkungen, siehe dazu <a href="../misc/Styles.htm#TCS_VERTICAL">TCS_VERTICAL</a>.</p>
<p><strong>-Wrap</strong>: Verhindert, dass die Tabs mehr als eine Reihe verbrauchen (sind hierbei zu viele Tabs vorhanden, werden Buttons mit Pfeilen angezeigt, die der Benutzer drücken kann, um zwischen den Tabs zu wechseln).</p>
<p>Um die Anzahl der Textreihen innerhalb des Steuerelements zu bestimmen (oder deren Höhe und Breite), siehe <a href="../objects/Gui.htm#PosSize">Position und Größe von Steuerelementen anpassen</a>.</p>
<p><strong>Symbole in Tabs</strong>: Mit <a href="PostMessage.htm">SendMessage</a> kann ein Symbol neben dem Tabnamen angezeigt werden. Siehe dazu den Forumsbeitrag <a href="http://www.autohotkey.com/forum/topic6060.html">Icons in tabs</a>.</p>
<h2 id="StatusBar">StatusBar</h2>
<p>Beschreibung: Eine Reihe von Texten und/oder Symbolen, die am unteren Ende eines Fensters angefügt sind. Eine Statusleiste wird normalerweise dazu verwendet, geänderte Zustände zu melden. Beispiel:</p>
<pre>SB := Gui.Add("StatusBar",, "Starttext der Leiste (kann leer gelassen werden).")
SB.SetText("Es sind " . Reihenanzahl . " Zeilen markiert.")</pre>
<p>Die einfachste Anwendungsmöglichkeit der Statusleiste ist es, <a href="#SB_SetText">SB.SetText</a> immer dann aufzurufen, wenn sich etwas ändert, das dem Benutzer gemeldet werden soll. Wenn mehr als eine Information gemeldet werden soll, kann die Leiste per <a href="#SB_SetParts">SB.SetParts</a> in mehrere Abschnitte aufgeteilt werden. Mit <a href="#SB_SetIcon">SB.SetIcon</a> können Symbole in der Leiste angezeigt werden.</p>

<div class="methodShort" id="SB_SetText">
<h3>SetText</h3>
<p>Zeigt <em>NeuerText</em> im angegebenen Bereich der Statusleiste an, und gibt 1 bei Erfolg und 0 bei Misserfolg zurück.</p>
<pre class="Syntax">Erfolg := SB.<span class="func">SetText</span>(NeuerText <span class="optional">, Bereichsnummer := 1, Style := 0</span>)</pre>
<dl><dt>NeuerText</dt><dd>
<p>Überall in <em>NeuerText</em> können bis zu zwei Tabulatorzeichen (`t) angegeben werden: alles, was sich rechts neben dem ersten Tab befindet, wird innerhalb des Bereichs zentriert, und alles, was sich rechts neben dem zweiten Tab befindet, wird rechts ausgerichtet.</p></dd><dt>Bereichsnummer</dt><dd>
<p>Ist <em>Bereichsnummer</em> nicht vorhanden, gilt standardmäßig 1. Ansonsten kann ein Integer zwischen 1 und 256 angegeben werden.</p></dd><dt>Style</dt><dd>
<p>Ist <em>Style</em> nicht vorhanden, wird standardmäßig der traditionelle Rahmen verwendet, um diesen Bereich aussehen zu lassen, als wäre er abgesenkt. Ansonsten kann eine 1 angegeben werden, um den Rahmen zu entfernen, oder eine 2, um diesen Bereich aussehen zu lassen, als wäre er angehoben.</p></dd></dl>
</div>

<div class="methodShort" id="SB_SetParts">
<h3>SetParts</h3>
<p>Teilt die Leiste unter Beachtung der angegebenen Breiten (in Pixel) in mehrere Abschnitte auf, und gibt einen Wert ungleich 0 zurück (<a href="../objects/GuiControl.htm#Hwnd">HWND</a> der Statusleiste).</p>
<pre class="Syntax">Hwnd := SB.<span class="func">SetParts</span>(<span class="optional">Breite1, Breite2, ... Breite255</span>)</pre>
<dl><dt>Breite1 ... Breite255</dt><dd>
<p>Fehlen alle Parameter, wird die Leiste in ihren alten Zustand versetzt, so dass sie nur einen einzelnen langen Bereich hat. Ansonsten können für alle Bereiche, bis auf den letzten, die Breite angegeben werden (der letzte Bereich wird mit der verbliebenen Leistenbreite aufgefüllt). Zum Beispiel würde <code>SB.SetParts(50, 50)</code> drei Bereiche erstellen: Die ersten zwei mit einer Breite von 50 und der letzte mit der verbliebenen Breite.</p></dd></dl>
<p>Hinweis: Alle Bereiche, die per <code>SB.SetParts()</code> "gelöscht" worden sind, enthalten das nächste Mal, wenn sie wieder angezeigt werden, keinen Text (desweiteren werden ihre Symbole automatisch zerstört).</p></div>

<div class="methodShort" id="SB_SetIcon">
<h3>SetIcon</h3>
<p>Zeigt im angegebenen Bereich ein kleines Symbol links neben den Text an, und gibt das Handle des Symbols zurück.</p>
<pre class="Syntax">HICON := SB.<span class="func">SetIcon</span>(Dateiname <span class="optional">, Symbolnummer := 1, Bereichsnummer := 1</span>)</pre>
<dl><dt>Dateiname</dt><dd>
<p><em>Dateiname</em> ist der Name einer ICO-, CUR- oder ANI-Datei (zurzeit werden animierte Cursor in der Leiste nicht animiert). Andere Symbolquellen können sein: EXE, DLL, CPL, SCR und andere Typen, die Symbolressourcen enthalten. Man kann ein <a href="../misc/ImageHandles.htm">Symbol-Handle</a> anstelle eines Dateinamens verwenden. Zum Beispiel <code>SB.SetIcon("HICON:" handle)</code>.</p></dd><dt>Symbolnummer</dt><dd>
<p>Wenn anstelle der ersten Symbolgruppe eine andere verwendet werden soll, muss bei <em>Symbolnummer</em> deren Nummer angegeben werden. Zum Beispiel würde <code>SB.SetIcon("Shell32.dll", 2)</code> das Standardsymbol von der zweiten Symbolgruppe verwenden. Wenn der <em>Symbolnummer</em>-Parameter negativ ist, wird sein absoluter Wert als Ressourcen-ID eines Symbols innerhalb einer ausführbaren Datei angesehen.</p></dd><dt>Bereichsnummer</dt><dd>
<p>Ist <em>Bereichsnummer</em> nicht vorhanden, gilt standardmäßig 1. Ansonsten kann ein Integer zwischen 1 und 256 angegeben werden.</p></dd></dl>
<p>Hinweis: Das HICON ist eine Systemressource, die bei den meisten Skripten getrost ignoriert werden kann, weil es automatisch zerstört wird, sobald das Fenster der Statusleiste zerstört wird. Ebenso wird jedes alte Symbol zerstört, wenn es per <code>SB.SetIcon()</code> mit einer Neuen ersetzt wird. Das kann wie folgt verhindert werden:
</p>
<pre>Gui.Opt("+LastFound")
<a href="PostMessage.htm">SendMessage</a>(0x40F, Bereichsnummer - 1, MeinHicon, "msctls_statusbar321")  <em>; 0x40F ist SB_SETICON.</em></pre></div>

<div class="methodShort" id="SB_SetProgress">
<h3>SetProgress</h3>
<p>Erstellt und steuert einen Fortschrittsbalken innerhalb einer Statusleiste. Diese Funktion ist auf <a href="http://www.autohotkey.com/forum/topic37754.html">www.autohotkey.com/forum/topic37754.html</a> verfügbar.</p></div>


<h3>Reagieren auf Mausklicks</h3>
<p>Immer wenn der Benutzer auf die Leiste klickt, wird das <a href="../objects/GuiOnEvent.htm#Click">Click</a>-, <a href="../objects/GuiOnEvent.htm#DoubleClick">DoubleClick</a>- oder <a href="../objects/GuiOnEvent.htm#ContextMenu">ContextMenu</a>-Ereignis ausgelöst, und im <em>Info</em>- oder <em>Element</em>-Parameter die Bereichsnummer gespeichert. Allerdings kann die Bereichsnummer ein sehr großer Integer sein, falls der Benutzer den Bereich in der Nähe des Größenziehpunktes rechts neben der Statusleiste anklickt.</p>

<h3>Schrift und Farbe</h3>
<p>Größe, Art und Stil der Schrift kann per <a href="../objects/Gui.htm#SetFont">Gui.SetFont</a> eingestellt werden (wie bei normalen Steuerelementen). Die Textfarbe kann nicht geändert werden. Um die Hintergrundfarbe der Statusleiste zu ändern, kann das Wort <strong>Background</strong> in <em>Optionen</em> angegeben werden, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbtabelle</a>) oder RGB-Wert (0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>, <code>BackgroundDefault</code>.</p>
<h3>Statusleiste verstecken</h3>
<p>Um die Leiste beim Erstellen zu verstecken, muss das Wort Hidden in Optionen angegeben werden, zum Beispiel <code>MeineStatusBar := Gui.Add("StatusBar", "Hidden")</code>. Um die Leiste nach ihrer Erstellung zu verstecken, verwende <code>MeineStatusBar.Visible := false</code>. Um sie wieder sichtbar zu machen, verwende <code>MeineStatusBar.Visible := true</code>. Hinweis: Das Verstecken der Leiste reduziert nicht die Höhe des Fensters. Wenn das gemacht werden soll, verwende einfach <code>Gui.Show("<a href="../objects/Gui.htm#AutoSize">AutoSize</a>")</code>.</p>
<h3>Styles (selten verwendet)</h3>
<p>Siehe <a href="../misc/Styles.htm#StatusBar">StatusBar-Style-Tabelle</a>.</p>
<h3>Bekannte Einschränkungen</h3>
<p>1) Jedes Steuerelement, das sich mit der Statusleiste überschneidet, könnte manchmal darüber gezeichnet werden. Um das zu verhindern, können solche Steuerelemente beispielsweise per <a href="../objects/GuiOnEvent.htm#Size">Size</a>-Ereignis dynamisch verkleinert werden. 2) Es kann nicht mehr als eine Statusleiste pro Fenster vorkommen.</p>
<h3><strong>Beispiel</strong></h3>
<p>Am unteren Ende der <a href="TreeView.htm#Examples">TreeView-Seite</a> wird eine Statusleiste mit mehreren Bereichen gezeigt.</p>
<span id="IE_Control"></span><h2 id="ActiveX">ActiveX</h2>
<p>ActiveX-Komponenten wie das MSIE-Browser-Steuerelement können wie folgt in ein GUI-Fenster eingebettet werden:</p>
<pre>Gui := GuiCreate()
WB := Gui.Add("ActiveX", "w980 h640", "<a href="https://msdn.microsoft.com/de-de/library/aa752085">Shell.Explorer</a>").Value  <em>; Der letzte Parameter ist der Name der ActiveX-Komponente.</em>
WB.<a href="https://msdn.microsoft.com/de-de/library/aa752093">Navigate</a>("https://autohotkey.com/boards/")  <em>; Speziell für das Web-Browser-Steuerelement.</em>
Gui.Show()</pre>
<p>Beim Erstellen des Steuerelements kann das ActiveX-Objekt via <a href="../objects/GuiControl.htm#Value">GuiCtrl.Value</a> abgerufen werden.</p>
<p>Um die Ereignisse des Objekts verarbeiten zu können, verwende <a href="ComObjConnect.htm">ComObjConnect</a> wie folgt:</p>
<pre>Gui := GuiCreate()
URL := Gui.Add("Edit", "w930 r1", "https://autohotkey.com/boards/")
Gui.Add("Button", "x+6 yp w44 Default", "Laden").OnEvent("Click", "ButtonLaden")
WB := Gui.Add("ActiveX", "xm w980 h640", "Shell.Explorer").Value
<strong>ComObjConnect</strong>(WB, WB_events)  <em>; Verbindet die WB-Ereignisse mit dem Klassenobjekt WB_events.</em>
Gui.Show()
<em>; Fortfahren, um die Startseite zu laden:</em>
ButtonLaden()
    
ButtonLaden() {
  global
  WB.Navigate(URL.Value)
}

class WB_events {
  <a href="https://msdn.microsoft.com/de-de/library/aa768334">NavigateComplete2</a>(wb, NewURL) {
    global    
    URL.Value := NewURL  <em>; URL-Eingabefeld aktualisieren.</em>
  }
}</pre>
<p><a href="ComObjType.htm">ComObjType</a> kann verwendet werden, um den Typ des abgerufenen Objekts zu bestimmen.</p>

<h2 id="Custom">Custom</h2>
<p>Bietet die Möglichkeit, ein Steuerelement, das nicht direkt von AutoHotkey unterstützt wird, in ein GUI-Fenster einzubetten. Dazu muss der Win32-Klassenname über die <code>Class</code>-Option in <code>Gui.Add</code> angegeben werden. Beispiele:</p>
<pre>Gui.Add("Custom", "ClassComboBoxEx32")  <em>; Fügt ein <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb775740">ComboBoxEx</a>-Steuerelement hinzu.</em>
Gui.Add("Custom", "ClassScintilla")  <em>; Fügt ein <a href="http://scintilla.org/">Scintilla</a>-Steuerelement hinzu. Beachte, dass vorher die SciLexer.dll-Library geladen werden muss.</em></pre>
<p>AutoHotkey verwendet standardmäßig die Text-Routinen für Windows-Steuerelemente, wenn Texte im Steuerelement per <code>Gui.Add</code> oder <code>GuiCtrl.Value</code> abgerufen/ersetzt werden sollen.</p>
<p><strong>Ereignisse</strong>: Da die Bedeutung eines Benachrichtigungscodes abhängig vom Steuerelement ist, das ihn gesendet hat, unterstützen Custom-Steuerelemente kein <a href="../objects/GuiOnEvent.htm">OnEvent</a>. Wenn das Steuerelement allerdings Benachrichtigungen in Form von WM_NOTIFY- oder WM_COMMAND-Meldungen versendet, kann das Skript auf <a href="../objects/GuiOnNotify.htm">OnNotify</a> oder <a href="../objects/GuiOnCommand.htm">OnCommand</a> zurückgreifen, um sie zu erkennen.</p>
<p>Das folgende Beispiel zeigt, wie ein <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb761374">IP-Adressen-Steuerelement</a> hinzugefügt und verwendet werden kann:</p>
<pre>Gui := GuiCreate()

<em>; Erstellt ein IP-Adressen-Steuerelement und richtet es ein:</em>
IP := Gui.Add("Custom", "ClassSysIPAddress32 r1 w150")
IPCtrlSetAddress(IP.Hwnd, A_IPAddress1)
IPText := Gui.Add("Text", "wp")
IPField := Gui.Add("Text", "wp y+m")
IP.OnCommand(0x300, Func("IP_EditChange").bind(IPText))  <em>; EN_CHANGE = 0x300</em>
IP.OnNotify(-860, Func("IP_FieldChange").bind(IPField))  <em>; IPN_FIELDCHANGED = -860</em>
fn := Func("OK_Click").bind(Gui, IP)
Gui.Add("Button", "Default", "OK").OnEvent("Click", fn)
Gui.Show()

OK_Click(Gui, IP)
{
    Gui.Hide()
    MsgBox("Sie haben " IPCtrlGetAddress(IP.Hwnd) " ausgewählt.")
    ExitApp()
}

IP_EditChange(IPText, IP)
{
    IPText.Text := "Neuer Text: " IP.Text
}

IP_FieldChange(IPField, IP, nmipaddress)
{
    <em>; Extrahiert Infos aus der NMIPADDRESS-Struktur.</em>
    iField := NumGet(nmipaddress + 3*A_PtrSize + 0, "int")
    iValue := NumGet(nmipaddress + 3*A_PtrSize + 4, "int")
    if iValue &gt;= 0
        IPField.Text := "Feld #" iField " geändert: " iValue
    else
        IPField.Text := "Feld #" iField " leer gelassen"
}

IPCtrlSetAddress(hControl, ipaddress)
{
    static WM_USER := 0x400
    static IPM_SETADDRESS := WM_USER + 101

    <em>; Packt die IP-Adresse zwecks SendMessage in ein 32-Bit-Wort.</em>
    ipaddrword := 0
    LoopParse(ipaddress, ".")
        ipaddrword := (ipaddrword * 256) + A_LoopField
    SendMessage(IPM_SETADDRESS, 0, ipaddrword,, "ahk_id " hControl)
}

IPCtrlGetAddress(hControl)
{
    static WM_USER := 0x400
    static IPM_GETADDRESS := WM_USER + 102

    VarSetCapacity(addrword, 4)
    SendMessage(IPM_GETADDRESS, 0, &amp;addrword,, "ahk_id " hControl)
    return NumGet(addrword, 3, "UChar") "." NumGet(addrword, 2, "UChar") "." NumGet(addrword, 1, "UChar") "." NumGet(addrword, 0, "UChar")
}</pre>

<h2>Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiCreate.htm">GuiCreate</a>, <a href="../objects/Gui.htm">Gui-Objekt</a>, <a href="../objects/GuiControl.htm">GuiControl-Objekt</a>, <a href="Menu.htm">Menu</a></p>

</body>
</html>
