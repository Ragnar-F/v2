<!DOCTYPE HTML>
<html lang="de">
<head>
<title>CallbackCreate - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die CallbackCreate-Funktion erstellt eine Maschinencode-Adresse, die ihren Aufruf an eine Funktion im Skript weiterleitet." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>CallbackCreate</h1>

<p>Erstellt eine Maschinencode-Adresse, die ihren Aufruf an eine <a href="../Functions.htm">Funktion</a> im Skript weiterleitet.</p>

<pre class="Syntax">Adresse := <span class="func">CallbackCreate</span>(Funktion <span class="optional">, Optionen := "", ParamAnzahl := Funktion.MinParams</span>)</pre>
<h2>Parameter</h2>
<dl>

  <dt>Funktion</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#objects">Objekt</a></p>
    <p>Ein Funktionsname oder <a href="../objects/Functor.htm">Funktionsobjekt</a>. Diese Funktion wird automatisch aufgerufen, wann immer die <em>Adresse</em> aufgerufen wird. Die Funktion empfängt auch die Parameter, die an die <em>Adresse</em> übergeben wurden.</p>
    <p>Ein <a href="../Functions.htm#closures">Closure</a> oder <a href="../objects/Functor.htm#BoundFunc">Bound-Funktion</a> kann genutzt werden, um zwischen mehreren Callbacks zu unterscheiden, die alle die gleiche Skript-Funktion aufrufen.</p>
    <p>Das Callback reserviert für sich selbst eine Referenz zum Funktionsobjekt und gibt sie frei, wenn das Skript <a href="#CallbackFree">CallbackFree</a> aufruft.</p>
  </dd>

  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Geben Sie null oder mehrere der folgenden Wörter oder Zeichen an. Trennen Sie diese Optionen jeweils mit einem Leerzeichen (z.B. <code>"C Fast"</code>).</p>
    <p id="Fast"><strong>Fast</strong> oder <strong>F</strong>: Verhindert, dass jedesmal ein neuer <a href="../misc/Threads.htm">Thread</a> startet, wenn <em>Funktionsname</em> aufgerufen wird. Zwar ist dies leistungsfähiger, allerdings sollte es nicht verwendet werden, wenn der Thread, in dem <em>Adresse</em> aufgerufen wurde, variiert (z. B. wenn das Callback durch eine eingehende Meldung ausgelöst wurde). Denn <em>Funktionsname</em> kann globale Einstellungen eines Threads wie <a href="../misc/ErrorLevel.htm">ErrorLevel</a>, <a href="../Variables.htm#LastError">A_LastError</a> und das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> jederzeit ändern. Weitere Informationen finden Sie bei den <a href="#Threads">Bemerkungen</a>.</p>
    <p><strong>CDecl</strong> oder <strong>C</strong>: Passt die <em>Adresse</em> an die "C"-Aufrufkonvention an. Diese Option lässt man üblicherweise weg, weil die Standard-Aufrufkonvention in der Regel für Callbacks genügt. 64-Bit-Versionen von AutoHotkey, die die x64-Aufrufkonvention verwenden, ignorieren diese Option.</p>
    <p><strong>&amp;</strong>: Bewirkt, dass die Parameter nicht einzeln, sondern als Parameterliste in Form einer Adresse (ein einzelner Integer) an <em>Funktion</em> übergeben wird. Parameterwerte können mithilfe von <a href="NumGet.htm">NumGet</a> abgerufen werden. Wenn man die standardmäßige 32-Bit-Aufrufkonvention verwendet, muss <em>ParamAnzahl</em> die Größe der Parameterliste als DWORDs spezifizieren (die Anzahl der Bytes geteilt durch 4).</p>
  </dd>

  <dt>ParamAnzahl</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Anzahl der Parameter, die <em>Adresse</em>'s Aufrufer übergeben muss. Fehlt dieser Parameter, gilt standardmäßig <code><i>Funktion</i>.<a href="../objects/Func.htm#MinParams">MinParams</a></code>, das üblicherweise der Anzahl von Pflichtparametern entspricht, die in der <a href="../Functions.htm#define">Definition</a> der <em>Funktion</em> angegeben sind. In beiden Fällen muss sichergestellt werden, dass der Aufrufer genau diese Anzahl von Parametern übergibt.</p>
  </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>CallbackCreate gibt eine Maschinencode-Adresse zurück. Diese Adresse wird üblicherweise via <a href="DllCall.htm">DllCall</a> an eine externe Funktion übergeben oder via <a href="NumPut.htm">NumPut</a> in eine Struktur geschrieben, kann aber auch direkt von DllCall aufgerufen werden. Übergibt man die Adresse an <a href="#CallbackFree">CallbackFree</a>, wird das Callback gelöscht.</p>

<h2 id="failure">Misserfolg</h2>
<p>Diese Funktion scheitert und löst eine Ausnahme unter folgenden Bedingungen aus:</p>
<ul>
  <li><em>Funktion</em> kein Objekt oder kein gültiger Funktionsname ist.</li>
  <li><em>Funktion</em> eine <code>MinParams</code>-Eigenschaft hat, die die Anzahl der vom Callback bereitgestellten Parameter überschreitet.</li>
  <li><em>ParamAnzahl</em> negativ ist.</li>
  <li><em>ParamAnzahl</em> weggelassen wird und: 1) <em>Funktion</em> keine <code>MinParams</code>-Eigenschaft hat; oder 2) die <code>&amp;</code>-Option in Verbindung mit der standardmäßigen 32-Bit-Aufrufkonvention genutzt wird.</li>
</ul>

<h2>Die Parameter der Callback-Funktion</h2>
<p>Eine <a href="../Functions.htm">Funktion</a>, die einer Callback-Adresse zugewiesen ist, kann bis zu 31 Parameter akzeptieren. <a href="../Functions.htm#optional">Optionale Parameter</a> sind erlaubt, so dass die Funktion von mehr als einem Aufrufer aufgerufen werden kann.</p>
<p>Das richtige Interpretieren von Parametern erfordert ein gutes Verständnis darüber, wie die x86-Aufrufkonvention funktioniert. Da Autohotkey keine typisierten Parameter besitzt, besteht Callback's Parameterliste voraussichtlich aus Integern, von denen einige neuinterpretiert werden müssen.</p>

<p><strong>AutoHotkey 32-bit:</strong> Alle eingehenden Parameter sind vorzeichenlose 32-Bit-Integer. Kleinere Typen werden auf 32 Bit erweitert, während größere Typen in mehreren 32-Bit-Parametern aufgeteilt werden.</p>
<p>Wenn ein eingehender Parameter als vorzeichenfähiger Integer vorgesehen ist, können negative Zahlen mit einem der folgenden Beispiele offenbart werden:</p>
<pre><em>; Methode #1</em>
if wParam &gt; 0x7FFFFFFF
    wParam := -(~wParam) - 1

<em>; Methode #2: Beruht auf der Tatsache, dass AutoHotkey von sich aus vorzeichenfähige 64-Bit-Integer verwendet.</em>
wParam := wParam &lt;&lt; 32 &gt;&gt; 32</pre>

<p><strong>AutoHotkey 64-bit:</strong> Alle eingehenden Parameter sind vorzeichenfähige 64-Bit-Integer. AutoHotkey unterstützt von sich aus keine vorzeichenlose 64-Bit-Integers. Kleinere Typen werden auf 64 Bit erweitert, während größere Typen immer via Adresse übergeben werden.</p>

<p><strong>AutoHotkey 32-bit/64-bit:</strong> Wenn ein eingehender Parameter als 8-Bit- oder 16-Bit-Wert (oder 32-Bit in x64) vorgesehen ist, kann es passieren, dass die höheren Bits des Wertes "Müll" enthalten - so etwas könnte man mithilfe des bitweisen UNDs herausfiltern:</p>
<pre>Callback(UCharParam, UShortParam, UIntParam) {
    UCharParam &amp;= 0xFF
    UShortParam &amp;= 0xFFFF
    UIntParam &amp;= 0xFFFFFFFF
    <em>;...</em>
}</pre>
<p>Wenn ein eingehender Parameter als Zeichenkette vorgesehen ist, dann ist das, was aktuell empfangen wird, die aktuelle Adresse der Zeichenkette. Mit <a href="StrGet.htm">StrGet</a> kann die Zeichenkette selbst abgerufen werden:</p>
<pre>MeineZeichenkette := StrGet(MeinParameter)</pre>
<p>Wenn ein eingehender Parameter die Adresse einer Struktur ist, kann man die einzelnen Elemente durch Befolgen der Schritte in "<a href="DllCall.htm#struct">DllCall-Strukturen</a>" extrahieren.</p>

<p id="Indirect"><strong>Parameter via Adresse abrufen:</strong> Wenn die <code>&amp;</code>-Option genutzt wird, erhält die Funktion die <i>Adresse</i> des ersten Callback-Parameters. Zum Beispiel:</p>
<pre>
callback := CallbackCreate("DieFunk", "F&amp;", 3)  <em>; Größe der Parameterliste muss bei 32-Bit angegeben werden.</em>
DllCall(callback, float, 10.5, int64, 42)
DieFunk(params) {
    MsgBox <a href="NumGet.htm">NumGet</a>(params+0, "float") ", " NumGet(params+A_PtrSize, "int64")
}</pre>
<p>Die meisten Callbacks in 32-Bit-Programmen verwenden die <em>stdcall</em>-Aufrufkonvention, die eine feste Anzahl an Parametern voraussetzt. In solchen Fällen muss <em>ParamAnzahl</em> auf die Größe der Parameterliste gesetzt werden, wo Int64 und Double als zwei 32-Bit-Parameter zählen. Beim Verwenden von <em>Cdecl</em> oder der 64-Bit-Aufrufkonvention hat <em>ParamAnzahl</em> keine Wirkung.</p>

<h2>Was die Funktion per <em>Return</em> zurückgeben sollte</h2>
<p>Wenn die Funktion ein <a href="Return.htm">Return</a> verwendet, dessen Parameter entweder fehlt oder einen leeren Wert wie "" hat (oder überhaupt kein Return verwendet), wird eine 0 an den Aufrufer des Callbacks zurückgegeben. Ansonsten sollte die Funktion einen Integer zurückgeben, der dann an den Aufrufer zurückgegeben wird. AutoHotkey 32-bit kürzt Rückgabewerte auf 32 Bit, während AutoHotkey 64-bit Rückgabewerte im 64-Bit-Format unterstützt. Zurückgegebene Strukturen größer als diesen Wert werden nicht unterstützt.</p>

<h2 id="Threads">Fast vs. Slow</h2>
<p>Der Standard/Slow-Modus bewirkt, dass Einstellungen wie <a href="SendMode.htm">SendMode</a> und <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> innerhalb der Funktion mit ihren Standardwerten beginnen. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Der <a href="#Fast">Fast-Modus</a> erbt hingegen die globalen Einstellungen von einem <a href="../misc/Threads.htm">Thread</a>, der zum Zeitpunkt des Funktionsaufrufs aktiv war. Desweiteren werden jegliche Änderungen, die die Funktion bei globalen Einstellungen gemacht hat (einschließlich <a href="../misc/ErrorLevel.htm">ErrorLevel</a> und das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a>), auch für den <a href="../misc/Threads.htm">aktuellen Thread</a> wirksam. Demzufolge sollte der Fast-Modus nur verwendet werden, wenn bekannt ist, in welchen Threads die Funktion aufgerufen wird.</p>
<p>Um zu verhindern, dass ein Callback sich selbst unterbricht (oder von einem anderen Thread unterbrochen wird), fügt man <a href="Critical.htm">Critical</a> in die erste Zeile ein. Allerdings ist dies nicht effektiv, wenn die Funktion indirekt via eingehende Meldung kleiner als 0x312 aufgerufen wird (das Erhöhen von Critical's <a href="Critical.htm#Interval">Intervall</a> könnte helfen). Desweiteren kann <a href="Critical.htm">Critical</a> die Funktion nicht daran zu hindern, etwas zu tun, das zum indirekten Selbstaufruf führen könnte, wie z. B. durch <a href="SendMessage.htm">SendMessage</a> oder <a href="DllCall.htm">DllCall</a>.</p>

<h2 id="CallbackFree">Speicher</h2>
<p>Jede Verwendung von CallbackCreate bekommt eine kleine Speichermenge zugewiesen (32 Bytes plus System-Overhead). Da das Betriebssystem diesen Speicher automatisch beim Beenden des Skripts freigibt, muss jedes Skript, das eine kleine <em>feste</em> Anzahl an Callbacks zugewiesen bekommt, den Speicher nicht explizit freigegeben. Dagegen sollte ein Skript, das CallbackCreate unendlich oft aufruft, folgende Funktion bei jedem unbenutzten Callback aufrufen:</p>
<pre>CallbackFree(Adresse)</pre>
<p>Dadurch wird auch sichergestellt, dass Callback's Referenz zum Funktionsobjekt des Skripts freigegeben wird.</p>

<h2>Siehe auch</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="OnMessage.htm">OnMessage</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="Sort.htm#callback">Sort's Callback</a>, <a href="Critical.htm">Critical</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="../Functions.htm">Functions</a>, <a href="../misc/SendMessageList.htm">Liste mit Fenstermeldungen</a>, <a href="../misc/Threads.htm">Threads</a></p>

<h2>Beispiele</h2>
<pre class="NoIndent"><em>; Beispiel: Das folgende Skript zeigt eine Zusammenfassung aller Fenster auf höchster Ebene an.</em>

<em>; Aus Performance- und Speichergründen wird CallbackCreate nur einmal für einen bestimmten Callback aufgerufen:</em>
if not EnumAdresse  <em>; Fast-Modus ist okay, weil er nur von diesem Thread aufgerufen wird:</em>
    EnumAdresse := <strong>CallbackCreate</strong>("EnumWindowsProc", "Fast")

DetectHiddenWindows True  <em>; Aufgrund des Fast-Modus wird diese Einstellung auch für Callback wirksam.</em>

<em>; Übergibt die Kontrolle an EnumWindows(), das Callback wiederholend aufruft:</em>
DllCall("EnumWindows", Ptr, EnumAdresse, Ptr, 0)
MsgBox Ausgabe  <em>; Zeigt die gesammelten Informationen von Callback an.</em>
    
EnumWindowsProc(hwnd, lParam)
{
    global Ausgabe
    Titel := WinGetTitle("ahk_id " hwnd)
    Klasse := WinGetClass("ahk_id " hwnd)
    if Titel
        Ausgabe .= "HWND: " . hwnd . "`tTitel: " . Titel . "`tKlasse: " . Klasse . "`n"
    return true  <em>; Setzt EnumWindows() fort, bis alle Fenster abgearbeitet wurden.</em>
}</pre>
<pre class="NoIndent"><em>; Beispiel: Das folgende Skript zeigt, wie ein GUI-Fenster zu einer Unterklasse gemacht werden kann,
; wenn man sein WindowProc an einen neuen WindowProc weiterleitet. In diesem Fall wird die Hintergrundfarbe
; des Text-Steuerelements auf eine benutzerdefinierte Farbe gesetzt.</em>

Texthintergrundfarbe := 0xFFBBBB  <em>; Eine benutzerdefinierte Farbe im BGR-Format.</em>
Pinsel := DllCall("CreateSolidBrush", UInt, Texthintergrundfarbe)

Gui := GuiCreate()
Text := Gui.Add("Text",, "Hier ein Text mit einer`nbenutzerdefinierter Hintergrundfarbe.")

<em>; 64-Bit-Skripte müssen SetWindowLongPtr statt SetWindowLong aufrufen:</em>
SetWindowLong := A_PtrSize=8 ? "SetWindowLongPtr" : "SetWindowLong"

WindowProcNeu := <strong>CallbackCreate</strong>("WindowProc")  <em>; Vermeide den Fast-Modus beim Setzen der Unterklasse.</em>
WindowProcAlt := DllCall(SetWindowLong, Ptr, Gui.Hwnd, Int, -4  <em>; -4 ist GWL_WNDPROC</em>
    , Ptr, WindowProcNeu, Ptr) <em>; Rückgabewert muss auf Ptr oder UPtr anstatt auf Int gesetzt werden.</em>

Gui.Show

WindowProc(hwnd, uMsg, wParam, lParam)
{
    Critical
    global Text, Texthintergrundfarbe, Pinsel, WindowProcAlt
    if (uMsg = 0x138 &amp;&amp; lParam = Text.Hwnd)  <em>; 0x138 ist WM_CTLCOLORSTATIC.</em>
    {
        DllCall("SetBkColor", UInt, wParam, Ptr, Texthintergrundfarbe)
        return Pinsel  <em>; Gibt HBRUSH zurück, um dem OS mitzuteilen, dass wir HDC geändert haben.</em>
    }
    <em>; Ansonsten (da oben nichts zurückgegeben wurde) werden alle unbehandelten Ereignisse an das originale WindowProc übergeben.</em>
    return DllCall("CallWindowProc", Ptr, WindowProcAlt, Ptr, hwnd, UInt, uMsg, Ptr, wParam, Ptr, lParam)
}</pre>

</body>
</html>
