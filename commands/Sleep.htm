<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Sleep - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Sleep-Funktion wartet eine bestimmte Zeit, bevor sie die Ausführung weiterlaufen lässt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Sleep</h1>

<p>Wartet eine bestimmte Zeit, bevor die Ausführung fortgesetzt wird.</p>

<pre class="Syntax"><span class="func">Sleep</span> Verzögerung</pre>
<h2>Parameter</h2>
<dl>

  <dt>Verzögerung</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die Wartezeit zwischen 0 und 2147483647 Millisekunden (24 Tage).</p>
  </dd>

</dl>

<h2>Bemerkungen</h2>
<p>Durch die Granularität (Ungenauigkeit) der Zeiterfassung im Betriebssystem wird die <em>Verzögerung</em> möglicherweise auf das nächstmögliche Vielfache von 10 oder 15.6 Millisekunden aufgerundet (abhängig vom Typ der installierten Hardware und Treiber). Auf den meisten Windows 2000/XP-Systemen ist eine Verzögerung zwischen 1 und 10 gleichbedeutend mit 10 oder 15.6. Um eine kürzere Verzögerung zu erreichen, siehe <a href="#ShorterSleep">Beispiele</a>.</p>
<p>Die tatsächliche Verzögerung kann länger dauern als erwartet, wenn die CPU unter hoher Last ist. Das liegt daran, dass das Betriebssystem jedem bedürftigen Prozess einen Teil der CPU-Zeit übergibt (in der Regel 20 Millisekunden), bevor das Skript eine weitere Zeitscheibe erhält.</p>
<p>Eine Verzögerung von 0 übergibt den Rest der Skript-Zeitscheibe je nach Bedarf an andere Prozesse (solange diese nicht eine deutlich niedrigere <a href="ProcessSetPriority.htm">Priorität</a> haben als das Skript). Daher erzeugt eine Verzögerung von 0 eine tatsächliche Verzögerung von 0 bis 20 ms (oder mehr), abhängig von der Anzahl bedürftiger Prozesse (sind keine vorhanden, besteht überhaupt keine Verzögerung). Allerdings sollte eine <em>Verzögerung</em> von 0 immer damit enden, kürzer zu sein, als jede längere <em>Verzögerung</em> sein würde.</p>
<p>Während der Ruhephase können neue <a href="../misc/Threads.htm">Threads</a> per <a href="../Hotkeys.htm">Hotkey</a>, <a href="../objects/Menu.htm">benutzerdefinierte Menüeinträge</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p><strong>Sleep -1</strong>: Eine Verzögerung von -1 erzeugt keine Ruhephase, sondern ermöglicht dem Skript, seine Meldungswarteschlange sofort zu überprüfen. Das kann verwendet werden, um ausstehende <a href="../misc/Threads.htm">Unterbrechungen</a> an einer bestimmten Stelle zu erzwingen anstatt zufällig. Siehe <a href="Critical.htm">Critical</a> für mehr Details.</p>
<h2>Siehe auch</h2>
<p><a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="SetControlDelay.htm">SetControlDelay</a>, <a href="SetWinDelay.htm">SetWinDelay</a></p>
<h2>Beispiele</h2>
<pre class="NoIndent">Sleep 1000  <em>; 1 Sekunde</em></pre>
<pre class="NoIndent" id="ShorterSleep"><em>; Das folgende Beispiel zeigt, wie die Ruhephase
; kleiner als 10 oder 15.6 Millisekunden sein kann.
; HINWEIS: Während ein Skript dieser Art läuft, wird das ganze Betriebssystem und alle Anwendungen
; von timeBeginPeriod beeinflusst.</em>

Ruhedauer := 1  <em>; Das kann manchmal nachjustiert werden (z. B. ist 2 anders als 3), abhängig vom unteren Wert.</em>
Zeitperiode := 3 <em>; Probieren Sie 7 oder 3 aus.  Siehe unteren Kommentar.
; Auf einem PC, dessen Ruhephase normalerweise auf 15.6 ms gerundet wird, sollte Zeitperiode=7 ausprobiert werden,
; um kürzere Ruhephasen zu ermöglichen, und Zeitperiode=3 oder weniger, um die kürzesten Ruhephasen zu ermöglichen.</em>

DllCall("Winmm\timeBeginPeriod", UInt, Zeitperiode)  <em>; Wirkt sich auf alle Anwendungen aus, nicht nur auf das DllCall("Sleep"...) vom Skript, aber nicht auf SetTimer.</em>
Iterationen := 50
Startzeit := A_TickCount

Loop Iterationen
    DllCall("Sleep", UInt, Ruhedauer)  <em>; Es muss DllCall anstelle der Sleep-Funktion verwendet werden.</em>

DllCall("Winmm\timeEndPeriod", UInt, Zeitperiode)  <em>; Sollte aufgerufen werden, um die Normalität des Systems wiederherzustellen.</em>
MsgBox "Ruhedauer = " . (A_TickCount - Startzeit) / Iterationen</pre>

</body>
</html>
