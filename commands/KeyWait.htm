<!DOCTYPE HTML>
<html lang="de">
<head>
<title>KeyWait - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die KeyWait-Funktion wartet, bis eine Tastatur-, Maus- oder Joystick-Taste losgelassen oder nach unten gedrückt wird." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>KeyWait</h1>

<p>Wartet, bis eine Tastatur-, Maus- oder Joystick-Taste losgelassen oder nach unten gedrückt wird.</p>

<pre class="Syntax"><span class="func">KeyWait</span> Tastenname <span class="optional">, Optionen</span></pre>
<h2>Parameter</h2>
<dl>

  <dt>Tastenname</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Nahezu jedes Zeichen, das mit der Tastatur erzeugt werden kann, oder einer der Tastennamen aus der <a href="../KeyList.htm">Tastenliste</a>, darunter auch Maus- und Joystick-Tasten. Abgesehen von den Joystick-Tasten werden andere Joystick-Attribute nicht unterstützt.</p>
      <p>Ein eindeutiger virtueller Tastencode wie <code>vkFF</code> könnte man auch angeben. Diese Angabe ist in Ausnahmefällen nützlich, wo eine Taste keinen Namen hat und keine sichtbaren Zeichen beim Drücken erzeugt. Der virtuelle Tastencode einer solchen Taste kann durch Befolgen der Schritte am unteren Ende der <a href="../KeyList.htm#SpecialKeys">Tastenliste</a> ermittelt werden.</p></dd>

  <dt>Optionen</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Wenn dieser Parameter leer ist, wird die Funktion solange warten, bis der Benutzer die angegebene Tastatur-, Maus- oder Joystick-Taste physisch loslässt. Bei nicht installiertem <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> ist das künstliche Loslassen von <em>Tastenname</em> (z. B. via <a href="Send.htm">Send</a>-Funktion) das gleiche wie, als hätte man sie physisch losgelassen. Bei nicht installiertem <a href="_InstallMouseHook.htm">Maus-Hook</a> gilt das gleiche wie oben, aber in Bezug auf Maustasten.</p>
      <p>Optionen: Eine Zeichenkette mit einen oder mehreren der folgenden Buchstaben (in beliebiger Reihenfolge, optional durch Leerzeichen getrennt):</p>
      <p><strong>D</strong>: Warten, bis die Taste nach unten gedrückt wurde.</p>            
      <p><strong>L</strong>: Überprüft den logischen Status der Taste; dieser Status macht dem Betriebssystem und aktivem Fenster glauben, dass die Taste gedrückt wurde, welches aber nicht unbedingt dem physischen Status entspricht. Diese Option wird bei Joystick-Tasten ignoriert.</p>
      <p><strong>T</strong>: Zeitlimit (z. B. <code>T3</code>). Wie viele Sekunden gewartet werden sollen, bevor eine Zeitüberschreitung erfolgt und eine 0 zurückgegeben wird. Erreicht die Taste den angegebenen Zustand, wird die Funktion nicht warten, bis das Zeitlimit überschritten wird. Stattdessen wird sie sofort eine 1 zurückgeben.</p>
      <p>Der Zeitlimit-Wert kann eine Floating-Point-Zahl wie 2.5 sein, aber kein Hexadezimalwert wie 0x03.</p></dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#boolean">Integer (boolescher Wert)</a></p>
<p>Diese Funktion gibt 0 (false) zurück, wenn die Funktion das Zeitlimit überschritten hat, ansonsten 1 (true).</p>

<h2>Bemerkungen</h2>
<p>Der physische Zustand einer Tastatur- oder Maustaste ist in der Regel derselbe wie der logische Zustand, es sei denn, der Tastatur- und/oder Maus-Hook ist installiert, dann spiegelt dieser genau wider, ob der Benutzer die Taste physisch gedrückt hält oder nicht. Mit der <a href="KeyHistory.htm">KeyHistory</a>-Funktion oder dem dazugehörigen Menüpunkt können Sie überprüfen, ob Ihr Skript die Hooks benutzt. Durch Hinzufügen von <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> und/oder <a href="_InstallMouseHook.htm">#InstallMouseHook</a> können die Hooks im Skript erzwungen werden.</p>
<p>Während die Funktion im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="../objects/Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>
<p>Wenn Sie auf das Loslassen von zwei oder mehr Tasten warten wollen, können Sie KeyWait mehrmals nutzen. Zum Beispiel:</p>
<pre>KeyWait "Control"  <em>; Wartet darauf, dass sowohl STRG als auch ALT losgelassen wird.</em>
KeyWait "Alt"</pre>
<p>Im Beispiel-Abschnitt von <a href="Input.htm">Input</a> wird gezeigt, wie man auf das Drücken einer Taste warten kann, die zu einer bestimmten Reihe von Tasten gehört.</p>
<h2>Siehe auch</h2>
<p><a href="GetKeyState.htm">GetKeyState</a>, <a href="../KeyList.htm">Tastenliste</a>, <a href="Input.htm">Input</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a>, <a href="ClipWait.htm">ClipWait</a>, <a href="WinWait.htm">WinWait</a></p>
<h2>Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>: Grundlegende Verwendung</p>
<pre>KeyWait "a"  <em>; Warten, bis die A-Taste losgelassen wird.</em>
KeyWait "LButton", "D"  <em>; Wartet, bis die linke Maustaste gedrückt wird.</em>
KeyWait "Joy1", "D T3"  <em>; Wartet bis zu 3 Sekunden, bis die erste Joystick-Taste gedrückt wird.</em>
KeyWait "LAlt", "L"  <em>; Wartet, bis die linke ALT-Taste logisch losgelassen wird.</em></pre>
</div>

<div class="ex" id="ExHotkey">
<p><a href="#ExHotkey">#2</a>: Ein einfacher Hotkey</p>
<pre>~CapsLock::
KeyWait "CapsLock"  <em>; Wartet, bis der Benutzer diese Taste physisch losgelassen hat.</em>
MsgBox "Sie haben die FESTSTELL-Taste gedrückt und losgelassen."
return</pre>
</div>

<div class="ex" id="ExRemap">
<p><a href="#ExRemap">#3</a>: Neubelegung einer Tastatur- und Maustaste (dient nur zur Veranschaulichung, weil das <a href="../misc/Remap.htm">interne Neubelegungs-Feature</a> leichter zu handhaben wäre). Die linke Maustaste wird gedrückt gehalten, während NumpadAdd unten ist, das effektiv NumpadAdd in die linke Maustaste transformiert.</p>
<pre>*NumpadAdd::
MouseClick "left",,, 1, 0, "D"  <em>; Hält die linke Maustaste gedrückt.</em>
KeyWait "NumpadAdd"  <em>; Wartet, bis die Taste losgelassen wird.</em>
MouseClick "left",,, 1, 0, "U"  <em>; Lässt die Maustaste los.</em>
return</pre>
</div>

<div class="ex" id="ExDouble">
<p><a href="#ExDouble">#4</a>: Erkennt, ob eine Taste zweimal gedrückt wurde (ähnlich wie ein Doppelklick). Mit KeyWait wird das Auto-Wiederholungs-Feature daran gehindert, einen ungewollten Doppeldruck zu erzeugen, wenn man die rechte STRG-Taste zum Modifizieren einer anderen Taste gedrückt hält. Es lässt den Thread des Hotkeys laufen, wodurch die Autowiederholung blockiert wird, solange #MaxThreadsPerHotkey auf den Standardwert 1 ist. Hinweis: Es gibt ein ausführlicheres Skript zur Unterscheidung zwischen einfachem, doppeltem und dreifachem Drücken im unteren Bereich der <a href="SetTimer.htm">SetTimer</a>-Seite.</p>
<pre>~RControl::
if (A_PriorHotkey != "~RControl" or A_TimeSincePriorHotkey &gt; 400)
{
    <em>; Zu viel Zeit zwischen den Instanzen, daher kein doppeltes Drücken.</em>
    KeyWait "RControl"
    return
}
MsgBox "Sie haben die rechte STRG-Taste doppelt gedrückt."
return</pre>
</div>

</body>
</html>
