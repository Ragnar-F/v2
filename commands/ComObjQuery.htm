<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObjQuery - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComObjQuery-Funktion fordert ein Interface oder Service eines COM-Objekts an." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery</h1>
<p>Fordert ein Interface oder Service eines COM-Objekts an.</p>
<pre class="Syntax">InterfacePointer := <span class="func">ComObjQuery</span>(ComObject, <span class="optional">SID,</span> IID)</pre>

<h2>Parameter</h2>
<dl>

  <dt>ComObject</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein COM-Wrapper-Objekt oder roher Interface-Pointer.</p>
  </dd>

  <dt>IID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Interface-Identifikator (GUID) im Format "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p>
  </dd>

  <dt>SID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Service-Identifikator im selben Format wie IID. Lässt man diesen Parameter weg, muss auch das Komma weggelassen werden.</p>
  </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt einen Pointer zurück, der auf das angeforderten Interface verweist. Wenn der Pointer nicht abgerufen werden kann, wird 0 zurückgegeben.</p>

<h2>Bemerkungen</h2>
<p>Im Zwei-Parameter-Modus ist diese Funktion äquivalent zu <a href="https://msdn.microsoft.com/de-de/library/ms682521.aspx">IUnknown::QueryInterface</a>. Sind sowohl SID als auch IID angegeben, wird intern das <a href="https://msdn.microsoft.com/de-de/library/cc678965.aspx">IServiceProvider</a>-Interface angefordert und danach <a href="https://msdn.microsoft.com/de-de/library/cc678966.aspx">IServiceProvider::QueryService</a> aufgerufen. In beiden Fällen ist der Rückgabewert entweder 0 oder ein Pointer, der auf das angeforderte Interface verweist. Grundsätzlich muss dieser Pointer <a href="ObjAddRef.htm">freigegeben</a> werden, wenn er vom Skript nicht länger benötigt wird.</p>

<h2>Siehe auch</h2>
<a href="ObjAddRef.htm">ObjRelease</a>, <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjError.htm">ComObjError</a>

<h2>Beispiele</h2>
<div class="ex" id="ExClassName">
<p><a href="#ExClassName">#1</a>: Klassennamen eines Objekts ermitteln.</p>
<pre>obj := ComObjCreate("Scripting.Dictionary")

MsgBox "Interface-Name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; Einen Pointer anfordern, der auf das IProvideClassInfo-Interface des Objekts verweist.</em>
if !(pci := ComObjQuery(obj, IID_IProvideClassInfo))
{
    MsgBox "IProvideClassInfo-Interface wird nicht unterstützt."
    return
}

<em>; GetClassInfo aufrufen, um einen Pointer zu erhalten, der auf das ITypeInfo-Interface verweist.</em>
DllCall(vtable(pci, 3), "ptr", pci, "ptr*", ti)

<em>; GetDocumentation aufrufen, um den vollständigen Typennamen des Objekts zu erhalten.</em>
DllCall(vtable(ti, 12), "ptr", ti, "int", -1, "ptr*", name, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; Den BSTR-Pointer in eine brauchbare Zeichenkette umwandeln.</em>
name := StrGet(name, "UTF-16")

<em>; Rohe Interface-Pointer freigeben.</em>
ObjRelease(ti)
ObjRelease(pci)

<em>; Den Typennamen anzeigen!</em>
MsgBox "Klassenname: " name

vtable(ptr, n) {
    <em>; NumGet(ptr+0) gibt die Adresse der virtuellen Funktionstabelle
    ; des Objekts (kurz: vtable) zurück. Der Rest des Ausdrucks ruft
    ; die Adresse der n-ten Funktionsadresse aus der vtable ab.</em>
    return NumGet(NumGet(ptr+0), n*A_PtrSize)
}
</pre>
</div>

<div class="ex" id="ExIE">
<p><a href="#ExIE">#2</a>: Ein vorhandenes Internet-Explorer-Fenster automatisieren.</p>
<pre>sURL := "https://www.autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
    WebBrowser.Navigate(sURL)
return

GetWebBrowser()
{
    <em>; Einen rohen Pointer abrufen, der auf das Document-Objekt des obersten IE-Fensters verweist.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    lResult := SendMessage(msg, 0, 0, "Internet Explorer_Server1", "ahk_class IEFrame")
    if !lResult
        return  <em>; IE nicht gefunden.</em>
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", GUID(IID_IHTMLDocument2,"{332C4425-26CB-11D0-B483-00C04FD90119}")
        , "Ptr", 0, "Ptr*", pdoc)
    
    <em>; WebBrowserApp-Service anfordern. In diesem bestimmten Fall sind
    ; SID und IID identisch, was nicht immer so ist.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; Document-Objekt-Pointer freigeben.</em>
    ObjRelease(pdoc)
    
    <em>; WebBrowser-Objekt in verwendbarer Form zurückgeben:</em>
    static VT_DISPATCH := 9, F_OWNVALUE := 1
    return ComObject(VT_DISPATCH, pweb, F_OWNVALUE)
}

GUID(ByRef GUID, sGUID) <em>; Wandelt eine Zeichenkette in eine binäre GUID um und gibt ihre Adresse zurück.</em>
{
    GUID := BufferAlloc(16, 0)
    return DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", GUID) &gt;= 0 ? GUID : ""
}
</pre>
</div>

</body>
</html>
