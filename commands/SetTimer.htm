<!DOCTYPE HTML>
<html lang="de">
<head>
<title>SetTimer - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die SetTimer-Funktion ruft automatisch eine Funktion in periodischen Zeitabständen auf." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>SetTimer</h1>

<p>Ruft automatisch eine Funktion in periodischen Zeitabständen auf.</p>

<pre class="Syntax"><span class="func">SetTimer</span> <span class="optional">Callback, Periode|"On|Off|Delete", Priorität</span></pre>
<h2>Parameter</h2>
<dl>

  <dt id="Callback">Callback</dt>
  <dd><p>Eine Funktion, die aufgerufen werden soll. Dieser Parameter kann ein Funktionsname oder <a href="../objects/Functor.htm">Funktionsobjekt</a> sein. Direkt geschriebene Funktionsnamen müssen in Anführungszeichen gesetzt werden.</p>
  <p id="OmitCallback">Wenn <em>Callback</em> fehlt, wird sich SetTimer auf den Timer beziehen, der den aktuellen Thread gestartet hat, sofern vorhanden. Zum Beispiel könnte <code>SetTimer , "Off"</code> innerhalb einer Timer-Funktion verwendet werden, um den Timer zu deaktivieren. <code>SetTimer , 1000</code> wiederum würde die <em>Periode</em> des aktuellen Timers aktualisieren.</p>
  <p class="warning"><strong>Hinweis:</strong> Die Übergabe einer leeren Variable oder eines Ausdrucks, der zu einem leeren Wert führt, wird als Fehler eingestuft. Dieser Parameter darf weder leer sein noch fehlen.</p>
  </dd>

  <dt>Periode|"On|Off|Delete"</dt>
  <dd><p><strong>"On"</strong>: Reaktiviert einen zuvor deaktivierten Timer mit ihrer früheren <em>Periode</em>. Falls der Timer noch nicht vorhanden ist, wird er erstellt (mit einer Standardperiode von 250). Der Timer wird außerdem <a href="#reset">zurückgesetzt</a>. Wenn ein Timer bereits vorhanden ist, der zuvor im <a href="#once">Nur-Einmal-Laufen-Modus</a> gestartet wurde, wird er auch dieses Mal nur einmal ausgeführt.</p>
      <p><strong>"Off"</strong>: Deaktiviert einen vorhandenen Timer.</p>
      <p><strong>"Delete"</strong>: Deaktiviert und entfernt einen vorhandenen Timer. Wenn der Timer mit einem <a href="../objects/Functor.htm">Funktionsobjekt</a> verbunden ist, wird das Objekt freigegeben. Nur das Ausschalten eines Timers wird das Objekt nicht freigeben.</p>
      <p><strong>Periode</strong>: Erstellt oder aktualisiert einen Timer. Der absolute Wert von diesem Parameter ist die <a href="#Precision">ungefähre</a> Zeit in Millisekunden, die ablaufen muss, bevor der Timer ausgeführt wird. Der Timer wird dabei automatisch aktiviert und <a href="#reset">zurückgesetzt</a>. Man kann den Timer so einstellen, dass er sich automatisch wiederholt oder nur einmal läuft:</p>
      <ul>
        <li>Wenn <em>Periode</em> positiv ist, wird der Timer sich solange wiederholen, bis er explizit im Skript deaktiviert wird.</li>
        <li id="once"><p>Wenn <em>Periode</em> negativ ist, wird der Timer nur einmal laufen. Zum Beispiel würde -100 den Timer nach 100 ms einmal ausführen und ihn dann deaktivieren, als hätte man <code>SetTimer <i>Callback</i>, "Off"</code> angegeben.</p>
        <p>Wenn <em>Callback</em> ein Closure oder ein via Skript erstelltes Objekt ist (also keine Funktion, des Typs <a href="../objects/Func.htm">Func</a>), wird der Timer automatisch gelöscht, nachdem die Timer-Funktion ihren Wert zurückgegeben hat, es sei denn, der Timer wurde wieder aktiviert. Dadurch kann das Objekt freigegeben werden, wenn es vom Skript nicht länger benötigt wird, aber das bedeutet auch, dass die <em>Periode</em> und <em>Priorität</em> des Timers verworfen werden.</p></li>
      </ul>
      <p><em>Periode</em> muss ein Integer sein. Verwendet man eine Variable oder einen Ausdruck, werden Nachkommastellen ignoriert. Ihr absoluter Wert darf nicht größer sein als 4294967295 ms (49,7 Tage).</p>
      <p><strong>Default</strong>: Wenn dieser Parameter leer ist und:<br>
      1) der Timer nicht existiert, wird der Timer mit einer Periode von 250 erstellt.<br>
      2) der Timer bereits vorhanden ist, wird er aktiviert und seine frühere <em>Periode</em> <a href="#reset">wiederhergestellt</a>, sofern eine <em>Priorität</em> noch nicht angegeben wurde.</p>

    </dd>

  <dt>Priorität</dt>
  <dd><p>Dieser optionale Parameter ist ein Integer zwischen -2147483648 und 2147483647 (oder ein <a href="../Variables.htm#Expressions">Ausdruck</a>), um die Thread-Priorität des Timers zu bestimmen. Fehlt dieser Parameter, gilt standardmäßig 0. Siehe <a href="../misc/Threads.htm">Threads</a> für weitere Details.</p>
      <p>Um die Priorität eines vorhandenen Timers zu ändern, ohne ihn anderweitig zu beeinflussen, lässt man den Parameter vor diesem leer.</p></dd>

</dl>

<h2>Bemerkungen</h2>
<p>Timer sind nützlich, weil sie asynchron laufen - das heißt, dass sie in einem bestimmten Intervall (Frequenz) ausgeführt werden, auch dann, wenn das Skript auf ein Fenster wartet, ein Dialogfenster anzeigt oder mit einer anderen Aufgabe beschäftigt ist. Unter anderem kann der Timer verwendet werden, um eine Aktion bei Abwesenheit des Benutzers durchzuführen (in Verbindung mit <a href="../Variables.htm#TimeIdle">A_TimeIdle</a>) oder um unerwünschte Fenster sofort wieder zu schließen, wenn sie erscheinen.</p>
<p>Timer erzeugen nur die Illusion, dass das Skript mehrere Aufgaben gleichzeitig durchführen kann. In Wirklichkeit werden zeitgesteuerte Funktionen genauso wie andere Threads behandelt: sie können unterbrechen oder von anderen Threads, wie z. B. eine <a href="../Hotkeys.htm">Hotkey-Subroutine</a>, unterbrochen werden. Siehe <a href="../misc/Threads.htm">Threads</a> für weitere Details.</p>
<p>Die Funktion eines erstellten, reaktivierten oder mit einer neuen <em>Periode</em> versehenen Timers wird nicht sofort aufgerufen; zuerst muss seine angegebene <em>Periode</em> verstreichen. Wenn der Timer sofort beginnen soll, müssen Sie die Timer-Funktion direkt aufrufen (allerdings wird das keinen neuen Thread starten, wie es der Timer selbst machen würde; demzufolge werden Einstellungen wie <a href="SendMode.htm">SendMode</a> nicht mit ihren Standardwerten beginnen).</p>
<p id="reset"><strong>Zurücksetzen</strong>: Wenn SetTimer auf einen bereits vorhandenen Timer angewendet wird und der 2. Parameter eine Nummer oder das Wort ON ist (oder weggelassen wird), wird der Timer zurückgesetzt; das heißt, dass seine Periode einmal komplett ablaufen muss, bevor seine Funktion erneut aufgerufen werden kann.</p>
<p id="Precision"><strong>Genauigkeit des Timers</strong>: Durch die Granularität (Ungenauigkeit) der Zeiterfassung im Betriebssystem wird <em>Periode</em> möglicherweise auf das nächstmögliche Vielfache von 10 oder 15.6 Millisekunden aufgerundet (abhängig vom Typ der installierten Hardware und Treiber). In Windows 2000/XP ist eine <em>Periode</em> zwischen 1 und 10 gleichbedeutend mit 10 oder 15.6. Eine kürzere Verzögerung kann mittels Loop+Sleep erreicht werden, wie bei <a href="Sleep.htm#ShorterSleep">DllCall+<span class="NoIndent">timeBeginPeriod</span>+Sleep</a> gezeigt.</p>
<p id="Reliability"><strong>Zuverlässigkeit</strong>: Es kann sein, dass ein Timer unregelmäßig läuft, wenn folgende Bedingungen auftreten:</p>
<ol>
  <li>Andere Anwendungen belasten die CPU ziemlich stark.</li>
  <li>Die Timer-Funktion braucht länger als die angebende Periode oder es gibt zu viele konkurrierende Timer.</li>
  <li>Der Timer wurde von einem anderen <a href="../misc/Threads.htm">Thread</a> unterbrochen, dazu zählen andere zeitgesteuerte Funktionen, <a href="../Hotkeys.htm">Hotkey-Subroutinen</a> oder <a href="../objects/Menu.htm">benutzerdefinierte Menüpunkte</a> (kann mit <a href="Critical.htm">Critical</a> verhindert werden). Falls das passiert und der unterbrechende Thread lange Zeit zum Beenden braucht, wird der unterbrochene Timer für diese Dauer deaktiviert. Allerdings werden alle anderen Timer weiterlaufen, indem sie den <a href="../misc/Threads.htm">Thread</a> unterbrechen, der den ersten Timer unterbrochen hat.</li>
  <li>Ein Skript kann nicht unterbrochen werden, wenn man <a href="Critical.htm">Critical</a> oder <a href="Thread.htm">Thread "Interrupt/Priority"</a> verwendet. In solchen Zeiten werden Timer nicht laufen. Wenn das Skript später wieder unterbrochen werden kann, wird jeder überfällige Timer so bald wie möglich einmal ausgeführt und danach normal fortgesetzt.</li>
</ol>
<p>Zwar funktionieren Timer auch, wenn das Skript <a href="Suspend.htm">gesperrt</a> ist, allerdings werden sie nicht laufen, wenn <a href="Thread.htm">Thread "NoTimers"</a> im <a href="../misc/Threads.htm">aktuellen Thread</a> vorhanden ist oder wenn ein Thread <a href="Pause.htm">pausiert</a> wurde. Darüber hinaus werden sie nicht funktionieren, wenn der Benutzer in einem der Skriptmenüs navigiert (wie z. B. das Tray-Menü oder eine Menüleiste).</p>
<p>Da Timer vorübergehend die aktuelle Aktivität des Skripts unterbrechen, sollten ihre Funktionen kurz gehalten werden (so dass sie schnell zum Ende kommen), wann immer eine lange Unterbrechung unerwünscht ist.</p>
<p id="otherremarks"><strong>Sonstige Bemerkungen</strong>: Timer, die die ganze Zeit laufen sollen, sollten üblicherweise im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> erstellt werden. Dagegen deaktivieren sich temporäre Timer oft mit ihren eigenen Funktionen (siehe Beispiele weiter unten).</p>
<p>Jedes Mal, wenn eine zeitgesteuerte Funktion aufgerufen wird, starten Einstellungen wie <a href="SendMode.htm">SendMode</a> mit ihren Standardwerten. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Wenn die <a href="../Hotkeys.htm">Hotkey</a>-Reaktionszeit von entscheidender Bedeutung ist (z. B. bei Spielen) und das Skript bestimmte Timer enthält, deren Funktionen länger als 5 ms zum Ausführen benötigen, dann sollte die folgende Funktion verwendet werden, um eine mögliche Verzögerung von 15 ms zu unterbinden. So eine Verzögerung würde ansonsten auftreten, wenn ein Hotkey exakt zu dem Zeitpunkt gedrückt wird, wo ein Timer-Thread in seiner unterbrechungsfreien Phase ist:</p>
<pre><a href="Thread.htm">Thread</a> "interrupt", 0  <em>; Macht alle Threads jederzeit unterbrechbar.</em></pre>
<p>Deaktiviert man einen Timer, während seine Funktion noch läuft, wird diese Funktion bis zu ihrem Ende fortgesetzt.</p>
<p>Die <a href="KeyHistory.htm">KeyHistory</a>-Funktion zeigt, wie viele Timer vorhanden und wie viele zurzeit aktiviert sind.</p>

<h2>Siehe auch</h2>
<p><a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread (Funktion)</a>, <a href="Critical.htm">Critical</a>, <a href="../objects/Functor.htm">Funktionsobjekte</a></p>

<h2>Beispiele</h2>
<pre class="NoIndent" id="ExampleClose"><em>; Beispiel #1: Schließt unerwünschte Fenster, sobald sie auftauchen:</em>
SetTimer "MailWarnungenSchließen", 250

MailWarnungenSchließen()
{
    WinClose "Microsoft Outlook", "Während der Kommunikation mit dem Server wurde das Zeitlimit überschritten"
    WinClose "Microsoft Outlook", "Es konnte keine Verbindung aufgebaut werden"
}</pre>
<pre class="NoIndent" id="ExampleWait"><em>; Beispiel #2: Wartet auf ein bestimmtes Fenster und alarmiert danach den Benutzer:</em>
SetTimer "Alarm1", 500

Alarm1()
{
    if !WinExist("Video-Konvertierung", "Prozess abgeschlossen")
        return
    <em>; Ansonsten:</em>
    SetTimer , "Off"  <em>; d. h. der Timer deaktiviert sich selbst.</em>
    MsgBox "Die Video-Konvertierung wurde abgeschlossen."
}</pre>
<pre class="NoIndent" id="ExampleCount"><em>; Beispiel #3: Erkennt, ob ein Hotkey einmal, zweimal oder dreimal gedrückt wurde. Dadurch
; kann ein Hotkey eine unterschiedliche Operation durchführen,
; je nachdem, wie oft er gedrückt wurde:</em>
#c::
TasteWinC()  <em>; Das ist ein <a href="../Hotkeys.htm#Function">Funktions-Hotkey</a>.</em>
{
    static winc_anzahl := 0
    if winc_eingaben &gt; 0 <em>; Da SetTimer bereits gestartet wurde, wird stattdessen der Tastendruck protokolliert.</em>
    {
        winc_eingaben += 1
        return
    }
    <em>; Ansonsten ist das der erste Tastendruck einer neuen Serie. Zählung wird
    ; auf 1 gesetzt und der Timer gestartet:</em>
    winc_anzahl := 1
    SetTimer "Nach400", -400 <em>; Wartet auf weitere Eingaben innerhalb eines 400-Millisekunden-Zeitfensters.</em>

    Nach400()  <em>; Das ist eine <a href="../Functions.htm#nested">verschachtelte Funktion</a>.</em>
    {
        if winc_eingaben = 1 <em>; Die Taste wurde einmal gedrückt.</em>
        {
            Run "m:\"  <em>; Öffnet einen Ordner.</em>
        }
        else if winc_eingaben = 2 <em>; Die Taste wurde zweimal gedrückt.</em>
        {
            Run "m:\multimedia"  <em>; Öffnet einen anderen Ordner.</em>
        }
        else if winc_eingaben &gt; 2
        {
            MsgBox "Drei oder mehr Klicks erkannt."
        }
        <em>; Unabhängig von der zuvor ausgelösten Aktion wird die Zählung zurückgesetzt,
        ; um die nächste Serie von Tastendrücken vorzubereiten:</em>
        winc_eingaben := 0
    }
}
</pre>
<pre class="NoIndent" id="ExampleClass"><em>; Beispiel #4: Eine <a href="../Objects.htm#Custom_Classes_method">Methode</a> als Timer-Funktion verwenden.</em>

counter := new SecondCounter
counter.Start
Sleep 5000
counter.Stop
Sleep 2000

<em>; Eine Beispiel-Klasse zum Zählen der Sekunden...</em>
class SecondCounter {
    __New() {
        this.interval := 1000
        this.count := 0
        <em>; Tick() hat einen impliziten Parameter "this", der eine Referenz auf
        ; das Objekt ist, daher müssen wir eine Funktion erstellen, die
        ; "this" und die aufzurufende Methode voneinander trennt:</em>
        this.timer := ObjBindMethod(this, "Tick")
    }
    Start() {
        SetTimer this.timer, this.interval
        ToolTip "Counter gestartet"
    }
    Stop() {
        <em>; Um den Timer auszuschalten, müssen wir dasselbe Objekt erneut übergeben:</em>
        SetTimer this.timer, "Off"
        ToolTip "Counter bei " this.count " gestoppt"
    }
    <em>; In diesem Beispiel ruft der Timer diese Methode auf:</em>
    Tick() {
        ToolTip ++this.count
    }
}</pre>
<p>Tipps bezüglich des oberen Beispiels:</p>
<ul>
  <li>Wir können auch <code>this.timer := this.Tick.<a href="../objects/Func.htm#Bind">Bind</a>(this)</code> verwenden. Wenn <code>this.timer</code> aufgerufen wird, wird es tatsächlich <code>this.Tick.<a href="../objects/Func.htm#Call">Call</a>(this)</code> aufrufen (außer dass <code>this.Tick</code> nicht neu berechnet wird). <a href="ObjBindMethod.htm">ObjBindMethod</a> hingegen erzeugt ein Objekt, das <code>this.Tick()</code> aufruft.</li>
  <li>Wenn wir <em>Tick</em> in <em>Call</em> umbenennen, können wir <code>this</code> direkt verwenden, anstelle von <code>this.timer</code>. Allerdings kann ObjBindMethod auch nützlich sein, wenn das Objekt mehrere Methoden hat, die von verschiedenen Ereignisquellen wie Hotkeys, Menüpunkte, GUI-Steuerelemente aufgerufen werden sollen.</li>
  <li>Beim Modifizieren des Timers, oder Löschen des Timers innerhalb einer Funktion/Methode, die von dem Timer aufgerufen wurde, kann man den <a href="#OmitCallback"><em>Callback</em>-Parameter einfach weglassen</a>. Dadurch entfällt in einigen Fällen die Notwendigkeit, das ursprüngliche Objekt, welches an SetTimer übergeben wurde, zu behalten.</li>
</ul>

</body>
</html>
