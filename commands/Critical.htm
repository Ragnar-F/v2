<!DOCTYPE HTML>
<html>
<head>
<title>Critical</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Critical</h1>

<p>Verhindert, dass der <a href="../misc/Threads.htm">aktuelle Thread</a> von anderen Threads unterbrochen werden kann, oder macht ihn unterbrechbar.</p>

<pre class="Syntax"><span class="func">Critical</span> <span class="optional">"Off"</span>
<span class="func">Critical</span> 50 <em>; Siehe <a href="#Interval">Bemerkungen</a>.</em></pre>
<p>Wenn der erste Parameter nicht vorhanden (oder "On") ist, wird der <a href="../misc/Threads.htm">aktuelle Thread</a> kritisch gemacht. Das heißt, dass dieser Thread nicht von anderen Threads unterbrochen werden kann. Enthält der erste Parameter das Wort Off oder die Nummer 0, wird der aktuelle Thread sofort unterbrechbar, unabhängig von den Einstellungen in <a href="Thread.htm">Thread Interrupt</a>.</p>

<h3 id="Behave">Verhalten von kritischen Threads</h3>
<p>Im Gegensatz zu <a href="../misc/Threads.htm">hoch-priorisierten</a> Threads werden Ereignisse während eines kritischen Threads nicht verworfen. Drückt der Benutzer beispielsweise einen <a href="../Hotkeys.htm">Hotkey</a>, während der aktuelle Thread kritisch ist, wird dieser Hotkey auf unbestimmte Zeit zwischengespeichert, bis der aktuelle Thread endet oder unkritisch gemacht wird. Dabei wird der Hotkey als neuer Thread ausgeführt.</p>
<p>In Notfällen wird ein kritischer Thread unterbrochen. Notfälle sind: 1) <a href="OnExit.htm">OnExit</a>-Callback-Funktion; 2) <a href="OnMessage.htm">OnMessage()</a>-Funktion, die eine Meldungsnummer kleiner als 0x312 überwacht (oder ein <a href="RegisterCallback.htm">Callback</a>, der von so einer Meldung ausgelöst wird); und 3) <a href="RegisterCallback.htm">Callback</a>, der indirekt vom kritischen Thread selbst ausgelöst wird (z. B. mittels <a href="PostMessage.htm">SendMessage</a> oder <a href="DllCall.htm">DllCall</a>). Um diese Unterbrechungen zu vermeiden, sollten solche Funktionen vorübergehend deaktiviert werden.</p>
<p>Ein kritischer Thread wird unterbrechbar, sobald eine <a href="MsgBox.htm">MsgBox</a> oder ein anderes Dialogfenster angezeigt wird. Im Gegensatz zu <a href="Thread.htm">Thread Interrupt</a> wird der Thread allerdings wieder kritisch, wenn der Benutzer das Dialogfenster schließt.</p>

<h3 id="Off">Critical Off</h3>
<p>Bei zwischengespeicherten Ereignissen, die darauf warten, neue Threads zu starten, führt <code>Critical Off</code> nicht zu einer sofortigen Unterbrechung des aktuellen Threads. Stattdessen wird dieser Thread erst nach durchschnittlich 5 ms unterbrochen. Daher ist es zu mehr als 99,999 % wahrscheinlich, dass mindestens eine Zeile nach <code>Critical Off</code> ausgeführt wird, bevor eine Unterbrechung erfolgt. Du kannst Unterbrechungen sofort wirksam werden lassen, wenn du eine Verzögerung wie <code><a href="Sleep.htm">Sleep -1</a></code> verwendest oder <a href="WinWait.htm">WinWait</a> bei einem noch nicht existierenden Fenster anwendest.</p>
<p><code>Critical Off</code> unterbricht die Nicht-Unterbrechbarkeit des aktuellen Threads, selbst wenn der Thread nicht Critical war, und lässt Ereignisse wie <a href="../objects/GuiOnEvent.htm#Size">Size</a> demzufolge schneller oder vorhersehbarer durchführen.</p>

<h3 id="Settings">Thread-Einstellungen</h3>
<p>Siehe <a href="../Variables.htm#IsCritical">A_IsCritical</a> für Informationen, wie die aktuelle Einstellung von Critical gespeichert oder wiederhergestellt werden kann. Da Critical jedoch eine thread-spezifische Einstellung ist, wird der darunterliegende/fortgesetzte Thread (sofern vorhanden) automatisch unkritisch, wenn ein kritischer Thread endet. Folglich gibt es keinen Grund, "Critical Off" ans Ende eines Threads zu setzen.</p>
<p>Solange Critical nicht im automatischen Ausführungsbereich (oberster Teil des Skripts) verwendet wird, starten alle Threads unkritisch (obwohl die Einstellungen von <a href="Thread.htm">Thread Interrupt</a> noch gelten). Aktiviert der automatische Ausführungsbereich hingegen Critical, wird jeder neu gestartete <a href="../misc/Threads.htm">Thread</a> (z. B. <a href="../Hotkeys.htm">Hotkey</a>, <a href="Menu.htm">benutzerdefinierter Menüpunkt</a> oder <a href="SetTimer.htm">zeitgesteuerte</a> Subroutine) von Beginn an kritisch sein.</p>
<p>Der Befehl <a href="Thread.htm">Thread NoTimers</a> ist vergleichbar mit Critical, außer dass dieser nur Unterbrechungen von <a href="SetTimer.htm">Timern</a> verhindern kann.</p>

<h3 id="Interval">Meldungsüberprüfungsintervall</h3>
<p>Eine positive Zahl im ersten Parameter (z. B. <code>Critical 30</code>) führt dazu, dass Critical aktiviert wird, sowie auch die Überprüfungsdauer in Millisekunden der internen Meldungswarteschlange geändert wird. Falls nichts angegeben ist, werden die Meldungen bei aktiviertem Critical alle 16 ms und bei deaktiviertem Critical alle 5 ms überprüft. Die Erhöhung des Intervalls führt auch dazu, dass der Empfang von Meldungen/Ereignissen nach hinten verschoben wird, wodurch der <a href="../misc/Threads.htm">aktuelle Thread</a> mehr Zeit hat, zu enden. Das verringert die Wahrscheinlichkeit, dass bestimmte <a href="OnMessage.htm">OnMessage()</a>- und <a href="../objects/GuiOnEvent.htm">GUI-Ereignisse</a> aufgrund von "Thread wird bereits ausgeführt" verloren gehen. Wartende Befehle wie <a href="Sleep.htm">Sleep</a> und <a href="WinWait.htm">WinWait</a> werden Meldungen unabhängig dieser Einstellung überprüfen (als Übergangslösung kann <code>DllCall("Sleep", UInt, 500)</code> verwendet werden). Hinweis: Ist das Meldungsüberprüfungsintervall zu hoch, könnte die Reaktionsfähigkeit von verschiedenen Ereignissen reduziert werden (z. B. beim Neuzeichnen eines <a href="GuiCreate.htm">GUI</a>-Fensters).</p>
<p>Seit v1.0.47 führt die Angabe einer positiven Zahl im ersten Parameter (z. B. <code>Critical 30</code>) dazu, dass Critical aktiviert wird, sowie auch die Überprüfungsdauer in Millisekunden der internen Meldungswarteschlange geändert wird. Falls nichts angegeben ist, werden die Meldungen bei aktiviertem Critical alle 16 ms und bei deaktiviertem Critical alle 5 ms überprüft. Die Erhöhung des Intervalls führt auch dazu, dass der Empfang von Meldungen/Ereignissen nach hinten verschoben wird, wodurch der <a href="../misc/Threads.htm">aktuelle Thread</a> mehr Zeit hat, zu enden. Das verringert die Wahrscheinlichkeit, dass bestimmte <a href="OnMessage.htm">OnMessage()</a>- und <a href="../objects/GuiOnEvent.htm">GUI-Ereignisse</a> aufgrund von "Thread wird bereits ausgeführt" verloren gehen. Wartende Befehle wie <a href="Sleep.htm">Sleep</a> und <a href="WinWait.htm">WinWait</a> werden Meldungen unabhängig dieser Einstellung überprüfen (als Übergangslösung kann <code>DllCall("Sleep", UInt, 500)</code> verwendet werden). Hinweis: Ist das Meldungsüberprüfungsintervall zu hoch, könnte die Reaktionsfähigkeit von verschiedenen Ereignissen reduziert werden (z. B. beim Neuzeichnen eines <a href="GuiCreate.htm">GUI</a>-Fensters).</p>

<h3>Siehe auch</h3>
<p><a href="Thread.htm">Thread (Befehl)</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="Hotkey.htm">Hotkey</a>, <a href="Menu.htm">Menu</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h3>Beispiel</h3>
<pre class="NoIndent">#space::  <em>; Hotkey: WIN+LEERTASTE</em>
Critical
ToolTip Es wird kein neuer Thread gestartet, solange dieser ToolTip nicht verschwindet.
Sleep 3000
ToolTip  <em>; ToolTip ausschalten.</em>
return  <em>; Beendet den Thread. Jeder darunterliegende Thread ist laut Definition unkritisch.</em></pre>

</body>
</html>
