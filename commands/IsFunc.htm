<!DOCTYPE HTML>
<html lang="de">
<head>
<title>IsFunc - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die IsFunc-Funktion gibt eine Nummer ungleich 0 zurück, wenn eine bestimmte Funktion innerhalb des aktuellen Gültigkeitsbereichs sichtbar ist." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>IsFunc</h1>

<p>Gibt eine Nummer ungleich 0 zurück, wenn eine bestimmte Funktion innerhalb des aktuellen Gültigkeitsbereichs sichtbar ist.</p>

<pre class="Syntax">MinParamsPlus1 := <span class="func">IsFunc</span>(FunktionName)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>FunktionName</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name der Funktion, deren minimale Anzahl von Parametern abgerufen werden soll. <em>FunktionName</em> muss explizit im Skript definiert sein oder eine interne Funktion sein.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die minimale Anzahl an Parametern zurück, addiert mit 1 (also 1 für eine Funktion ohne Parameter, 2 für eine Funktion mit einem Parameter und so weiter). Wenn <em>FunktionName</em> keine interne Funktion ist oder im Skript nicht explizit vorhanden ist (z. B. durch <a href="_Include.htm">#Include</a> oder einen nicht-dynamischen Aufruf einer <a href="../Functions.htm#lib">Bibliotheksfunktion</a>), wird sie eine 0 zurückgeben.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>FunktionName</em> ein Objekt ist. Um stattdessen zu ermitteln, ob ein Objekt aufrufbar zu sein scheint, verwenden Sie eine der folgenden Vorgehensweisen:</p>
<ul>
  <li><code>Wert.HasMethod("Call")</code> funktioniert standardmäßig mit allen AutoHotkey-Werten und -Objekten, und lässt zu, dass HasMethod bei einigen Objekten oder Klassen überschrieben werden kann. Bei COM-Objekten wird diese Vorgehensweise in der Regel fehlschlagen (eine Ausnahme auslösen oder das falsche Ergebnis erzeugen), es sei denn, das COM-Objekt ist tatsächlich ein AutoHotkey-Objekt aus einem anderen Prozess.</li>
  <li><code>HasMethod(Wert, "Call")</code> funktioniert mit allen AutoHotkey-Werten und -Objekten und kann nicht überschrieben werden, gibt aber False zurück, wenn die Existenz einer <em>Call</em>-Methode nicht bestimmt werden kann (z. B. weil <em>Wert</em> ein COM-Objekt ist).</li>
</ul>
<p>Die Suche umfasst alle Funktionen im Gültigkeitsbereich, in der IsFunc aufgerufen wurde. Zum Beispiel werden alle Funktionen einbezogen, die direkt in der aktuellen Funktion <a href="../Functions.htm#nested">verschachtelt</a> sind.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="../Functions.htm#DynCall">Dynamischer Aufruf einer Funktion</a>, <a href="../Objects.htm#Function_References">Funktionsreferenzen</a>, <a href="../objects/Func.htm">Func-Objekt</a>, <a href="Func.htm">Func</a>, <a href="../Variables.htm#ThisFunc">A_ThisFunc</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Meldet die Anzahl der Pflichtparameter einer Funktion.</p>
<pre>Anzahl := IsFunc("RegExReplace") <em>; Hier kann eine beliebige Funktion benutzt werden.</em>
if Anzahl
    MsgBox "Diese Funktion existiert und hat " Anzahl-1 " Pflichtparameter."
else
    MsgBox "Diese Funktion existiert nicht."</pre>
</div>

</body>
</html>
