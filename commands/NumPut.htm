<!DOCTYPE HTML>
<html lang="de">
<head>
<title>NumPut - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die NumPut-Funktion speichert eine binäre Nummer auf eine bestimmte Adresse + Offset." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>Speichert eine binäre Nummer auf eine bestimmte Adresse + Offset.</p>
<pre class="Syntax"><span class="func">NumPut</span> Nummer, VarOderAdresse <span class="optional">, Offset := 0</span><span class="optional">, Typ := "UPtr"</span></pre>

<h2>Parameter</h2>
<dl>

  <dt>Nummer</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die zu speichernde Nummer.</p>
  </dd>

  <dt>VarOderAdresse</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variables">Variable</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
		<p>Eine Speicheradresse oder Variable. Wenn <em>VarOderAdresse</em> eine Variable wie <code>MeineVar</code> ist und enthält sie eine Zeichenkette (keine reine Zahl), wird die Adresse des Zeichenkettenpuffers der Variable verwendet. Im Prinzip das gleiche wie, als würde man <code>&amp;MeineVar</code> übergeben, allerdings führt das Weglassen von "&amp;" zur besseren Performance und stellt sicher, dass die Zieladresse + Offset <a href="VarSetCapacity.htm">gültig</a> ist. Wenn die Variable eine reine Zahl enthält, wird diese Zahl als Adresse behandelt.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Eine Zahl (in Bytes), die mit <em>VarOderAdresse</em> addiert wird, um die Zieladresse zu bestimmen.</p>
  </dd>

  <dt>Typ</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Eine der folgenden Zeichenketten (standardmäßig UPtr, wenn dieser Parameter fehlt):<br>
      UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr oder UPtr.</p>
      <p>Diese Typen müssen, im Gegensatz zu den Typen von DllCall, in Anführungszeichen gesetzt werden, wenn sie direkt geschriebene Zeichenketten sein sollen.</p>
      <p>Um mehr darüber zu erfahren, siehe <a href="DllCall.htm#types">DllCall-Typen</a>.</p>
    </dd>

</dl>

<h2>Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Adresse ganz rechts des gerade geschriebenen Elements zurück. Dieser Rückgabewert wird häufig verwendet, wenn eine Folge von Nummern unterschiedlichen Typs geschrieben wird, wie in einer Struktur für <a href="DllCall.htm">DllCall</a>.</p>

<h2>Allgemeine Bemerkungen</h2>
<p>Überschreitet ein Integer den Gültigkeitsbereich des angegebenen <em>Typ</em>s, werden seine höchstwertigen Bytes ignoriert; z. B. würde <code>NumPut(257, Var, 0, "Char")</code> nur die Zahl 1 speichern.</p>
<p>Sind nur drei Parameter vorhanden, kann der dritte Parameter entweder <em>Offset</em> oder <em>Typ</em> sein. Zum Beispiel wäre <code>NumPut(x, var, "int")</code> gültig.</p>
<p>Es wird eventuell eine Ausnahme ausgelöst, wenn die Zieladresse ungültig ist. Allerdings ist es möglich, dass einige ungültige Adressen nicht als solches erkannt werden, was zu unvorhersehbaren Verhalten führen könnte.</p>

<h2>Siehe auch</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="VarSetCapacity.htm">VarSetCapacity</a></p>


</body>
</html>
