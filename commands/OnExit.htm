<!DOCTYPE HTML>
<html>
<head>
<title>OnExit</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>OnExit</h1>

<p>Bestimmt eine <a href="../Functions.htm">Funktion</a>, die automatisch gestartet werden soll, wenn das Skript beendet wird.</p>

<pre class="Syntax">OnExit(Func [, HinzufügenEntfernen])</pre>
<h3>Parameter</h3>
<dl>

  <dt>Func</dt>
  <dd><p>Ein Funktionsname oder <a href="../objects/Functor.htm">Funktionsobjekt</a>, die aufgerufen werden sollen, wenn das Skript beendet wird. Optional kann die Funktion Parameter definieren, wie unten gezeigt. Wenn eine OnExit-Funktion einen Integer ungleich null zurückgibt, wird das Skript nicht beendet. Ansonsten wird das Skript beendet, nachdem alle registrierten Funktionen aufgerufen wurden.</p>
  <pre class="Syntax">ExitFunk(<a href="#ExitReason">ExitReason</a>, <a href="ExitApp.htm">ExitCode</a>)</pre></dd>
  
  <dt>HinzufügenEntfernen</dt>
  <dd><p>Eines der folgenden Werte:<br>
  <strong>1</strong> (Standard): Rufe die Funktion nach anderen zuvor registrierten Funktionen auf.<br>
  <strong>-1</strong>: Rufe die Funktion vor anderen zuvor registrierten Funktionen auf.<br>
  <strong>0</strong>: Rufe die Funktion nicht auf.</p>
  </dd>

</dl>

<h3>Bemerkungen</h3>
<p>Es können beliebig viele OnExit-Funktionen registriert werden. Eine OnExit-Funktion sollte in der Regel nicht ExitApp aufrufen; wäre dies der Fall, würde das Skript sofort beendet werden.</p>
<p>OnExit-Funktionen werden aufgerufen, wenn das Skript in irgendeiner Form beendet wird (nur nicht, wenn das Beenden von so etwas wie "Task beenden" erzwungen wird). Sie wird auch aufgerufen, wann immer <a href="_SingleInstance.htm">#SingleInstance</a> und <a href="Reload.htm">Reload</a> eine vorherige Instanz zum Beenden auffordert.</p>
<p>Mit <code><a href="OnMessage.htm#shutdown">OnMessage(0x11, "WM_QUERYENDSESSION")</a></code> kann das Herunterfahren oder Abmelden des Betriebssystems erkannt und optional abgebrochen werden.</p>
<p>Der OnExit-<a href="../misc/Threads.htm">Thread</a> nimmt keine Rücksicht auf <a href="_MaxThreads.htm">#MaxThreads</a> (er wird bei Bedarf immer gestartet). Darüber hinaus kann dieser Thread, während er läuft, nicht von anderen <a href="../misc/Threads.htm">Threads</a> unterbrochen werden, einschließlich <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="SetTimer.htm">zeitgesteuerte Subroutinen</a>. Allerdings wird er unterbrochen (und das Skript beendet), wenn der Benutzer den Menüpunkt Exit im Infobereichsmenü oder Hauptmenü auswählt, oder das Skript aufgrund von <a href="Reload.htm">Reload</a> oder <a href="_SingleInstance.htm">#SingleInstance</a> zum Beenden aufgefordert wird. Aus diesem Grund sollte die OnExit-Funktion so gestaltet werden, dass sie schnell zum Ende kommen kann, sofern der Benutzer das nicht will.</p>
<p>Wenn der OnExit-<a href="../misc/Threads.htm">Thread</a> auf einen fehlerhaften Zustand wie z. B. Laufzeitfehler stößt, wird das Skript beendet.</p>
<p>Wenn der OnExit-<a href="../misc/Threads.htm">Thread</a> aufgrund von <a href="Exit.htm">Exit</a> oder <a href="ExitApp.htm">ExitApp</a> gestartet wurde, wird der Exitcode sofern vorhanden verwendet, es sei denn, eine OnExit-Funktion gibt True zurück (das ein Exit verhindern würde) oder ruft ExitApp selbst auf.</p>
<p>Immer wenn ein Exitversuch erfolgt, beginnt jede OnExit-Funktion mit den Standardeinstellungen von Befehlen wie <a href="SendMode.htm">SendMode</a>. Diese Standardeinstellungen können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<p>Wenn eine OnExit-Funktion Parameter verwendet, wird ihr erster Parameter eines der folgenden Wörter sein:</p>
<table class="info" id="ExitReason">
  <tr id="logoff">
    <td>Logoff</td>
    <td>Der Benutzer meldet sich ab.</td>
  </tr>
  <tr>
    <td>Shutdown</td>
    <td>Das System wird heruntergefahren oder neu gestartet (z. B. mit dem <a href="Shutdown.htm">Shutdown</a>-Befehl).</td>
  </tr>
  <tr>
    <td>Close</td>
    <td>Das Skript hat eine WM_CLOSE- oder WM_QUIT-Nachricht empfangen, hatte einen kritischen Fehler, oder wurde auf andere Weise geschlossen. Zwar sind sie alle ungewöhnlich, allerdings kann es sein, dass WM_CLOSE aufgrund von <a href="WinClose.htm">WinClose</a> erzeugt wird, wenn man diesen Befehl auf das Hauptfenster des Skripts anwendet. Um das zu verhindern, muss das Hauptfenster mit <code>Send, !{F4}</code> geschlossen werden.</td>
  </tr>
  <tr>
    <td>Error</td>
    <td>Ein Laufzeitfehler ist in einem nicht-<a href="_Persistent.htm">persistenten</a> Skript aufgetreten. Ein Laufzeitfehler ist beispielsweise ein <a href="Run.htm">Run/RunWait</a>, der das angegebene Programm oder Dokument nicht öffnen kann.</td>
  </tr>
  <tr>
    <td>Menu</td>
    <td>Der Benutzer hat Exit im Hauptfenster-Menü oder voreingestellten Infobereichsmenü ausgewählt.</td>
  </tr>
  <tr>
    <td>Exit</td>
    <td>Es wurden der <a href="Exit.htm">Exit</a>- oder <a href="ExitApp.htm">ExitApp</a>-Befehl verwendet (einschließlich <a href="Menu.htm">benutzerdefinierte Menüpunkte</a>).</td>
  </tr>
  <tr>
    <td>Reload</td>
    <td>Das Skript wird via <a href="Reload.htm">Reload</a>-Befehl oder -Menüpunkt neu geladen.</td>
  </tr>
  <tr>
    <td>Single</td>
    <td>Das Skript wird aufgrund von <a href="_SingleInstance.htm">#SingleInstance</a> mit einer neuen Instanz von sich selbst ersetzt.</td>
  </tr>
</table>

<h3>Siehe auch</h3>
<p><a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="ExitApp.htm">ExitApp</a>, <a href="Shutdown.htm">Shutdown</a>, <a href="_Persistent.htm">#Persistent</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="Menu.htm">Menu</a></p>

<h3 id="Examples">Beispiele</h3>
<p>Das folgende Beispiel verwendet <a href="_Persistent.htm">#Persistent</a> , um zu verhindern, dass das Skript automatisch beendet wird. Nachdem du das Skript gestartet hast, kannst du einen Rechtsklick auf das Infobereichssymbol machen und dann <em>Exit</em> auswählen, um die OnExit-Funktion zu testen. Klicke danach auf "Ja", um das Skript zu beenden, oder auf "Nein", um es weiter laufen zu lassen.</p>
<pre class="NoIndent">#Persistent

<em>; Registriert eine Funktion, die bei Exit aufgerufen werden soll:</em>
OnExit("ExitFunk")

<em>; Registriert ein Objekt, das bei Exit aufgerufen werden soll:</em>
OnExit(<a href="ObjBindMethod.htm">ObjBindMethod</a>(MeinObjekt, "Beenden"))

ExitFunk(ExitReason, ExitCode)
{
    if ExitReason != "Logoff" and ExitReason != "Shutdown"
    {
        MsgBox, 4, , Wollen Sie das Skript wirklich beenden?
        if A_MsgBoxResult = "No"
            return 1  <em>; OnExit-Funktionen müssen ungleich null zurückgeben, um ein Exit zu verhindern.</em>
    }
    <em>; Rufe ExitApp nicht auf -- dies würde verhindern, dass andere OnExit-Funktionen aufgerufen werden können.</em>
}

class MeinObjekt
{
    Beenden()
    {
        MsgBox, MeinObjekt räumt vor dem Beenden auf...
        <em>/*
        this.SageAufWiedersehen()
        this.SchließeNetzwerkVerbindungen()
        */</em>
    }
}</pre>

</body>
</html>
