<!DOCTYPE HTML>
<html>
<head>
<title>#If</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>


<h1>#If</h1>

<p>Erstellt kontextabhängige <a href="../Hotkeys.htm">Hotkeys</a> und <a href="../Hotstrings.htm">Hotstrings</a>. Solche Hotkeys können je nach Ergebnis des Ausdrucks unterschiedliche (oder gar keine) Aktionen ausführen.</p>

<pre class="Syntax"><span class="func">#If</span> <span class="optional">Ausdruck</span></pre>
<h3>Parameter</h3>
<dl>

  <dt>Ausdruck</dt>
  <dd><p>Beliebiger gültiger <a href="../Variables.htm#Expressions">Ausdruck</a>.</p></dd>

</dl>

<h3>Grundlagen zur Bedienung</h3>
<p>Es kann ein beliebiger gültiger Ausdruck verwendet werden, um den Kontext zu definieren, bei dem ein Hotkey aktiv sein soll. Zum Beispiel:</p>
<pre>#If WinActive("ahk_class Notepad") or WinActive(Fenstertitel)
#Space::MsgBox Sie haben WIN+LEERTASTE im Editor oder %Fenstertitel% gedrückt.</pre>
<p>Die #If-Direktive ist wie die #IfWin-Direktive von der Position abhängig: sie beeinflusst nur Hotkeys und Hotstrings, die sich im Skript physisch darunter befinden. Zudem schließen sich #If und #IfWin gegenseitig aus; das heißt, dass nur das aktuellste #If oder #IfWin wirksam sein wird.</p>
<p>Um die Kontextabhängigkeit zu deaktivieren, muss #If oder #IfWin ohne Parameter angegeben werden. Zum Beispiel:</p>
<pre>#If</pre>

<h3>Allgemeine Bemerkungen</h3>
<p>Sobald ein Hotkey gedrückt wird, wird der #If-Ausdruck ausgewertet, um zu überprüfen, ob der Hotkey aktiviert werden soll. Möglicherweise kann das Betriebssystem erst wieder auf Tastatur- oder Mauseingaben reagieren, wenn die Ausdrucksauswertung das Ende erreicht oder das <a href="_IfTimeout.htm">Zeitlimit überschritten</a> hat. Sendet man Tastatureingaben oder Mausklicks während der Auswertung des Ausdrucks (z. B. von einer per Direktive aufgerufene Funktion), kann es zu Problemen kommen, die unbedingt verhindert werden sollten.</p>
<p>Der Ausdruck könnte auch ausgewertet werden, wann immer das Programm in Erfahrung bringen muss, ob der Hotkey aktiv ist. Zum Beispiel könnte der #If-Ausdruck für eine benutzerdefinierte Kombination wie <code>a &amp; b::</code> ausgewertet werden, wenn die Präfix-Taste (in diesem Fall <code>a</code>) gedrückt wird, um festzustellen, ob sie als benutzerdefinierte Modifikatortaste agieren soll.</p>
<p>Aus diesen Gründen sollte der Ausdruck kurz gehalten werden, so dass er schnell und ohne Nebeneffekte durchgeführt werden kann.</p>
<p>Das Setzen von <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> und <a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a> basiert auf den Hotkey, den der aktuelle #If-Ausdruck ausgewertet hat.</p>
<p><a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a> und <a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a> enthalten die vorherigen Werte von den "This"-Variablen.</p>

<h3>Siehe auch</h3>
<p>Die meisten Verhaltenseigenschaften von <a href="_IfWinActive.htm">#IfWin</a>-Direktiven gelten auch für #If.</p>
<p>Mit <a href="_IfTimeout.htm">#IfTimeout</a> kann der Standardwert des Zeitlimits überschrieben werden.</p>

<h3 id="Examples">Beispiele</h3>
<pre class="NoIndent">
<em>; Beispiel 1: Anpassen der Lautstärke durch Drehen des Mausrades innerhalb der Taskleiste.</em>
#If MausIstÜber("ahk_class Shell_TrayWnd")
WheelUp::Send {Volume_Up}
WheelDown::Send {Volume_Down}

MausIstÜber(Fenstertitel) {
    MouseGetPos,,, Fenster
    return WinExist(Fenstertitel . " ahk_id " . Fenster)
}

<em>; Beispiel #2: Einfaches wort-löschendes Tastenkürzel für alle Eingabefelder.</em>
#If AktivesSteuerelementIstKlasse("Edit")
^BS::Send ^+{Left}{Del}
^Del::Send ^+{Right}{Del}

AktivesSteuerelementIstKlasse(Klasse) {
    FokusSteuerelement := ControlGetFocus("A")
    FokusSteuerelementHwnd := ControlGetHwnd(FokusSteuerelement, "A")
    FokusSteuerelementKlasse := WinGetClass("ahk_id " FokusSteuerelementHwnd)
    return (FokusSteuerelementKlasse=Klasse)
}

<em>; Beispiel #3: Kontextunabhängiger Hotkey.</em>
#If
Esc::ExitApp

<em id="ex4">; Beispiel #4: Dynamische Hotkeys. <b>Benötigt Beispiel #1.</b></em>
NumpadAdd::
Hotkey, If, MausIstÜber("ahk_class Shell_TrayWnd")
if (zweimalhoch := !zweimalhoch)
    Hotkey, WheelUp, ZweimalHoch
else
    Hotkey, WheelUp, WheelUp
return

ZweimalHoch:
Send {Volume_Up 2}
return
</pre>

</body>
</html>
