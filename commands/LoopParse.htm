<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop Parse - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Loop-Parse-Anweisung ruft Teile (Felder) einer Zeichenkette einzeln ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop Parse</h1>

<p>Ruft Teile (Felder) einer Zeichenkette einzeln ab.</p>

<pre class="Syntax"><span class="func">Loop Parse</span> Zeichenkette <span class="optional">, Trennzeichen, ZuEntfernendeZeichen</span></pre>
<h2>Parameter</h2>
<dl>

  <dt>Zeichenkette</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die geparst werden soll.</p>
  </dd>

  <dt>Trennzeichen</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Wenn dieser Parameter weggelassen wird oder leer ist, wird jedes Zeichen der eingehenden Zeichenkette als einzelne Teilzeichenkette behandelt.</p>
      <p id="CSV">Wenn dieser Parameter <code>"CSV"</code> ist, geht die Schleife davon aus, dass die Zeichenkette komma-getrennten Werte enthält (Comma-Separated Values). Das folgende Beispiel ist eine CSV-Zeile, die mit MS-Excel erstellt wurde:</p>
<pre class="no-highlight">"Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" in direkt geschriebenen Anführungszeichen",,"Letztes Feld, das ein direkt geschriebenes Komma hat"</pre>
      <p>Ansonsten kann <em>Trennzeichen</em> ein oder mehrere Zeichen enthalten (Groß-/Kleinschreibung-sensitiv), um zu bestimmen, wo die Abgrenzungen zwischen den Teilzeichenketten erfolgen sollen.</p>
      <p>Die Trennzeichen selbst werden nicht als Teil der Teilzeichenkette angesehen. Wenn zwischen zwei Trennzeichen nichts finden ist, wird die entsprechende Teilzeichenkette leer sein.</p>
      <p>Zum Beispiel: <code>','</code> (ein Komma) würde die Zeichenkette jeweils bei einem Komma teilen. Im Vergleich dazu würde <code>A_Tab A_Space</code> eine neue Teilzeichenkette erstellen, wann immer ein Leer- oder Tabulatorzeichen in der Zeichenkette gefunden wird.</p>
      <p>Um eine Zeichenkette anstelle eines Zeichens als Trennung zu verwenden, ersetzt man mit <a href="StrReplace.htm">StrReplace</a> zunächst alle Vorkommen der Zeichenkette mit einem einzelnen Zeichen, das nie im Text genutzt wird. Zum Beispiel: ¢¤¥¦§©ª«®µ¶. Das folgende Beispiel zeigt, wie die Zeichenkette &lt;br&gt; als Trennung verwendet werden kann:</p>
      <pre>NeueHTML := StrReplace(HTMLZeichenkette, "&lt;br&gt;", "¢")
Loop Parse, NeueHTML, "¢" <em>; Parst die Zeichenkette basierend auf das Cent-Symbol.</em>
{
...
}</pre>
  </dd>

  <dt>ZuEntfernendeZeichen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine optionale Liste mit Zeichen (Groß-/Kleinschreibung-sensitiv), die bei jeder Teilzeichenkette am Anfang und Ende entfernt werden sollen. Wenn <em>ZuEntfernendeZeichen</em> beispielsweise <code>A_Space A_Tab</code> wäre, wird bei jeder abgerufenen Teilzeichenkette Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, gibt <em>ZuEntfernendeZeichen</em> an, welche Zeichen ignoriert werden sollen (die Schleife wird diese nicht sehen).</p>
  </dd>

</dl>

<h2>Bemerkungen</h2>
<p>Eine zeichenkette-parsende Schleife ist nützlich, wenn Sie alle Felder in einer Zeichenkette einzeln abarbeiten wollen. Eine parsende Schleife verbraucht weniger Speicher als <a href="StrSplit.htm">StrSplit</a> (obwohl in beiden Fällen die Speichernutzung temporär ist) und ist in den meisten Fällen leichter zu verwenden.</p>
<p id="LoopField">Die interne Variable <strong>A_LoopField</strong> ist nur in einer parsenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Teilzeichenkette (Feld). Wenn eine innere parsende Schleife von einer äußeren parsenden Schleife umschlossen ist, wird das Feld von der innersten Schleife Vorrang haben.</p>
<p>Zwar gibt es nicht die interne Variable "A_LoopDelimiter", allerdings zeigt das Beispiel ganz unten, wie man ermitteln kann, welche Trennung bei jedem Feld verwendet wurde.</p>
<p>Die Zeichenkette oder ihre Felder können eine unbegrenzte Größe haben.</p>
<p>Mit der <a href="Sort.htm">Sort</a>-Funktion können die Felder vor dem Parsen neu angeordnet werden.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>
<h2>Siehe auch</h2>
<p><a href="StrSplit.htm">StrSplit</a>, <a href="LoopRead.htm">Datei-lesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>
<h2>Beispiele</h2>
<pre class="NoIndent"><em>; Beispiel #1:</em>
Farben := "rot,grün,blau"
Loop parse, Farben, ","
{
    MsgBox "Farbnummer " A_Index " ist " A_LoopField
}</pre>
<pre class="NoIndent"><em>; Beispiel #2: Liest den Inhalt einer Variable zeilenweise aus (so ähnlich wie eine <a href="LoopRead.htm">Datei-lesende</a> Schleife).
; Mit <a href="FileRead.htm">FileRead</a> kann eine Datei in eine Variable geladen werden:</em>
Loop parse, Dateiinhalt, "`n", "`r"  <em>; Durch die Angabe von `n vor `r können sowohl Windows- als auch Unix-Dateien geparst werden.</em>
{
    Result := MsgBox("Zeilennummer " A_Index " ist " A_LoopField ".`n`nWeiter?",, "y/n")
}
until Result = "No"</pre>
<pre class="NoIndent"><em>; Beispiel #3: Dieses Beispiel ist das gleiche wie oben, außer dass es für die Zwischenablage ist.
; Es ist nützlich, wann immer die Zwischenablage Dateien enthält, wie z. B. solche, die von einem offenen Explorer-Fenster
; kopiert wurden (das Programm wandelt solche Dateien automatisch in ihre Dateinamen um):</em>
Loop parse, clipboard, "`n", "`r"
{
    Result := MsgBox("Dateinummer " A_Index " ist " A_LoopField ".`n`nWeiter?",, "y/n")
}
until Result = "No"</pre>
<pre class="NoIndent"><em>; Beispiel #4: Parst eine Datei mit kommagetrennten Werten (CSV):</em>
Loop read, "C:\Datenbank-Export.csv"
{
    Zeilennummer := A_Index
    Loop parse, A_LoopReadLine, "CSV"
    {
        Result := MsgBox("Feld " Zeilennummer "-" A_Index " ist:`n" A_LoopField "`n`nWeiter?",, "y/n")
        if Result = "No"
            return
    }
}</pre>
<pre class="NoIndent"><em>; Beispiel #5: Dieses Beispiel stellt fest, welche Trennung verwendet wurde.</em>

<em>; Initialisiert die zu durchsuchenden Zeichenkette.</em>
Farben := "Rot,Grün|Blau;Gelb|Cyan,Magenta"
<em>; Initialisiert einen Zähler, um unsere aktuelle Zeichenkettenposition im Auge zu behalten.</em>
Position := 0

Loop Parse, Farben, ",|;"
{
    <em>; Berechnet die Position der Trennung am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt die Trennung, die von der parsenden Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox "Feld: " A_LoopField "`nTrennung: " Trennung
}</pre>

</body>
</html>
