<!DOCTYPE HTML>
<html>
<head>
<title>Is</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1><em>Wert</em> is <em>Typ</em></h1>

<p>Überprüft innerhalb eines Ausdrucks, ob der Wert numerisch, großgeschrieben und so weiter ist. </p>

<pre class="Syntax"><span class="func">if</span> <i>Wert</i> is <i>Typ</i>
<span class="func">if</span> !(<i>Wert</i> is <i>Typ</i>) </pre>
<h3>Parameter</h3>
<dl>

  <dt>Wert</dt>
  <dd><p>Wert, der überprüft werden soll (muss ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein).</p></dd>

  <dt>Typ</dt>
  <dd><p>Eine Zeichenkette oder ein Objekt, wie unten beschrieben (muss ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein).</p></dd>

</dl>

<h3 id="Types">Typen</h3>
<p>Case-insensitive Zeichenketten.</p>
<table class="info">
  <tr>
    <th>&nbsp;</th><th></th>
  </tr>
  <tr>
    <td style="width:15%">integer</td>
    <td>Wahr, wenn <em>Wert</em> ein Integer oder eine rein-numerische Zeichenkette (dezimal oder hexadezimal) ohne Dezimalpunkt ist. Davor- oder dahinterliegende Leer- und Tabulatorzeichen sind erlaubt. Die Zeichenkette kann mit einem Plus- oder Minuszeichen beginnen und darf nicht leer sein.</td>
  </tr>
  <tr>
    <td>float</td>
    <td>Wahr, wenn <em>Wert</em> eine Gleitkommazahl oder eine rein-numerische Zeichenkette (dezimal oder hexadezimal) mit Dezimalpunkt ist. Davor- oder dahinterliegende Leer- und Tabulatorzeichen sind erlaubt. Die Zeichenkette kann mit einem Pluszeichen, Minuszeichen oder Dezimalpunkt beginnen und darf nicht leer sein.</td>
  </tr>
  <tr>
    <td>number</td>
    <td>Wahr, wenn <code><i>Wert</i> is "integer" or <i>Wert</i> is "float"</code>.</td>
  </tr>
  <tr>
    <td>object</td>
    <td>Wahr, wenn <em>Wert</em> ein <a href="../Objects.htm">Objekt</a> ist.</td>
  </tr>
  <tr>
    <td>byref</td>
    <td>Wahr, wenn <em>Wert</em> ein Verweis zu einem <a href="../Functions.htm#ByRef">ByRef-Parameter</a> ist und wenn der Aufrufer der Funktion einen Variablenverweis übergeben hat.</td>
  </tr>
  <tr>
    <th>Zeichenketten (Strings)</th><th></th>
  </tr>
  <tr>
    <td>digit</td>
    <td>Wahr, wenn <em>Wert</em> ein Integer, eine leere Zeichenkette oder eine Zeichenkette bestehend aus den Zeichen 0 bis 9 ist. Folgende Zeichen sind nicht erlaubt: Leerzeichen, Tabulatorzeichen, Plus- und Minuszeichen, Dezimalpunkte, Hexadezimalzahlen und 0x-Präfix.</td>
  </tr>
  <tr>
    <td>xdigit</td>
    <td>Hexadezimale Zahlen: Das gleiche wie <em>digit</em>, außer dass die Zeichen A bis F (groß- oder kleingeschrieben) auch erlaubt sind. Der 0x-Präfix wird toleriert, falls vorhanden.</td>
  </tr>
  <tr>
    <td>alpha</td>
    <td>Wahr, wenn <em>Wert</em> eine Zeichenkette ist, und entweder leer ist oder nur alphabetische Zeichen enthält. Falsch, wenn Zahlen, Leerzeichen, Tabulatorzeichen, Punkte oder andere nicht-alphabetische Zeichen in der Zeichenkette sind. Wenn <em>Wert</em> beispielsweise ein Leerzeichen plus Buchstaben enthalten würde, wäre die Variable <em>nicht</em> vom Typ <em>alpha</em>. </td>
  </tr>
  <tr>
    <td>upper</td>
    <td>Wahr, wenn <em>Wert</em> eine Zeichenkette ist, und entweder leer ist oder nur Großbuchstaben enthält. Falsch, wenn Zahlen, Leerzeichen, Tabulatorzeichen, Punkte oder andere nicht großgeschriebene Zeichen in der Zeichenkette sind.</td>
  </tr>
  <tr>
    <td>lower</td>
    <td>Wahr, wenn <em>Wert</em> eine Zeichenkette ist, und entweder leer ist oder nur Kleinbuchstaben enthält. Falsch, wenn Zahlen, Leerzeichen, Tabulatorzeichen, Punkte oder andere nicht kleingeschriebene Zeichen in der Zeichenkette sind.</td>
  </tr>
  <tr>
    <td>alnum</td>
    <td>Das gleiche wie <em>alpha</em>, aber mit dem Unterschied, dass die Zeichen von 0 bis 9 auch erlaubt sind.</td>
  </tr>
  <tr>
    <td>space</td>
    <td>Wahr, wenn <em>Wert</em> eine Zeichenkette ist, und entweder leer ist oder nur Leerraumzeichen enthält. Leerraumzeichen sind: Leerzeichen (<a href="../Variables.htm">A_Space</a> oder `s), Tabulatorzeichen (<a href="../Variables.htm">A_Tab</a> oder `t), LF-Zeichen (`n), CR-Zeichen (`r), vertikaler Tabulator (`v) und Seitenvorschub (`f).</td>
  </tr>
  <tr id="time">
    <td>time</td>
    <td><p>Wahr, wenn <em>Wert</em> ein gültiger Zeitstempel im <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format ist. Dieser Zeitstempel muss nicht die vollständige Länge haben. Zum Beispiel würde eine 4-stellige Zeichenkette wie 2004 als gültig angesehen werden. Mit <a href="StrLen.htm">StrLen</a> kann festgestellt werden, ob zusätzliche Zeitkomponenten vorhanden sind.</p>
      <p>Jahre älter als 1601 werden nicht als gültig angesehen, weil das Betriebssystem sie generell nicht unterstützt. Das höchste als gültig angesehenes Jahr ist 9999. </p>
      <p>Das Wort DATE könnte man als Ersatz für das Wort TIME verwenden - mit dem gleichen Ergebnis.</p>
    </td>
  </tr>
</table>

<h3 id="Objects">Objekte</h3>
<p>Wenn <em>Typ</em> ein <a href="../Objects.htm">Objekt</a> ist, wird überprüft, ob <em>Wert</em> ein direkt oder indirekt abgeleitetes Objekt von <em>Typ</em> ist. Zum Beispiel:</p>
<pre>x := {}
y := new x  <em>; Äquivalent zu y := {base: x}</em>
z := new y
MsgBox(x is x)  <em>; False</em>
MsgBox(y is x)  <em>; True</em>
MsgBox(z is x)  <em>; True</em>
</pre>

<h3>Bemerkungen</h3>
<p><code>is</code> kann überall dort eingesetzt werden, wo ein Ausdruck erwartet wird. <a href="../Variables.htm#Operators">Prioritätsregeln</a> gelten hier auch; zum Beispiel wäre <code>x or y is z</code> das gleiche wie <code>x or (y is Z)</code>.</p>
<p><code>is</code> kann mehrmals angewendet werden, um einen Wert auf mehrere Typen zu prüfen. Zum Beispiel <code>x is "integer" or x is "space"</code>.</p>
<p>Direkt angegebene Zahlen wie <code>128</code>, <code>0x7F</code> und <code>1.0</code> werden in reine Zahlen umgewandelt, bevor das Skript seine Ausführung beginnt. Das heißt, dass sie ihr aktuelles Format verlieren werden. Demzufolge ist immer das dezimale Format einer Zahl relevant, wenn eine Typenüberprüfung erfolgt. Zum Beispiel wäre <code>0x7F is "digit"</code> das gleiche wie <code>"128" is "digit"</code>.</p>
<p>Das Gebietsschema des Betriebssystems wird ignoriert, sofern <a href="StringCaseSense.htm">StringCaseSense Locale</a> nicht verwendet wurde.</p>

<h3>Siehe auch</h3>
<p><a href="../Variables.htm#YYYY">A_YYYY</a>, <a href="FileGetTime.htm">FileGetTime</a>, <a href="IfExpression.htm">if (Ausdruck)</a>, <a href="StrLen.htm">StrLen</a>, <a href="InStr.htm">InStr</a>, <a href="StrLower.htm">StrUpper</a>, <a href="DateAdd.htm">DateAdd</a></p>

<h3>Beispiel</h3>
<pre class="NoIndent">if var is "float"
   MsgBox var " ist eine Gleitkommazahl."
else if var is 'integer'
    MsgBox var " ist ein Integer."
if var is "time"
    MsgBox var " ist auch ein gültiger Zeitstempel."</pre>

</body>
</html>
