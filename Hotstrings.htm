<!DOCTYPE HTML>
<html>
<head>
<title>Hotstrings und Auto-Ersetzen (ähnlich wie AutoText und AutoCorrect)</title>
<meta name="description" content='Freies Dienstprogramm, um Abkürzungen bei Benutzereingabe automatisch zu ersetzen (ähnlich wie AutoText und AutoCorrect); z. B. wird "bzw" zu "beziehungsweise", egal wo die Eingabe erfolgt.'>
<meta name="keywords" content="auto-ersetzen,autotext,autocorrect,auto text,auto correct,abkürzungserweiterung,abkürzung,abkürzungen,autoreplace,auto replace,text,expander,frei,eingeben,eingabe,wort,wörter">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotstrings und Auto-Ersetzen</h1>

<h2>Einführung und einfache Beispiele</h2>
<p>Obwohl mit Hotstrings hauptsächlich Abkürzungen bei der Eingabe erweitert werden (Automatisches Ersetzen), können sie auch dazu verwendet werden, vordefinierte Aktionen zu starten. In diesem Zusammenhang sind sie prinzipiell das gleiche wie <a href="Hotkeys.htm">Hotkeys</a>, außer dass sie üblicherweise aus mehr als einem Zeichen bestehen (also eine Zeichenkette).</p>
<p>Um einen Hotstring zu definieren, muss die auslösende Abkürzung wie folgt von Doppelpunkt-Paaren umschlossen werden:</p>
<pre>::bzw::beziehungsweise</pre>
<p>Die Abkürzung bzw wird automatisch mit "beziehungsweise" ersetzt, wann immer du sie eingibst (standardmäßig aber erst, wenn danach ein <a href="#EndChars">Endungszeichen</a> erfolgt ist, wie z. B. ein Leerzeichen, Punkt oder Enter).</p>
<p id="auto">Das "beziehungsweise"-Beispiel oben ist ein sogenannter automatisch-ersetzender Hotstring, weil der eingegebene Text automatisch gelöscht und mit der angegebenen Zeichenkette nach dem zweiten Doppelpunkt-Paar ersetzt wird. Desweiteren kann ein Hotstring auch zum Durchführen einer benutzerdefinierten Aktion verwendet werden, wie es in den folgenden Beispielen gezeigt wird. Beachte, dass die Befehle <u>unterhalb</u> des Hotstrings erscheinen müssen:</p>
<pre>::bzw::
MsgBox Du hast "bzw" eingegeben.
return

:*:]d::  <em>; Dieser Hotstring ersetzt "]d" mit dem aktuellen Datum- und Zeitwert.</em>
<a href="commands/FormatTime.htm">FormatTime</a>, AktuellerZeitstempel,, d.M.yyyy HH:mm  <em>; z. B. 21.6.2011 15:10</em>
SendInput %AktuellerZeitstempel%
return</pre>
<p>Die beiden Beispiele oben sind keine automatisch-ersetzende Hotstrings. Aber auch hier wird die eingegebene Abkürzung standardmäßig gelöscht. Dies erfolgt durch wiederholendes Löschen des letzten Zeichens, das mit der <a href="#b0">b0-Option</a> deaktiviert werden kann.</p>
<h2 id="EndChars">Endungszeichen</h2>
<p>Standardmäßig muss man ein <em>Endungszeichen</em> nach der Hotstring-Abkürzung eingeben, um sie auslösen zu können, sofern die <a href="#Asterisk">Sternchen-Option</a> nicht aktiv ist. Endungszeichen bestehen anfangs aus den folgenden Zeichen: <strong>-()[]{}':;"/\,.?!`n `t</strong> (`n ist Enter, `t ist Tabulator, und beachte das Leerzeichen zwischen `n und `t). Mit dem folgenden Beispiel kann diese Zeichenreihe geändert werden, das die neuen Endungszeichen für <u>alle</u> Hotstrings bereitstellt, nicht nur für die darunter:</p>
<pre>#Hotstring EndChars -()[]{}:;'"/\,.?!`n `t</pre>
<h2 id="Options">Optionen</h2>
<p>Es gibt zwei Möglichkeiten, wie man das Standardverhalten eines Hotstrings ändern kann:</p>
<ol>
  <li>Die <a href="commands/_Hotstring.htm">#Hotstring</a>-Direktive, die alle Hotstrings beeinflusst, die sich im Skript physisch darunter befinden. Das folgende Beispiel zeigt, wie man die Optionen C und R aktivieren kann: <code>#Hotstring <strong>c r</strong></code>.</li>
  <li>Einfügen von Optionen innerhalb des ersten Doppelpunktpaares. Das folgende Beispiel zeigt, wie man die Optionen C und * für einen einzelnen Hotstring wirksam machen kann:<br>
  <code>:<strong>c*</strong>:j@::john@somedomain.com <em>; c ist Unterscheidung zwischen Groß- und Kleinschreibung, und * ist "Endungszeichen sind nicht notwendig".</em></code>.</li>
</ol>
<p>Die folgende Liste beschreibt die einzelnen Optionen. Sind mehr als eine Option notwendig, können diese jeweils mit einem Leerzeichen getrennt werden.</p>
<p id="Asterisk"><strong>*</strong> (Sternchen): Ein Endungszeichen (z. B. Leerzeichen, Punkt oder Enter) ist nicht erforderlich, um den Hotstring auslösen zu können. Zum Beispiel:</p>
<pre>:*:j@::jsmith@somedomain.com</pre>
<p>Dieses Beispiel würde die Abkürzung ersetzen, sobald du das @-Zeichen eingibst. Verwendet man die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a>, muss <strong>*0</strong> angegeben werden, um diese Option wieder deaktivieren zu können.</p>
<p id="Question"><strong>?</strong> (Fragezeichen): Der Hotstring wird ausgelöst, selbst wenn er sich in einem anderen Wort befindet; das heißt, wenn das davor eingegebene Zeichen alphanumerisch ist. Wenn <code>:?:de::Deutschland</code> beispielsweise ein Hotstring ist, würde das Eingeben von "Fahrstunde " bewirken, dass "FahrstunDeutschland " erzeugt wird. Mit <strong>?0</strong> kann diese Option wieder deaktiviert werden.</p>
<p id="b0"><strong>B0</strong> (B gefolgt von einer Null): Es erfolgt <u>kein</u> automatisches Rücksetzen (backspacing), um die eingegebene Abkürzung zu entfernen. Mit einem einfachen <strong>B</strong> kann dieses Rücksetzen wieder aktiviert werden, wenn es zuvor deaktiviert wurde. Ein Skript kann dieses Rücksetzen auch selbst durchführen, z. B. mit {bs 5}, das die Rücktaste 5-mal drücken würde. Ebenso könnte die linke Pfeiltaste via {left 5} gesendet werden. Zum Beispiel würde der folgende Hotstring "&lt;em&gt;&lt;/em&gt;" erzeugen und die Einfügemarke um 5 Stellen nach links verschieben (so dass der Textcursor genau zwischen den Tags ist):</p>
<pre>:*b0:&lt;em&gt;::&lt;/em&gt;{left 5}</pre>
<p><strong>C</strong>: Zeichengenauigkeit: Eine Abkürzung wird nur erweitert, wenn sie genau mit der Groß- und Kleinschreibung übereinstimmt, wie sie im Skript definiert wurde. Mit <strong>C0</strong> kann diese Option wieder deaktiviert werden.</p>
<p><strong>C1</strong>: Der Hotstring passt sich nicht der eingegebenen Groß- und Kleinschreibung an. Verwende diese Option, um <a href="#auto">automatisch-ersetzende Hotstrings</a> unabhängig von Groß- und Kleinschreibung zu machen, und sie daran zu hindern, sich nach der Groß- und Kleinschreibung der eingegebenen Zeichen zu richten. Hotstrings, die Groß- und Kleinschreibung berücksichtigen (die Standardeinstellung), würden ihren Text in Großbuchstaben erzeugen, wenn die eingegebene Abkürzung auch in Großbuchstaben wäre. Würde man nur den ersten Buchstaben großschreiben, wäre der erste Buchstabe des Ersatztextes auch großgeschrieben (sofern es ein Buchstabe ist). Ansonsten erfolgt die Ausgabe genauso, wie sie angegeben wurde. Verwendet man die <a href="commands/_Hotstring.htm">#Hotstring-Direktive</a>, muss <strong>C0</strong> angegeben werden, um diese Option wieder deaktivieren zu können (an Groß- und Kleinschreibung anpassen).</p>
<p><strong>Kn</strong>: Tastenverzögerung: Diese selten verwendete Option bestimmt die Verzögerung zwischen den Tastatureingaben beim Automatischen Rücksetzen (backspacing) oder <a href="#auto">Automatischen Ersetzen</a>. Gebe die neue Verzögerung bei <strong>n</strong> an; zum Beispiel würde k10 eine Verzögerung von 10 ms ermöglichen und k-1 die Verzögerung deaktivieren. Das genaue Verhalten dieser Option hängt davon ab, welcher <a href="#SendMode">Sendemodus</a> aktiv ist:</p>
<ul>
  <li>SI (SendInput): Die Tastenverzögerung wird ignoriert, da eine Verzögerung in diesem Modus nicht möglich ist. Es sei denn, SendInput ist <a href="commands/Send.htm#SendInputUnavail">nicht verfügbar</a> - in diesem Fall greifen die Hotstrings auf den unten genannten SendPlay-Modus zurück (der die Tastenverzögerung berücksichtigt).</li>
  <li>SP (SendPlay): Standardmäßig gilt eine Verzögerungsdauer von Null, das bei SendPlay das gleiche ist wie -1 (keine Verzögerung). In diesem Modus ist die Verzögerung eher die <a href="commands/SetKeyDelay.htm#dur">Druckdauer</a>, als die Verzögerung zwischen den Tastatureingaben.</li>
  <li>SE (SendEvent): Standardmäßig gilt eine Verzögerungsdauer von Null. Für die meisten Zwecke ist eine Null empfohlen, da sie schnell ist, aber immer noch gut mit anderen Prozessen kooperiert (aufgrund der internen Durchführung von <a href="commands/Sleep.htm">Sleep 0</a>). Mit k-1, das die Verzögerung komplett deaktiviert, kann das Automatische Ersetzen beschleunigt werden, wenn eine starke CPU-Belastung häufig auftreten sollte. Bei -1 wird die Prozess-Priorität des Skripts eine wichtige Rolle dabei spielen, wie schnell Tastatureingaben gesendet werden können. Mit <code><a href="commands/Process.htm#Priority">ProcessSetPriority</a>, High</code> kann die Priorität eines Skripts erhöht werden.</li>
</ul>
<p><strong>O</strong>: Lässt das Endungszeichen im Ausgabetext weg, der mit einem <a href="#auto">automatisch-ersetzenden Hotstring</a> erzeugt wurde. Diese Option kann nützlich sein, wenn du einen Hotstring dazu bringen willst, weiterhin ein Endungszeichen zu benötigen, um eindeutig zu bleiben, aber nicht willst, dass dieses Endungszeichen auf dem Bildschirm angezeigt werden soll. Wenn <code>:o:ar::Aristokrat</code> beispielsweise ein Hotstring ist, würde die Eingabe von "ar", gefolgt von einem Leerzeichen, "Aristokrat" ohne nachfolgendem Leerzeichen erzeugen. Dadurch hat man die Möglichkeit, das Wort in den Plural oder Kasus zu setzen, ohne dabei die Rücktaste verwenden zu müssen. Mit <strong>O0</strong> (Buchstabe O mit einer Null danach) kann diese Option wieder deaktiviert werden.</p>
<p><strong>Pn</strong>: Die <a href="misc/Threads.htm">Priorität</a> des Hotstrings (z. B. P1). Diese selten verwendete Option funktioniert nicht bei <a href="#auto">automatisch-ersetzenden Hotstrings</a>.</p>
<p id="raw"><strong>R</strong>: Sendet den Ersatztext, ohne ihn dabei ausgewertet zu haben; das heißt, dass er so erscheint wie er ist, anstatt zum Beispiel {Enter} als ENTER-Taste, ^c als STRG+C und so weiter zu übersetzen. Diese Option wird bei Hotstrings, die einen <a href="#continuation">Fortsetzungsbereich</a> haben, automatisch in Kraft treten. Mit <strong>R0</strong> kann diese Option wieder deaktiviert werden.</p>
<p id="SendMode"><strong>SI</strong> oder <strong>SP</strong> oder <strong>SE</strong>: Bestimmt die Methode, mit der die <a href="#auto">automatisch-ersetzenden Hotstrings</a> ihre Tastatureingaben senden sollen. Diese Optionen schließen sich gegenseitig aus: Es kann nur eine Option zur selben Zeit aktiv sein. Die folgende Liste beschreibt die einzelnen Optionen:</p>
<ul>
  <li>SI ist die <a href="commands/Send.htm#SendInputDetail">SendInput</a>-Methode, die schneller und zuverlässiger ist als die anderen Methoden. Außerdem hat SendInput (und auch SendPlay) den Vorteil, dass sie alles nach hinten verschiebt, was du während des <a href="#auto">Automatischen Ersetzens</a> eines Hotstrings eingibst. Deine Tastatureingaben werden nicht mit den Tastatureingaben des Ersatztextes vermischt. Wenn SendInput <a href="commands/Send.htm#SendInputUnavail">nicht zur Verfügung steht</a>, greifen Hotstrings stattdessen auf SendPlay zurück.</li>
  <li>SP ist die <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Methode, um Hotstrings für viele Spiele funktionsfähig zu machen.</li>
  <li>SE ist die <a href="commands/Send.htm#SendEvent">SendEvent</a>-Methode.</li>
</ul>
<p>Werden keine der oben genannten Optionen verwendet, gilt standardmäßig SendInput. Beachte aber, dass, im Gegensatz zur SI-Option, SendEvent statt SendPlay verwendet wird, sobald SendInput nicht zur Verfügung steht.</p>
<p id="z"><strong>Z</strong>: Diese selten verwendete Option setzt die Hotstring-Erkennung wieder zurück, wann immer der Hotstring ausgelöst wird. Das heißt, dass das Skript auf einen völlig neuen Hotstring wartet und alles, was du zuvor eingegeben hast, ignoriert. Dieser Sachverhalt kann verhindern, dass Hotstrings unbeabsichtigt ausgelöst werden. Dazu wird folgendes Beispiel in Betracht gezogen:</p>
<pre>:b0*?:11::
SendInput xx
return</pre>
<p>Da die Z-Option fehlt, würde das Eingeben von 111 (drei aufeinanderfolgenden Einsen) den Hotstring zweimal auslösen, weil die mittlere 1 das <em>letzte</em> Zeichen vom ersten Auslösen ist, aber auch das <em>erste</em> Zeichen vom zweiten Auslösen. Wenn du den Buchstaben Z vor b0 einfügst, müsstest du vier statt drei Einsen eingeben, um den Hotstring zweimal auslösen zu können. Mit <strong>Z0</strong> kann diese Option wieder deaktiviert werden.</p>
<h2 id="continuation">Lange Ersatztexte</h2>
<p>Hotstrings, die lange Ersatztexte erzeugen, können durch <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a> besser lesbar und verwaltbar gemacht werden. Zum Beispiel:</p>
<pre>::text1::
(
Der gesamte Text zwischen der oberen und unteren Klammer wird literal behandelt, einschließlich Kommas und Prozentzeichen.
Standardmäßig bleibt das CR-Zeilenumbruchszeichen (Enter) zwischen der vorherigen und dieser Zeile erhalten.
    Standardmäßig bleibt die Einrückung (Tabulator) auf der linken Seite dieser Zeile erhalten.

Siehe <a href="Scripts.htm#continuation">Fortsetzungsbereich</a>, wie diese Standardverhalten geändert werden können.
)</pre>
<p>Ein Fortsetzungsbereich bewirkt außerdem, dass der Hotstring standardmäßig den <a href="#raw">Raw-Modus</a> verwendet. Dieses Sonderverhalten kann nur überschrieben werden, wenn bei jedem Hotstring, der ein Fortsetzungsbereich hat, die <a href="#raw">r0-Option</a> angegeben wird (z. B. <code>:r0:text1::</code>).</p>
<h2 id="variant">Kontextabhängige Hotstrings</h2>
<p>Die Direktiven <a href="commands/_IfWinActive.htm">#IfWinActive/Exist</a> können verwendet werden, um bestimmte Hotstrings kontextabhängig zu machen. Solche Hotstrings senden unterschiedliche Ersatztexte, führen unterschiedliche Aktionen aus oder machen überhaupt nichts, abhängig vom Typ des Fensters, das aktiv oder vorhanden ist. Zum Beispiel:</p>
<pre>#IfWinActive ahk_class Notepad
::bzw::Dieser Ersatztext wird nur im Editor erscheinen.
#IfWinActive
::bzw::Dieser Ersatztext erscheint nur in einem Fenster, das nicht der Editor ist.</pre>
<h2 id="AutoCorrect">AutoCorrect</h2>
<p>Das folgende Skript verwendet Hotstrings, um ca. 4700 häufig vorkommende englische Rechtschreibfehler nebenbei zu korrigieren. Es enthält auch den Hotkey WIN+H, um auf einfache Weise weitere Rechtschreibfehler hinzufügen zu können:</p>
<p>Download: <a href="http://www.autohotkey.com/download/AutoCorrect.ahk">AutoCorrect.ahk</a> (127 KB)</p>
<p>Autor: <a href="http://www.biancolo.com/articles/universal-autocorrect-with-autohotkey-and-wikipedia">Jim Biancolo</a> und <a href="http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings">Wikipedia's Lists of Common Misspellings</a></p>
<h2>Bemerkungen</h2>
<p>Variablenverweise wie <code>%MeineVar%</code>, die innerhalb des Ersatztextes vorkommen, werden zurzeit nicht unterstützt. Man kann dies umgehen, wenn man Hotstrings nicht <a href="#auto">automatisch-ersetzend</a> macht. Verwende stattdessen den <a href="commands/Send.htm#SendInput">SendInput</a>-Befehl unterhalb der Abkürzung, gefolgt von einer Zeile, die nur das Wort Return enthält.</p>
<p>Um ein zusätzliches Leer- oder Tabulatorzeichen nach dem Ersatztext zu senden, füge es am Ende des Ersatztextes ein und mache das letzte Zeichen zu einem umgekehrten Häkchen (`). Zum Beispiel:</p>
<pre>:*:bzw::beziehungsweise `</pre>
<p id="NoMouse">Ein Klick auf die linke oder rechte Maustaste wird die Hotstring-Erkennung zurücksetzen. Das heißt, dass das Skript auf einen völlig neuen Hotstring warten und alles, was du zuvor eingegeben hast, ignorieren wird (ist dies unerwünscht, verwende die Zeile <code><a href="commands/_Hotstring.htm">#Hotstring NoMouse</a></code> irgendwo im Skript). Dieses "Zurücksetzen bei einem Mausklick" ist standardmäßig so festgelegt, weil jeder Klick üblicherweise die Texteinfügemarke (Caret) verschiebt oder den Tastaturfokus auf ein neues Steuerelement/Feld setzt. In solchen Fällen ist es generell wünschenswert: 1) einen Hotstring auslösen zu können, auch ohne <a href="#Question">Fragezeichen-Option</a>; 2) das Auslösen zu verhindern, wenn du nach einem Mausklick etwas eingibst, das zufällig eine gültige Abkürzung aus der vorherigen Eingabe formt.</p>
<p>Die Built-in-Variable <strong>A_EndChar</strong> enthält das Endungszeichen, das du zuletzt eingegeben hast, um einen nicht-automatisch-ersetzenden Hotstring auszulösen. Wenn ein Endungszeichen nicht benötigt wurde (wegen der <a href="#Asterisk">*-Option</a>), wird sie leer sein. A_EndChar ist nützlich beim Erstellen von Hotstrings, die den Send-Befehl verwenden oder deren Verhalten variieren sollen, je nachdem, welches Endungszeichen du eingegeben hast. Mit <code>SendRaw %A_EndChar%</code> kann das Endungszeichen selbst gesendet werden (<a href="commands/Send.htm">SendRaw</a> wird hier verwendet, weil der normale Send-Befehl nicht in der Lage ist, Zeichen wie !{} richtig zu senden).</p>
<p>Kommas, Prozentzeichen und einzelne Doppelpunkte müssen innerhalb von Hotstring-Definitionen nicht mit einem <a href="misc/EscapeChar.htm">Escapezeichen</a> versehen werden. Umgekehrte Häkchen und Semikolons benötigen dagegen ein Leerzeichen oder einen Tabulator auf der linken Seite. Unter <a href="misc/EscapeChar.htm">Escapesequenzen</a> findest du eine komplette Liste.</p>
<p>Die Sonderzeichen des <a href="commands/Send.htm">Send-Befehls</a> wie {Enter} werden im Ersatztext des <a href="#auto">automatisch-ersetzenden Hotstrings</a> unterstützt (sofern die <a href="#raw">Raw-Option</a> nicht verwendet wird). Die Hotstring-Abkürzungen selbst unterstützen keine Sonderzeichen dieser Art. Verwende stattdessen `n für die ENTER-Taste und `t (oder ein literales Tabulatorzeichen) für die TAB-Taste (unter <a href="misc/EscapeChar.htm">Escapesequenzen</a> findest du eine komplette Liste). Zum Beispiel würde der Hotstring <code>:*:ab`t::</code> ausgelöst werden, wenn du "ab", gefolgt von einem Tabulatorzeichen, eingibst.</p>
<p>Leer- und Tabulatorzeichen werden innerhalb von Hotstring-Definitionen literal behandelt. Zum Beispiel würden die folgenden Hotstrings zwei unterschiedliche Ergebnisse erzeugen: <code>::bzw::beziehungsweise</code> und <code>::bzw:: :beziehungsweise</code>.</p>
<p>Jede Hotstring-Abkürzung kann nicht länger sein als 40 Zeichen. Das Programm wird dich warnen, wenn diese Länge überschritten wurde. Dagegen ist die Länge des Ersatztextes auf ca. 5000 Zeichen begrenzt, wenn der <a href="#SendMode">Sendemodus</a> standardmäßig SendInput ist. Dieses Limit kann auf 16383 Zeichen erhöht werden, wenn man auf einen der anderen <a href="#SendMode">Sendemethoden</a> wechselt. Desweiteren kann eine unbegrenzte Anzahl an Zeichen gesendet werden, wenn <code><a href="commands/Send.htm#SendPlayDetail">SendPlay %MeineVar%</a></code> in der Hotstring-Definition angegeben wird.</p>
<p>Die Reihenfolge, in der die Hotstrings definiert werden, bestimmt ihre relative Priorität zueinander. Das heißt, wenn deine Eingabe mehr als einen Hotstring auslösen kann, wird nur der erste im Skript aufgelistete Hotstring in Kraft treten. Verwandtes Thema: <a href="#variant">Kontextabhängige Hotstrings</a>.</p>
<p>Jedes Rücksetzen, das du mit der Rücktaste durchführst, wird zum Erkennen des Hotstrings mit einbezogen. Verwendest du aber Pfeiltasten, BILD-NACH-OBEN, BILD-NACH-UNTEN, POS1 und ENDE, um innerhalb eines Editors zu navigieren, wird der Hotstring-Erkennungsprozess zurückgesetzt. Das heißt, dass das Skript auf einen völlig neuen Hotstring warten wird.</p>
<p>Ein Hotstring kann eingegeben werden, selbst wenn das aktive Fenster deine Tastatureingaben ignoriert. Das heißt, dass der Hotstring noch ausgelöst wird, obwohl die auslösende  Abkürzung nicht sichtbar ist. Zudem kannst du immer noch die Rücktaste drücken, um die aktuellste Tastatureingabe rückgängig zu machen (auch wenn die Auswirkung nicht zu sehen ist).</p>
<p id="label">Es ist möglich, mit <a href="commands/Gosub.htm">Gosub</a> oder <a href="commands/Goto.htm">Goto</a> zu einem Hotstring-Label zu springen, wenn du sein erstes Doppelpunkt-Paar (einschließlich die Optionssymbole) vor seinem Namen setzt. Zum Beispiel: <code>Gosub ::xyz</code>. Springt man aber zu einem <a href="#auto">einzeiligen (automatisch-ersetzenden) Hotstring</a>, wird nichts anderes ausgeführt als ein <a href="commands/Return.htm">Return</a>.</p>
<p>Hotstrings werden weder überwacht, noch können sie von einem unsichtbaren <a href="commands/Input.htm">Input</a>-Befehl ausgelöst werden. Nur sichtbare Eingaben sind in der Lage, sie auszulösen.</p>
<p id="InputLevel">Standardmäßig werden Tastatureingaben, die von einem AutoHotkey-Skript erzeugt wurden, keine Hotstrings auslösen. Dadurch kann verhindert werden, dass eine Endlosschleife erzeugt wird, in der Hotstrings sich gegenseitig immer und immer wieder auslösen. Dieses Verhalten kann mit <a href="commands/_InputLevel.htm">#InputLevel</a> und <a href="commands/SendLevel.htm">SendLevel</a> kontrolliert werden. Allerdings verwenden automatisch-ersetzende Hotstrings immer Sendestufe 0 und können deshalb nie <a href="commands/_UseHook.htm">Hook-Hotkeys</a> oder Hotstrings auslösen.</p>
<p>In bestimmten Fällen ist der <a href="commands/Input.htm">Input</a>-Befehl flexibler als Hotstrings. Durch diesen Befehl müssen deine Tastatureingaben nicht sichtbar im aktiven Fenster eingegeben werden (z. B. in einem Spiel). Zudem unterstützt er Zeichen wie Escape als Endungstasten.</p>
<p>Der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> wird automatisch in Kraft treten, sobald das Skript Hotstrings enthält.</p>
<p>In einigen Punkten verhalten sich Hotstrings genauso wie Hotkeys:</p>
<ul>
  <li>Sie werden vom <a href="commands/Suspend.htm">Suspend</a>-Befehl beeinflusst.</li>
  <li>Sie berücksichtigen <a href="commands/_MaxThreads.htm">#MaxThreads</a> und <a href="commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> (aber nicht <a href="commands/_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>).</li>
  <li>Skripte, die Hotstrings enthalten, sind automatisch <a href="Scripts.htm#persistent">persistent</a>.</li>
  <li>Nicht-automatisch-ersetzende Hotstrings werden einen neuen <a href="misc/Threads.htm">Thread</a> erstellen, sobald sie gestartet werden. Außerdem werden sie die Built-in-Hotkey-Variablen wie <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a> aktualisieren.</li>
</ul>
<p>Bekannte Einschränkung: Bei bestimmten Java-Anwendungen kann es passieren, dass Hotstrings den Benutzer dabei stören, diakritische Buchstaben eingeben zu können (via toter Tasten). Man kann dies umgehen, wenn man <a href="commands/Suspend.htm">Suspend</a> vorübergehend aktiviert (um alle Hotstrings zu deaktivieren).</p>
<h2 id="Helper">Hotstring Helper</h2>
<p>Andreas Borutta hat das folgende Skript vorgeschlagen, wenn du ein Benutzer vieler Hotstrings bist. Du kannst durch Drücken von WIN+H (oder eines beliebig anderen Hotkeys) den aktuell markierten Text in ein Hotstring umwandeln. Hast du zum Beispiel "beziehungsweise" in einem Textverarbeitungsprogramm markiert, wird das Drücken von WIN+H dich zur Eingabe einer Abkürzung auffordern (z. B. bzw) und dann den neuen Hotstring in das Skript einfügen. Danach wird das Skript neu geladen, um den Hotstring zu aktivieren.</p>
<pre class="NoIndent">#h::  <em>; Hotkey: WIN+H
; Ermittelt den aktuell markierten Text. Es wird die Zwischenablage anstelle von
; "ControlGet Selected" verwendet, da sie bei den meisten Editoren
; (bzw. Textverarbeitungsprogramme) funktioniert.  Speichert den aktuellen Inhalt der Zwischenablage,
; um sie später wiederherstellen zu können. Allerdings gilt das nur für Klartext:</em>
ClipboardAlt := ClipboardAll
Clipboard := "" <em>; Muss anfangs leer sein, damit die Erkennung funktioniert.</em>
Send ^c
ClipWait 1
if ErrorLevel  <em>; ClipWait hat die Zeit überschritten.</em>
    return
<em>; Ersetzt CRLF und/oder LF mit `n, um es für einen Hotstring im Raw-Modus verwendbar zu machen:
; Das gleiche wird für jedes andere Zeichen getan,
; das ein Problem im Raw-Modus sein könnte:</em>
StrReplace, Hotstring, % Clipboard, ``, ````  <em>; Zuerst diese Ersetzung, um Störungen bei den anderen darunter zu vermeiden.</em>
StrReplace, Hotstring, % Hotstring, `r`n, ``r  <em>; Das `r funktioniert besser als `n in MS Word usw.</em>
StrReplace, Hotstring, % Hotstring, `n, ``r
StrReplace, Hotstring, % Hotstring, %A_Tab%, ``t
StrReplace, Hotstring, % Hotstring, `;, ```;
Clipboard := ClipboardAlt  <em>; Stellt den vorherigen Inhalt der Zwischenablage wieder her.
; Verschiebt die Texteinfügemarke der InputBox auf eine bessere Position:</em>
SetTimer, VerschiebeEinfügemarke, 10
<em>; Zeigt die InputBox für den Standard-Hotstring an:</em>
InputBox, Hotstring, Gebe deine Abkürzung an der vorgegebenen Einfügemarke ein. Bei Bedarf kannst du den Ersatztext noch bearbeiten.`n`nBeispieleintrag: :R:bzw`::beziehungsweise, Neuer Hotstring, , :R:`:::%Hotstring%
if ErrorLevel  <em>; Der Benutzer hat Abbrechen gedrückt.</em>
    return
if InStr(Hotstring,":R`:::")
{
    MsgBox Es wurde keine Abkürzung angegeben. Der Hotstring wurde nicht hinzugefügt.
    return
}
<em>; Ansonsten wird der Hotstring hinzugefügt und das Skript neu geladen:</em>
FileAppend, `n%Hotstring%, %A_ScriptFullPath%  <em>; Setzt ein `n an den Anfang, falls eine leere Zeile am Ende der Datei fehlt.</em>
Reload
Sleep 200 <em>; Bei Erfolg wird das Reload diese Instanz während dem Sleep schließen, daher wird Zeile darunter nie erreicht.</em>
Result := MsgBox("Der gerade eingefügte Hotstring wurde scheinbar nicht richtig formatiert.  Möchtest du das Skript öffnen, um es zu bearbeiten? Den betroffenen Hotstring findest du ganz unten im Skript.",, 4)
if Result = "Yes"
    Edit
return

VerschiebeEinfügemarke:
if !WinActive("Neuer Hotstring")
    return
<em>; Verschiebt die Einfügemarke der InputBox auf eine Position, wo der Benutzer die Abkürzung eintragen kann.</em>
Send {Home}{Right 3}
SetTimer, VerschiebeEinfügemarke, Off
return</pre>
</body>
</html>
